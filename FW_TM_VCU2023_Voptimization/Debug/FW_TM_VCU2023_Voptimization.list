
FW_TM_VCU2023_Voptimization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a65c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000810  0800a768  0800a768  0001a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af78  0800af78  000200fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800af78  0800af78  000200fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800af78  0800af78  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af78  0800af78  0001af78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800af80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000027c4  20000100  0800b07c  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200028c4  0800b07c  000228c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a54  00000000  00000000  00020125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a4e  00000000  00000000  00035b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001598  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001400  00000000  00000000  0003ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00012a76  00000000  00000000  0003bf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00005a53  00000000  00000000  0004e9d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00054429  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005d7c  00000000  00000000  0005447c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000100 	.word	0x20000100
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a750 	.word	0x0800a750

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000104 	.word	0x20000104
 8000148:	0800a750 	.word	0x0800a750

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000164:	2300      	movs	r3, #0
 8000166:	60fb      	str	r3, [r7, #12]
 8000168:	e016      	b.n	8000198 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000170:	3301      	adds	r3, #1
 8000172:	029b      	lsls	r3, r3, #10
 8000174:	687a      	ldr	r2, [r7, #4]
 8000176:	429a      	cmp	r2, r3
 8000178:	d20b      	bcs.n	8000192 <GetPage+0x36>
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000180:	029b      	lsls	r3, r3, #10
 8000182:	687a      	ldr	r2, [r7, #4]
 8000184:	429a      	cmp	r2, r3
 8000186:	d304      	bcc.n	8000192 <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000188:	68fb      	ldr	r3, [r7, #12]
 800018a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800018e:	029b      	lsls	r3, r3, #10
 8000190:	e006      	b.n	80001a0 <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000192:	68fb      	ldr	r3, [r7, #12]
 8000194:	3301      	adds	r3, #1
 8000196:	60fb      	str	r3, [r7, #12]
 8000198:	68fb      	ldr	r3, [r7, #12]
 800019a:	2b7f      	cmp	r3, #127	; 0x7f
 800019c:	dde5      	ble.n	800016a <GetPage+0xe>
	  }
  }

  return 0;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
	...

080001ac <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 80001ac:	b5b0      	push	{r4, r5, r7, lr}
 80001ae:	b08a      	sub	sp, #40	; 0x28
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	60f8      	str	r0, [r7, #12]
 80001b4:	60b9      	str	r1, [r7, #8]
 80001b6:	4613      	mov	r3, r2
 80001b8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80001ba:	2300      	movs	r3, #0
 80001bc:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80001be:	f003 f9e3 	bl	8003588 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80001c2:	68f8      	ldr	r0, [r7, #12]
 80001c4:	f7ff ffca 	bl	800015c <GetPage>
 80001c8:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80001ca:	88fb      	ldrh	r3, [r7, #6]
 80001cc:	009b      	lsls	r3, r3, #2
 80001ce:	461a      	mov	r2, r3
 80001d0:	68fb      	ldr	r3, [r7, #12]
 80001d2:	4413      	add	r3, r2
 80001d4:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 80001d6:	69f8      	ldr	r0, [r7, #28]
 80001d8:	f7ff ffc0 	bl	800015c <GetPage>
 80001dc:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 80001de:	4b20      	ldr	r3, [pc, #128]	; (8000260 <Flash_Write_Data+0xb4>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 80001e4:	4a1e      	ldr	r2, [pc, #120]	; (8000260 <Flash_Write_Data+0xb4>)
 80001e6:	6a3b      	ldr	r3, [r7, #32]
 80001e8:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 80001ea:	69ba      	ldr	r2, [r7, #24]
 80001ec:	6a3b      	ldr	r3, [r7, #32]
 80001ee:	1ad3      	subs	r3, r2, r3
 80001f0:	0a9b      	lsrs	r3, r3, #10
 80001f2:	3301      	adds	r3, #1
 80001f4:	4a1a      	ldr	r2, [pc, #104]	; (8000260 <Flash_Write_Data+0xb4>)
 80001f6:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	4619      	mov	r1, r3
 80001fe:	4818      	ldr	r0, [pc, #96]	; (8000260 <Flash_Write_Data+0xb4>)
 8000200:	f003 fab4 	bl	800376c <HAL_FLASHEx_Erase>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d01f      	beq.n	800024a <Flash_Write_Data+0x9e>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800020a:	f003 f9f3 	bl	80035f4 <HAL_FLASH_GetError>
 800020e:	4603      	mov	r3, r0
 8000210:	e022      	b.n	8000258 <Flash_Write_Data+0xac>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000214:	009b      	lsls	r3, r3, #2
 8000216:	68ba      	ldr	r2, [r7, #8]
 8000218:	4413      	add	r3, r2
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	461c      	mov	r4, r3
 8000220:	4615      	mov	r5, r2
 8000222:	4622      	mov	r2, r4
 8000224:	462b      	mov	r3, r5
 8000226:	68f9      	ldr	r1, [r7, #12]
 8000228:	2002      	movs	r0, #2
 800022a:	f003 f93d 	bl	80034a8 <HAL_FLASH_Program>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d106      	bne.n	8000242 <Flash_Write_Data+0x96>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	3304      	adds	r3, #4
 8000238:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800023a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800023c:	3301      	adds	r3, #1
 800023e:	627b      	str	r3, [r7, #36]	; 0x24
 8000240:	e003      	b.n	800024a <Flash_Write_Data+0x9e>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000242:	f003 f9d7 	bl	80035f4 <HAL_FLASH_GetError>
 8000246:	4603      	mov	r3, r0
 8000248:	e006      	b.n	8000258 <Flash_Write_Data+0xac>
	   while (sofar<numberofwords)
 800024a:	88fb      	ldrh	r3, [r7, #6]
 800024c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800024e:	429a      	cmp	r2, r3
 8000250:	dbdf      	blt.n	8000212 <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000252:	f003 f9bf 	bl	80035d4 <HAL_FLASH_Lock>

	   return 0;
 8000256:	2300      	movs	r3, #0
}
 8000258:	4618      	mov	r0, r3
 800025a:	3728      	adds	r7, #40	; 0x28
 800025c:	46bd      	mov	sp, r7
 800025e:	bdb0      	pop	{r4, r5, r7, pc}
 8000260:	2000011c 	.word	0x2000011c

08000264 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	4613      	mov	r3, r2
 8000270:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	3304      	adds	r3, #4
 800027e:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	3304      	adds	r3, #4
 8000284:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000286:	88fb      	ldrh	r3, [r7, #6]
 8000288:	1e5a      	subs	r2, r3, #1
 800028a:	80fa      	strh	r2, [r7, #6]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d000      	beq.n	8000292 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000290:	e7ef      	b.n	8000272 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000292:	bf00      	nop
	}
}
 8000294:	bf00      	nop
 8000296:	3714      	adds	r7, #20
 8000298:	46bd      	mov	sp, r7
 800029a:	bc80      	pop	{r7}
 800029c:	4770      	bx	lr
	...

080002a0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2110      	movs	r1, #16
 80002a8:	4803      	ldr	r0, [pc, #12]	; (80002b8 <SELECT+0x18>)
 80002aa:	f003 fc8b 	bl	8003bc4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002ae:	2001      	movs	r0, #1
 80002b0:	f002 f9b6 	bl	8002620 <HAL_Delay>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	40010800 	.word	0x40010800

080002bc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2110      	movs	r1, #16
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <DESELECT+0x18>)
 80002c6:	f003 fc7d 	bl	8003bc4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f002 f9a8 	bl	8002620 <HAL_Delay>
}
 80002d0:	bf00      	nop
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010800 	.word	0x40010800

080002d8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80002e2:	bf00      	nop
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <SPI_TxByte+0x30>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	689b      	ldr	r3, [r3, #8]
 80002ea:	f003 0302 	and.w	r3, r3, #2
 80002ee:	2b02      	cmp	r3, #2
 80002f0:	d1f8      	bne.n	80002e4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80002f2:	1df9      	adds	r1, r7, #7
 80002f4:	2364      	movs	r3, #100	; 0x64
 80002f6:	2201      	movs	r2, #1
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <SPI_TxByte+0x30>)
 80002fa:	f004 f933 	bl	8004564 <HAL_SPI_Transmit>
}
 80002fe:	bf00      	nop
 8000300:	3708      	adds	r7, #8
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	2000015c 	.word	0x2000015c

0800030c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	460b      	mov	r3, r1
 8000316:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000318:	bf00      	nop
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <SPI_TxBuffer+0x30>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	f003 0302 	and.w	r3, r3, #2
 8000324:	2b02      	cmp	r3, #2
 8000326:	d1f8      	bne.n	800031a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000328:	887a      	ldrh	r2, [r7, #2]
 800032a:	2364      	movs	r3, #100	; 0x64
 800032c:	6879      	ldr	r1, [r7, #4]
 800032e:	4803      	ldr	r0, [pc, #12]	; (800033c <SPI_TxBuffer+0x30>)
 8000330:	f004 f918 	bl	8004564 <HAL_SPI_Transmit>
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	2000015c 	.word	0x2000015c

08000340 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000346:	23ff      	movs	r3, #255	; 0xff
 8000348:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800034a:	bf00      	nop
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <SPI_RxByte+0x34>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	f003 0302 	and.w	r3, r3, #2
 8000356:	2b02      	cmp	r3, #2
 8000358:	d1f8      	bne.n	800034c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800035a:	1dba      	adds	r2, r7, #6
 800035c:	1df9      	adds	r1, r7, #7
 800035e:	2364      	movs	r3, #100	; 0x64
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2301      	movs	r3, #1
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <SPI_RxByte+0x34>)
 8000366:	f004 fa39 	bl	80047dc <HAL_SPI_TransmitReceive>

	return data;
 800036a:	79bb      	ldrb	r3, [r7, #6]
}
 800036c:	4618      	mov	r0, r3
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	2000015c 	.word	0x2000015c

08000378 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000380:	f7ff ffde 	bl	8000340 <SPI_RxByte>
 8000384:	4603      	mov	r3, r0
 8000386:	461a      	mov	r2, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	701a      	strb	r2, [r3, #0]
}
 800038c:	bf00      	nop
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <SD_ReadyWait+0x30>)
 800039c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003a0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80003a2:	f7ff ffcd 	bl	8000340 <SPI_RxByte>
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2bff      	cmp	r3, #255	; 0xff
 80003ae:	d003      	beq.n	80003b8 <SD_ReadyWait+0x24>
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <SD_ReadyWait+0x30>)
 80003b2:	881b      	ldrh	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1f4      	bne.n	80003a2 <SD_ReadyWait+0xe>

	return res;
 80003b8:	79fb      	ldrb	r3, [r7, #7]
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	2000012e 	.word	0x2000012e

080003c8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80003ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80003d2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80003d4:	f7ff ff72 	bl	80002bc <DESELECT>
	for(int i = 0; i < 10; i++)
 80003d8:	2300      	movs	r3, #0
 80003da:	60bb      	str	r3, [r7, #8]
 80003dc:	e005      	b.n	80003ea <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80003de:	20ff      	movs	r0, #255	; 0xff
 80003e0:	f7ff ff7a 	bl	80002d8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2b09      	cmp	r3, #9
 80003ee:	ddf6      	ble.n	80003de <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 80003f0:	f7ff ff56 	bl	80002a0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 80003f4:	2340      	movs	r3, #64	; 0x40
 80003f6:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000404:	2300      	movs	r3, #0
 8000406:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000408:	2395      	movs	r3, #149	; 0x95
 800040a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 800040c:	463b      	mov	r3, r7
 800040e:	2106      	movs	r1, #6
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff7b 	bl	800030c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000416:	e002      	b.n	800041e <SD_PowerOn+0x56>
	{
		cnt--;
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	3b01      	subs	r3, #1
 800041c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800041e:	f7ff ff8f 	bl	8000340 <SPI_RxByte>
 8000422:	4603      	mov	r3, r0
 8000424:	2b01      	cmp	r3, #1
 8000426:	d002      	beq.n	800042e <SD_PowerOn+0x66>
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1f4      	bne.n	8000418 <SD_PowerOn+0x50>
	}

	DESELECT();
 800042e:	f7ff ff45 	bl	80002bc <DESELECT>
	SPI_TxByte(0XFF);
 8000432:	20ff      	movs	r0, #255	; 0xff
 8000434:	f7ff ff50 	bl	80002d8 <SPI_TxByte>

	PowerFlag = 1;
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <SD_PowerOn+0x80>)
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
}
 800043e:	bf00      	nop
 8000440:	3710      	adds	r7, #16
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	20000131 	.word	0x20000131

0800044c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000450:	4b03      	ldr	r3, [pc, #12]	; (8000460 <SD_PowerOff+0x14>)
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	20000131 	.word	0x20000131

08000464 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000468:	4b02      	ldr	r3, [pc, #8]	; (8000474 <SD_CheckPower+0x10>)
 800046a:	781b      	ldrb	r3, [r3, #0]
}
 800046c:	4618      	mov	r0, r3
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	20000131 	.word	0x20000131

08000478 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000482:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <SD_RxDataBlock+0x58>)
 8000484:	22c8      	movs	r2, #200	; 0xc8
 8000486:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000488:	f7ff ff5a 	bl	8000340 <SPI_RxByte>
 800048c:	4603      	mov	r3, r0
 800048e:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000490:	7bfb      	ldrb	r3, [r7, #15]
 8000492:	2bff      	cmp	r3, #255	; 0xff
 8000494:	d103      	bne.n	800049e <SD_RxDataBlock+0x26>
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <SD_RxDataBlock+0x58>)
 8000498:	881b      	ldrh	r3, [r3, #0]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d1f4      	bne.n	8000488 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800049e:	7bfb      	ldrb	r3, [r7, #15]
 80004a0:	2bfe      	cmp	r3, #254	; 0xfe
 80004a2:	d001      	beq.n	80004a8 <SD_RxDataBlock+0x30>
 80004a4:	2300      	movs	r3, #0
 80004a6:	e00f      	b.n	80004c8 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	607a      	str	r2, [r7, #4]
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff62 	bl	8000378 <SPI_RxBytePtr>
	} while(len--);
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	1e5a      	subs	r2, r3, #1
 80004b8:	603a      	str	r2, [r7, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d1f4      	bne.n	80004a8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80004be:	f7ff ff3f 	bl	8000340 <SPI_RxByte>
	SPI_RxByte();
 80004c2:	f7ff ff3d 	bl	8000340 <SPI_RxByte>

	return TRUE;
 80004c6:	2301      	movs	r3, #1
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000012c 	.word	0x2000012c

080004d4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 80004e0:	2300      	movs	r3, #0
 80004e2:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 80004e4:	f7ff ff56 	bl	8000394 <SD_ReadyWait>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2bff      	cmp	r3, #255	; 0xff
 80004ec:	d001      	beq.n	80004f2 <SD_TxDataBlock+0x1e>
 80004ee:	2300      	movs	r3, #0
 80004f0:	e02f      	b.n	8000552 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 80004f2:	78fb      	ldrb	r3, [r7, #3]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff feef 	bl	80002d8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 80004fa:	78fb      	ldrb	r3, [r7, #3]
 80004fc:	2bfd      	cmp	r3, #253	; 0xfd
 80004fe:	d020      	beq.n	8000542 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000504:	6878      	ldr	r0, [r7, #4]
 8000506:	f7ff ff01 	bl	800030c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800050a:	f7ff ff19 	bl	8000340 <SPI_RxByte>
		SPI_RxByte();
 800050e:	f7ff ff17 	bl	8000340 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000512:	e00b      	b.n	800052c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000514:	f7ff ff14 	bl	8000340 <SPI_RxByte>
 8000518:	4603      	mov	r3, r0
 800051a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	f003 031f 	and.w	r3, r3, #31
 8000522:	2b05      	cmp	r3, #5
 8000524:	d006      	beq.n	8000534 <SD_TxDataBlock+0x60>
			i++;
 8000526:	7bbb      	ldrb	r3, [r7, #14]
 8000528:	3301      	adds	r3, #1
 800052a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800052c:	7bbb      	ldrb	r3, [r7, #14]
 800052e:	2b40      	cmp	r3, #64	; 0x40
 8000530:	d9f0      	bls.n	8000514 <SD_TxDataBlock+0x40>
 8000532:	e000      	b.n	8000536 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000534:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000536:	bf00      	nop
 8000538:	f7ff ff02 	bl	8000340 <SPI_RxByte>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0fa      	beq.n	8000538 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000542:	7bfb      	ldrb	r3, [r7, #15]
 8000544:	f003 031f 	and.w	r3, r3, #31
 8000548:	2b05      	cmp	r3, #5
 800054a:	d101      	bne.n	8000550 <SD_TxDataBlock+0x7c>
 800054c:	2301      	movs	r3, #1
 800054e:	e000      	b.n	8000552 <SD_TxDataBlock+0x7e>

	return FALSE;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	4603      	mov	r3, r0
 8000562:	6039      	str	r1, [r7, #0]
 8000564:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000566:	f7ff ff15 	bl	8000394 <SD_ReadyWait>
 800056a:	4603      	mov	r3, r0
 800056c:	2bff      	cmp	r3, #255	; 0xff
 800056e:	d001      	beq.n	8000574 <SD_SendCmd+0x1a>
 8000570:	23ff      	movs	r3, #255	; 0xff
 8000572:	e042      	b.n	80005fa <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff feae 	bl	80002d8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	0e1b      	lsrs	r3, r3, #24
 8000580:	b2db      	uxtb	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fea8 	bl	80002d8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	0c1b      	lsrs	r3, r3, #16
 800058c:	b2db      	uxtb	r3, r3
 800058e:	4618      	mov	r0, r3
 8000590:	f7ff fea2 	bl	80002d8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	0a1b      	lsrs	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe9c 	bl	80002d8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe97 	bl	80002d8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2b40      	cmp	r3, #64	; 0x40
 80005ae:	d102      	bne.n	80005b6 <SD_SendCmd+0x5c>
 80005b0:	2395      	movs	r3, #149	; 0x95
 80005b2:	73fb      	strb	r3, [r7, #15]
 80005b4:	e007      	b.n	80005c6 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b48      	cmp	r3, #72	; 0x48
 80005ba:	d102      	bne.n	80005c2 <SD_SendCmd+0x68>
 80005bc:	2387      	movs	r3, #135	; 0x87
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e001      	b.n	80005c6 <SD_SendCmd+0x6c>
	else crc = 1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe85 	bl	80002d8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b4c      	cmp	r3, #76	; 0x4c
 80005d2:	d101      	bne.n	80005d8 <SD_SendCmd+0x7e>
 80005d4:	f7ff feb4 	bl	8000340 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 80005d8:	230a      	movs	r3, #10
 80005da:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 80005dc:	f7ff feb0 	bl	8000340 <SPI_RxByte>
 80005e0:	4603      	mov	r3, r0
 80005e2:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 80005e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da05      	bge.n	80005f8 <SD_SendCmd+0x9e>
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	3b01      	subs	r3, #1
 80005f0:	73bb      	strb	r3, [r7, #14]
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f1      	bne.n	80005dc <SD_SendCmd+0x82>

	return res;
 80005f8:	7b7b      	ldrb	r3, [r7, #13]
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SD_disk_initialize+0x14>
 8000614:	2301      	movs	r3, #1
 8000616:	e0d1      	b.n	80007bc <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000618:	4b6a      	ldr	r3, [pc, #424]	; (80007c4 <SD_disk_initialize+0x1c0>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	2b00      	cmp	r3, #0
 8000624:	d003      	beq.n	800062e <SD_disk_initialize+0x2a>
 8000626:	4b67      	ldr	r3, [pc, #412]	; (80007c4 <SD_disk_initialize+0x1c0>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	e0c6      	b.n	80007bc <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800062e:	f7ff fecb 	bl	80003c8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000632:	f7ff fe35 	bl	80002a0 <SELECT>

	/* check disk type */
	type = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800063a:	2100      	movs	r1, #0
 800063c:	2040      	movs	r0, #64	; 0x40
 800063e:	f7ff ff8c 	bl	800055a <SD_SendCmd>
 8000642:	4603      	mov	r3, r0
 8000644:	2b01      	cmp	r3, #1
 8000646:	f040 80a1 	bne.w	800078c <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800064a:	4b5f      	ldr	r3, [pc, #380]	; (80007c8 <SD_disk_initialize+0x1c4>)
 800064c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000650:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000652:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000656:	2048      	movs	r0, #72	; 0x48
 8000658:	f7ff ff7f 	bl	800055a <SD_SendCmd>
 800065c:	4603      	mov	r3, r0
 800065e:	2b01      	cmp	r3, #1
 8000660:	d155      	bne.n	800070e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e00c      	b.n	8000682 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000668:	7bfc      	ldrb	r4, [r7, #15]
 800066a:	f7ff fe69 	bl	8000340 <SPI_RxByte>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	f104 0310 	add.w	r3, r4, #16
 8000676:	443b      	add	r3, r7
 8000678:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3301      	adds	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	2b03      	cmp	r3, #3
 8000686:	d9ef      	bls.n	8000668 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000688:	7abb      	ldrb	r3, [r7, #10]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d17e      	bne.n	800078c <SD_disk_initialize+0x188>
 800068e:	7afb      	ldrb	r3, [r7, #11]
 8000690:	2baa      	cmp	r3, #170	; 0xaa
 8000692:	d17b      	bne.n	800078c <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000694:	2100      	movs	r1, #0
 8000696:	2077      	movs	r0, #119	; 0x77
 8000698:	f7ff ff5f 	bl	800055a <SD_SendCmd>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d807      	bhi.n	80006b2 <SD_disk_initialize+0xae>
 80006a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80006a6:	2069      	movs	r0, #105	; 0x69
 80006a8:	f7ff ff57 	bl	800055a <SD_SendCmd>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d004      	beq.n	80006bc <SD_disk_initialize+0xb8>
				} while (Timer1);
 80006b2:	4b45      	ldr	r3, [pc, #276]	; (80007c8 <SD_disk_initialize+0x1c4>)
 80006b4:	881b      	ldrh	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1ec      	bne.n	8000694 <SD_disk_initialize+0x90>
 80006ba:	e000      	b.n	80006be <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80006bc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80006be:	4b42      	ldr	r3, [pc, #264]	; (80007c8 <SD_disk_initialize+0x1c4>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d062      	beq.n	800078c <SD_disk_initialize+0x188>
 80006c6:	2100      	movs	r1, #0
 80006c8:	207a      	movs	r0, #122	; 0x7a
 80006ca:	f7ff ff46 	bl	800055a <SD_SendCmd>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d15b      	bne.n	800078c <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80006d4:	2300      	movs	r3, #0
 80006d6:	73fb      	strb	r3, [r7, #15]
 80006d8:	e00c      	b.n	80006f4 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 80006da:	7bfc      	ldrb	r4, [r7, #15]
 80006dc:	f7ff fe30 	bl	8000340 <SPI_RxByte>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	f104 0310 	add.w	r3, r4, #16
 80006e8:	443b      	add	r3, r7
 80006ea:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	3301      	adds	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d9ef      	bls.n	80006da <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80006fa:	7a3b      	ldrb	r3, [r7, #8]
 80006fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SD_disk_initialize+0x104>
 8000704:	230c      	movs	r3, #12
 8000706:	e000      	b.n	800070a <SD_disk_initialize+0x106>
 8000708:	2304      	movs	r3, #4
 800070a:	73bb      	strb	r3, [r7, #14]
 800070c:	e03e      	b.n	800078c <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800070e:	2100      	movs	r1, #0
 8000710:	2077      	movs	r0, #119	; 0x77
 8000712:	f7ff ff22 	bl	800055a <SD_SendCmd>
 8000716:	4603      	mov	r3, r0
 8000718:	2b01      	cmp	r3, #1
 800071a:	d808      	bhi.n	800072e <SD_disk_initialize+0x12a>
 800071c:	2100      	movs	r1, #0
 800071e:	2069      	movs	r0, #105	; 0x69
 8000720:	f7ff ff1b 	bl	800055a <SD_SendCmd>
 8000724:	4603      	mov	r3, r0
 8000726:	2b01      	cmp	r3, #1
 8000728:	d801      	bhi.n	800072e <SD_disk_initialize+0x12a>
 800072a:	2302      	movs	r3, #2
 800072c:	e000      	b.n	8000730 <SD_disk_initialize+0x12c>
 800072e:	2301      	movs	r3, #1
 8000730:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000732:	7bbb      	ldrb	r3, [r7, #14]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d10e      	bne.n	8000756 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000738:	2100      	movs	r1, #0
 800073a:	2077      	movs	r0, #119	; 0x77
 800073c:	f7ff ff0d 	bl	800055a <SD_SendCmd>
 8000740:	4603      	mov	r3, r0
 8000742:	2b01      	cmp	r3, #1
 8000744:	d80e      	bhi.n	8000764 <SD_disk_initialize+0x160>
 8000746:	2100      	movs	r1, #0
 8000748:	2069      	movs	r0, #105	; 0x69
 800074a:	f7ff ff06 	bl	800055a <SD_SendCmd>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d107      	bne.n	8000764 <SD_disk_initialize+0x160>
 8000754:	e00c      	b.n	8000770 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000756:	2100      	movs	r1, #0
 8000758:	2041      	movs	r0, #65	; 0x41
 800075a:	f7ff fefe 	bl	800055a <SD_SendCmd>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <SD_disk_initialize+0x1c4>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1e2      	bne.n	8000732 <SD_disk_initialize+0x12e>
 800076c:	e000      	b.n	8000770 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800076e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <SD_disk_initialize+0x1c4>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d007      	beq.n	8000788 <SD_disk_initialize+0x184>
 8000778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077c:	2050      	movs	r0, #80	; 0x50
 800077e:	f7ff feec 	bl	800055a <SD_SendCmd>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SD_disk_initialize+0x188>
 8000788:	2300      	movs	r3, #0
 800078a:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 800078c:	4a0f      	ldr	r2, [pc, #60]	; (80007cc <SD_disk_initialize+0x1c8>)
 800078e:	7bbb      	ldrb	r3, [r7, #14]
 8000790:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000792:	f7ff fd93 	bl	80002bc <DESELECT>
	SPI_RxByte();
 8000796:	f7ff fdd3 	bl	8000340 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d008      	beq.n	80007b2 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <SD_disk_initialize+0x1c0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f023 0301 	bic.w	r3, r3, #1
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <SD_disk_initialize+0x1c0>)
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e001      	b.n	80007b6 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80007b2:	f7ff fe4b 	bl	800044c <SD_PowerOff>
	}

	return Stat;
 80007b6:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <SD_disk_initialize+0x1c0>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	b2db      	uxtb	r3, r3
}
 80007bc:	4618      	mov	r0, r3
 80007be:	3714      	adds	r7, #20
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	2000012c 	.word	0x2000012c
 80007cc:	20000130 	.word	0x20000130

080007d0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SD_disk_status+0x14>
 80007e0:	2301      	movs	r3, #1
 80007e2:	e002      	b.n	80007ea <SD_disk_status+0x1a>
	return Stat;
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <SD_disk_status+0x24>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr
 80007f4:	20000000 	.word	0x20000000

080007f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60b9      	str	r1, [r7, #8]
 8000800:	607a      	str	r2, [r7, #4]
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	4603      	mov	r3, r0
 8000806:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d102      	bne.n	8000814 <SD_disk_read+0x1c>
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d101      	bne.n	8000818 <SD_disk_read+0x20>
 8000814:	2304      	movs	r3, #4
 8000816:	e051      	b.n	80008bc <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000818:	4b2a      	ldr	r3, [pc, #168]	; (80008c4 <SD_disk_read+0xcc>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	b2db      	uxtb	r3, r3
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SD_disk_read+0x32>
 8000826:	2303      	movs	r3, #3
 8000828:	e048      	b.n	80008bc <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800082a:	4b27      	ldr	r3, [pc, #156]	; (80008c8 <SD_disk_read+0xd0>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	2b00      	cmp	r3, #0
 8000834:	d102      	bne.n	800083c <SD_disk_read+0x44>
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	025b      	lsls	r3, r3, #9
 800083a:	607b      	str	r3, [r7, #4]

	SELECT();
 800083c:	f7ff fd30 	bl	80002a0 <SELECT>

	if (count == 1)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d111      	bne.n	800086a <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	2051      	movs	r0, #81	; 0x51
 800084a:	f7ff fe86 	bl	800055a <SD_SendCmd>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d129      	bne.n	80008a8 <SD_disk_read+0xb0>
 8000854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000858:	68b8      	ldr	r0, [r7, #8]
 800085a:	f7ff fe0d 	bl	8000478 <SD_RxDataBlock>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d021      	beq.n	80008a8 <SD_disk_read+0xb0>
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	e01e      	b.n	80008a8 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 800086a:	6879      	ldr	r1, [r7, #4]
 800086c:	2052      	movs	r0, #82	; 0x52
 800086e:	f7ff fe74 	bl	800055a <SD_SendCmd>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d117      	bne.n	80008a8 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800087c:	68b8      	ldr	r0, [r7, #8]
 800087e:	f7ff fdfb 	bl	8000478 <SD_RxDataBlock>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00a      	beq.n	800089e <SD_disk_read+0xa6>
				buff += 512;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800088e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	3b01      	subs	r3, #1
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1ed      	bne.n	8000878 <SD_disk_read+0x80>
 800089c:	e000      	b.n	80008a0 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 800089e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	204c      	movs	r0, #76	; 0x4c
 80008a4:	f7ff fe59 	bl	800055a <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80008a8:	f7ff fd08 	bl	80002bc <DESELECT>
	SPI_RxByte();
 80008ac:	f7ff fd48 	bl	8000340 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	bf14      	ite	ne
 80008b6:	2301      	movne	r3, #1
 80008b8:	2300      	moveq	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000130 	.word	0x20000130

080008cc <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	4603      	mov	r3, r0
 80008da:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <SD_disk_write+0x1c>
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d101      	bne.n	80008ec <SD_disk_write+0x20>
 80008e8:	2304      	movs	r3, #4
 80008ea:	e06b      	b.n	80009c4 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80008ec:	4b37      	ldr	r3, [pc, #220]	; (80009cc <SD_disk_write+0x100>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <SD_disk_write+0x32>
 80008fa:	2303      	movs	r3, #3
 80008fc:	e062      	b.n	80009c4 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80008fe:	4b33      	ldr	r3, [pc, #204]	; (80009cc <SD_disk_write+0x100>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 0304 	and.w	r3, r3, #4
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SD_disk_write+0x44>
 800090c:	2302      	movs	r3, #2
 800090e:	e059      	b.n	80009c4 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000910:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <SD_disk_write+0x104>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	f003 0304 	and.w	r3, r3, #4
 8000918:	2b00      	cmp	r3, #0
 800091a:	d102      	bne.n	8000922 <SD_disk_write+0x56>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	025b      	lsls	r3, r3, #9
 8000920:	607b      	str	r3, [r7, #4]

	SELECT();
 8000922:	f7ff fcbd 	bl	80002a0 <SELECT>

	if (count == 1)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d110      	bne.n	800094e <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	2058      	movs	r0, #88	; 0x58
 8000930:	f7ff fe13 	bl	800055a <SD_SendCmd>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d13a      	bne.n	80009b0 <SD_disk_write+0xe4>
 800093a:	21fe      	movs	r1, #254	; 0xfe
 800093c:	68b8      	ldr	r0, [r7, #8]
 800093e:	f7ff fdc9 	bl	80004d4 <SD_TxDataBlock>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d033      	beq.n	80009b0 <SD_disk_write+0xe4>
			count = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	e030      	b.n	80009b0 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800094e:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <SD_disk_write+0x104>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d007      	beq.n	800096a <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 800095a:	2100      	movs	r1, #0
 800095c:	2077      	movs	r0, #119	; 0x77
 800095e:	f7ff fdfc 	bl	800055a <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000962:	6839      	ldr	r1, [r7, #0]
 8000964:	2057      	movs	r0, #87	; 0x57
 8000966:	f7ff fdf8 	bl	800055a <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	2059      	movs	r0, #89	; 0x59
 800096e:	f7ff fdf4 	bl	800055a <SD_SendCmd>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d11b      	bne.n	80009b0 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000978:	21fc      	movs	r1, #252	; 0xfc
 800097a:	68b8      	ldr	r0, [r7, #8]
 800097c:	f7ff fdaa 	bl	80004d4 <SD_TxDataBlock>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d00a      	beq.n	800099c <SD_disk_write+0xd0>
				buff += 512;
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800098c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	3b01      	subs	r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d1ee      	bne.n	8000978 <SD_disk_write+0xac>
 800099a:	e000      	b.n	800099e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 800099c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800099e:	21fd      	movs	r1, #253	; 0xfd
 80009a0:	2000      	movs	r0, #0
 80009a2:	f7ff fd97 	bl	80004d4 <SD_TxDataBlock>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d101      	bne.n	80009b0 <SD_disk_write+0xe4>
			{
				count = 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80009b0:	f7ff fc84 	bl	80002bc <DESELECT>
	SPI_RxByte();
 80009b4:	f7ff fcc4 	bl	8000340 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf14      	ite	ne
 80009be:	2301      	movne	r3, #1
 80009c0:	2300      	moveq	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20000000 	.word	0x20000000
 80009d0:	20000130 	.word	0x20000130

080009d4 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80009d4:	b590      	push	{r4, r7, lr}
 80009d6:	b08b      	sub	sp, #44	; 0x2c
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	603a      	str	r2, [r7, #0]
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	460b      	mov	r3, r1
 80009e2:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SD_disk_ioctl+0x1e>
 80009ee:	2304      	movs	r3, #4
 80009f0:	e115      	b.n	8000c1e <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b05      	cmp	r3, #5
 80009fc:	d124      	bne.n	8000a48 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 80009fe:	6a3b      	ldr	r3, [r7, #32]
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d012      	beq.n	8000a2c <SD_disk_ioctl+0x58>
 8000a06:	2b02      	cmp	r3, #2
 8000a08:	dc1a      	bgt.n	8000a40 <SD_disk_ioctl+0x6c>
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <SD_disk_ioctl+0x40>
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d006      	beq.n	8000a20 <SD_disk_ioctl+0x4c>
 8000a12:	e015      	b.n	8000a40 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000a14:	f7ff fd1a 	bl	800044c <SD_PowerOff>
			res = RES_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a1e:	e0fc      	b.n	8000c1a <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8000a20:	f7ff fcd2 	bl	80003c8 <SD_PowerOn>
			res = RES_OK;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a2a:	e0f6      	b.n	8000c1a <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	1c5c      	adds	r4, r3, #1
 8000a30:	f7ff fd18 	bl	8000464 <SD_CheckPower>
 8000a34:	4603      	mov	r3, r0
 8000a36:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000a3e:	e0ec      	b.n	8000c1a <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8000a40:	2304      	movs	r3, #4
 8000a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a46:	e0e8      	b.n	8000c1a <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a48:	4b77      	ldr	r3, [pc, #476]	; (8000c28 <SD_disk_ioctl+0x254>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SD_disk_ioctl+0x86>
 8000a56:	2303      	movs	r3, #3
 8000a58:	e0e1      	b.n	8000c1e <SD_disk_ioctl+0x24a>

		SELECT();
 8000a5a:	f7ff fc21 	bl	80002a0 <SELECT>

		switch (ctrl)
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	2b0d      	cmp	r3, #13
 8000a62:	f200 80cb 	bhi.w	8000bfc <SD_disk_ioctl+0x228>
 8000a66:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <SD_disk_ioctl+0x98>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000b67 	.word	0x08000b67
 8000a70:	08000aa5 	.word	0x08000aa5
 8000a74:	08000b57 	.word	0x08000b57
 8000a78:	08000bfd 	.word	0x08000bfd
 8000a7c:	08000bfd 	.word	0x08000bfd
 8000a80:	08000bfd 	.word	0x08000bfd
 8000a84:	08000bfd 	.word	0x08000bfd
 8000a88:	08000bfd 	.word	0x08000bfd
 8000a8c:	08000bfd 	.word	0x08000bfd
 8000a90:	08000bfd 	.word	0x08000bfd
 8000a94:	08000bfd 	.word	0x08000bfd
 8000a98:	08000b79 	.word	0x08000b79
 8000a9c:	08000b9d 	.word	0x08000b9d
 8000aa0:	08000bc1 	.word	0x08000bc1
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	2049      	movs	r0, #73	; 0x49
 8000aa8:	f7ff fd57 	bl	800055a <SD_SendCmd>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f040 80a8 	bne.w	8000c04 <SD_disk_ioctl+0x230>
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2110      	movs	r1, #16
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fcdc 	bl	8000478 <SD_RxDataBlock>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 809e 	beq.w	8000c04 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8000ac8:	7b3b      	ldrb	r3, [r7, #12]
 8000aca:	099b      	lsrs	r3, r3, #6
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d10e      	bne.n	8000af0 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000ad2:	7d7b      	ldrb	r3, [r7, #21]
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	7d3b      	ldrb	r3, [r7, #20]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4413      	add	r3, r2
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000ae6:	8bfb      	ldrh	r3, [r7, #30]
 8000ae8:	029a      	lsls	r2, r3, #10
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e02e      	b.n	8000b4e <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000af0:	7c7b      	ldrb	r3, [r7, #17]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	7dbb      	ldrb	r3, [r7, #22]
 8000afa:	09db      	lsrs	r3, r3, #7
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	4413      	add	r3, r2
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	7d7b      	ldrb	r3, [r7, #21]
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	f003 0306 	and.w	r3, r3, #6
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	4413      	add	r3, r2
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	3302      	adds	r3, #2
 8000b14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000b18:	7d3b      	ldrb	r3, [r7, #20]
 8000b1a:	099b      	lsrs	r3, r3, #6
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	b29a      	uxth	r2, r3
 8000b20:	7cfb      	ldrb	r3, [r7, #19]
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	4413      	add	r3, r2
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	7cbb      	ldrb	r3, [r7, #18]
 8000b2e:	029b      	lsls	r3, r3, #10
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	4413      	add	r3, r2
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000b40:	8bfa      	ldrh	r2, [r7, #30]
 8000b42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b46:	3b09      	subs	r3, #9
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8000b54:	e056      	b.n	8000c04 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5c:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b64:	e055      	b.n	8000c12 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000b66:	f7ff fc15 	bl	8000394 <SD_ReadyWait>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2bff      	cmp	r3, #255	; 0xff
 8000b6e:	d14b      	bne.n	8000c08 <SD_disk_ioctl+0x234>
 8000b70:	2300      	movs	r3, #0
 8000b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b76:	e047      	b.n	8000c08 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b78:	2100      	movs	r1, #0
 8000b7a:	2049      	movs	r0, #73	; 0x49
 8000b7c:	f7ff fced 	bl	800055a <SD_SendCmd>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d142      	bne.n	8000c0c <SD_disk_ioctl+0x238>
 8000b86:	2110      	movs	r1, #16
 8000b88:	6a38      	ldr	r0, [r7, #32]
 8000b8a:	f7ff fc75 	bl	8000478 <SD_RxDataBlock>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d03b      	beq.n	8000c0c <SD_disk_ioctl+0x238>
 8000b94:	2300      	movs	r3, #0
 8000b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000b9a:	e037      	b.n	8000c0c <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	204a      	movs	r0, #74	; 0x4a
 8000ba0:	f7ff fcdb 	bl	800055a <SD_SendCmd>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d132      	bne.n	8000c10 <SD_disk_ioctl+0x23c>
 8000baa:	2110      	movs	r1, #16
 8000bac:	6a38      	ldr	r0, [r7, #32]
 8000bae:	f7ff fc63 	bl	8000478 <SD_RxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d02b      	beq.n	8000c10 <SD_disk_ioctl+0x23c>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000bbe:	e027      	b.n	8000c10 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	207a      	movs	r0, #122	; 0x7a
 8000bc4:	f7ff fcc9 	bl	800055a <SD_SendCmd>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d116      	bne.n	8000bfc <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bd4:	e00b      	b.n	8000bee <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8000bd6:	6a3c      	ldr	r4, [r7, #32]
 8000bd8:	1c63      	adds	r3, r4, #1
 8000bda:	623b      	str	r3, [r7, #32]
 8000bdc:	f7ff fbb0 	bl	8000340 <SPI_RxByte>
 8000be0:	4603      	mov	r3, r0
 8000be2:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000be8:	3301      	adds	r3, #1
 8000bea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000bee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	d9ef      	bls.n	8000bd6 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000c02:	e006      	b.n	8000c12 <SD_disk_ioctl+0x23e>
			break;
 8000c04:	bf00      	nop
 8000c06:	e004      	b.n	8000c12 <SD_disk_ioctl+0x23e>
			break;
 8000c08:	bf00      	nop
 8000c0a:	e002      	b.n	8000c12 <SD_disk_ioctl+0x23e>
			break;
 8000c0c:	bf00      	nop
 8000c0e:	e000      	b.n	8000c12 <SD_disk_ioctl+0x23e>
			break;
 8000c10:	bf00      	nop
		}

		DESELECT();
 8000c12:	f7ff fb53 	bl	80002bc <DESELECT>
		SPI_RxByte();
 8000c16:	f7ff fb93 	bl	8000340 <SPI_RxByte>
	}

	return res;
 8000c1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	372c      	adds	r7, #44	; 0x2c
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd90      	pop	{r4, r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000000 	.word	0x20000000

08000c2c <clear_buffer>:
static void MX_SPI1_Init(void);
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
void clear_buffer (void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 8000c32:	2300      	movs	r3, #0
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	e007      	b.n	8000c48 <clear_buffer+0x1c>
 8000c38:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <clear_buffer+0x30>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3301      	adds	r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2b1d      	cmp	r3, #29
 8000c4c:	ddf4      	ble.n	8000c38 <clear_buffer+0xc>
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000234c 	.word	0x2000234c

08000c60 <HAL_UART_RxCpltCallback>:
 * ***************************************************************
 * *****************	UART VE CANBUS KESMELERİ	**************
 *****************************************************************
 * */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]


	HAL_UART_Receive_IT(&huart1, CanRX, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4904      	ldr	r1, [pc, #16]	; (8000c7c <HAL_UART_RxCpltCallback+0x1c>)
 8000c6c:	4804      	ldr	r0, [pc, #16]	; (8000c80 <HAL_UART_RxCpltCallback+0x20>)
 8000c6e:	f004 fcd6 	bl	800561e <HAL_UART_Receive_IT>

}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200023ec 	.word	0x200023ec
 8000c80:	20000244 	.word	0x20000244

08000c84 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b087      	sub	sp, #28
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	6078      	str	r0, [r7, #4]

	/******************************SD KART DEGISKENLERI****************************/
	if (htim->Instance == TIM2) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c94:	d101      	bne.n	8000c9a <HAL_TIM_PeriodElapsedCallback+0x16>
  		LORA_Send_Together_DATAS();
 8000c96:	f001 fc17 	bl	80024c8 <LORA_Send_Together_DATAS>
	}
	if (htim->Instance == TIM3) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a32      	ldr	r2, [pc, #200]	; (8000d68 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d15c      	bne.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0xda>
		sd_card[0] = sd_card[0] + 100;
 8000ca4:	4b31      	ldr	r3, [pc, #196]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	3364      	adds	r3, #100	; 0x64
 8000caa:	4a30      	ldr	r2, [pc, #192]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000cac:	6013      	str	r3, [r2, #0]

		fresult = f_mount(&fs, "", 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	492f      	ldr	r1, [pc, #188]	; (8000d70 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000cb4:	f007 fde2 	bl	800887c <f_mount>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000cbe:	701a      	strb	r2, [r3, #0]

		if (fresult == FR_OK) {
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <HAL_TIM_PeriodElapsedCallback+0xda>

			sprintf(buffer_file, "File%lu.txt" "", SD_count);
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	492c      	ldr	r1, [pc, #176]	; (8000d80 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000cd0:	482c      	ldr	r0, [pc, #176]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cd2:	f009 f8c3 	bl	8009e5c <siprintf>
			fresult = f_open(&fil, buffer_file, FA_WRITE);
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	492a      	ldr	r1, [pc, #168]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cda:	482b      	ldr	r0, [pc, #172]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000cdc:	f007 fe18 	bl	8008910 <f_open>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b24      	ldr	r3, [pc, #144]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000ce6:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK) {
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00e      	beq.n	8000d0e <HAL_TIM_PeriodElapsedCallback+0x8a>
				f_open(&fil, buffer_file, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8000cf0:	2213      	movs	r2, #19
 8000cf2:	4924      	ldr	r1, [pc, #144]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000cf4:	4824      	ldr	r0, [pc, #144]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000cf6:	f007 fe0b 	bl	8008910 <f_open>
				sprintf(buffer, "*****TURKMEKATRONIK 2023**** ");
 8000cfa:	4924      	ldr	r1, [pc, #144]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000cfc:	4824      	ldr	r0, [pc, #144]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000cfe:	f009 f8ad 	bl	8009e5c <siprintf>
				f_puts(buffer, &fil);
 8000d02:	4921      	ldr	r1, [pc, #132]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d04:	4822      	ldr	r0, [pc, #136]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d06:	f008 ff7b 	bl	8009c00 <f_puts>
				clear_buffer();
 8000d0a:	f7ff ff8f 	bl	8000c2c <clear_buffer>
			}

			f_lseek(&fil, fil.fsize);
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	4619      	mov	r1, r3
 8000d18:	481b      	ldr	r0, [pc, #108]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d1a:	f008 fc43 	bl	80095a4 <f_lseek>
			sprintf(buffer, "\n%lu;%lu;%lu;%lu;%lu", sd_card[0], sd_card[1],
 8000d1e:	4b13      	ldr	r3, [pc, #76]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d20:	6818      	ldr	r0, [r3, #0]
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d24:	685c      	ldr	r4, [r3, #4]
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d2c:	68d2      	ldr	r2, [r2, #12]
 8000d2e:	490f      	ldr	r1, [pc, #60]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000d30:	6909      	ldr	r1, [r1, #16]
 8000d32:	9102      	str	r1, [sp, #8]
 8000d34:	9201      	str	r2, [sp, #4]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	4623      	mov	r3, r4
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	4915      	ldr	r1, [pc, #84]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000d3e:	4814      	ldr	r0, [pc, #80]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d40:	f009 f88c 	bl	8009e5c <siprintf>
					sd_card[2], sd_card[3], sd_card[4]);
			/*ZAMAN, HIZ,BATARYA SICAKLI�?I, GERİLİMİ, KALAN ENERJİ*/
			f_puts(buffer, &fil);
 8000d44:	4910      	ldr	r1, [pc, #64]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d46:	4812      	ldr	r0, [pc, #72]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d48:	f008 ff5a 	bl	8009c00 <f_puts>
			clear_buffer();
 8000d4c:	f7ff ff6e 	bl	8000c2c <clear_buffer>
			fresult = f_close(&fil);
 8000d50:	480d      	ldr	r0, [pc, #52]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000d52:	f008 fbfc 	bl	800954e <f_close>
 8000d56:	4603      	mov	r3, r0
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d5c:	701a      	strb	r2, [r3, #0]
	}
	}
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd90      	pop	{r4, r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40000400 	.word	0x40000400
 8000d6c:	20002370 	.word	0x20002370
 8000d70:	0800a768 	.word	0x0800a768
 8000d74:	200002cc 	.word	0x200002cc
 8000d78:	20002328 	.word	0x20002328
 8000d7c:	2000236c 	.word	0x2000236c
 8000d80:	0800a76c 	.word	0x0800a76c
 8000d84:	2000232c 	.word	0x2000232c
 8000d88:	200012fc 	.word	0x200012fc
 8000d8c:	0800a778 	.word	0x0800a778
 8000d90:	2000234c 	.word	0x2000234c
 8000d94:	0800a798 	.word	0x0800a798

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9c:	f001 fbde 	bl	800255c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da0:	f000 f846 	bl	8000e30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da4:	f000 f9e6 	bl	8001174 <MX_GPIO_Init>
  MX_CAN_Init();
 8000da8:	f000 f888 	bl	8000ebc <MX_CAN_Init>
  MX_USART2_UART_Init();
 8000dac:	f000 f9b8 	bl	8001120 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000db0:	f000 f98c 	bl	80010cc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000db4:	f005 f88c 	bl	8005ed0 <MX_FATFS_Init>
  MX_SPI1_Init();
 8000db8:	f000 f8b6 	bl	8000f28 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000dbc:	f000 f8ea 	bl	8000f94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dc0:	f000 f936 	bl	8001030 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
#if defined(CANBUS)
	CANBUS_Init();
 8000dc4:	f000 fd5c 	bl	8001880 <CANBUS_Init>
#endif
	HAL_TIM_Base_Start_IT(&htim2);
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <main+0x7c>)
 8000dca:	f003 ff9f 	bl	8004d0c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000dce:	4812      	ldr	r0, [pc, #72]	; (8000e18 <main+0x80>)
 8000dd0:	f003 ff9c 	bl	8004d0c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1, CanRX, 1);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4911      	ldr	r1, [pc, #68]	; (8000e1c <main+0x84>)
 8000dd8:	4811      	ldr	r0, [pc, #68]	; (8000e20 <main+0x88>)
 8000dda:	f004 fc20 	bl	800561e <HAL_UART_Receive_IT>
	HAL_Delay(50);
 8000dde:	2032      	movs	r0, #50	; 0x32
 8000de0:	f001 fc1e 	bl	8002620 <HAL_Delay>
	Flash_Read_Data(0x0801fc00U, &SD_count, 2);
 8000de4:	2202      	movs	r2, #2
 8000de6:	490f      	ldr	r1, [pc, #60]	; (8000e24 <main+0x8c>)
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <main+0x90>)
 8000dea:	f7ff fa3b 	bl	8000264 <Flash_Read_Data>
	SD_count++;
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <main+0x8c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <main+0x8c>)
 8000df6:	6013      	str	r3, [r2, #0]
	Flash_Write_Data(0x0801fc00U, &SD_count, 2);
 8000df8:	2202      	movs	r2, #2
 8000dfa:	490a      	ldr	r1, [pc, #40]	; (8000e24 <main+0x8c>)
 8000dfc:	480a      	ldr	r0, [pc, #40]	; (8000e28 <main+0x90>)
 8000dfe:	f7ff f9d5 	bl	80001ac <Flash_Write_Data>
	sd_card[0]=0;
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <main+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
		HAL_Delay(1000);
 8000e08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0c:	f001 fc08 	bl	8002620 <HAL_Delay>
 8000e10:	e7fa      	b.n	8000e08 <main+0x70>
 8000e12:	bf00      	nop
 8000e14:	200001b4 	.word	0x200001b4
 8000e18:	200001fc 	.word	0x200001fc
 8000e1c:	200023ec 	.word	0x200023ec
 8000e20:	20000244 	.word	0x20000244
 8000e24:	2000236c 	.word	0x2000236c
 8000e28:	0801fc00 	.word	0x0801fc00
 8000e2c:	20002370 	.word	0x20002370

08000e30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b090      	sub	sp, #64	; 0x40
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2228      	movs	r2, #40	; 0x28
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f009 f804 	bl	8009e4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	1d3b      	adds	r3, r7, #4
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e6e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e72:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fed5 	bl	8003c28 <HAL_RCC_OscConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e84:	f000 fa06 	bl	8001294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e88:	230f      	movs	r3, #15
 8000e8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 f942 	bl	800412c <HAL_RCC_ClockConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000eae:	f000 f9f1 	bl	8001294 <Error_Handler>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3740      	adds	r7, #64	; 0x40
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <MX_CAN_Init+0x64>)
 8000ec2:	4a18      	ldr	r2, [pc, #96]	; (8000f24 <MX_CAN_Init+0x68>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_CAN_Init+0x64>)
 8000ec8:	2212      	movs	r2, #18
 8000eca:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <MX_CAN_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <MX_CAN_Init+0x64>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_CAN_Init+0x64>)
 8000eda:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ede:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_CAN_Init+0x64>)
 8000ee2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ee6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <MX_CAN_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_CAN_Init+0x64>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MX_CAN_Init+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_CAN_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <MX_CAN_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_CAN_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_CAN_Init+0x64>)
 8000f0e:	f001 fbab 	bl	8002668 <HAL_CAN_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000f18:	f000 f9bc 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000134 	.word	0x20000134
 8000f24:	40006400 	.word	0x40006400

08000f28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <MX_SPI1_Init+0x68>)
 8000f30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f5c:	2220      	movs	r2, #32
 8000f5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f74:	220a      	movs	r2, #10
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f78:	4804      	ldr	r0, [pc, #16]	; (8000f8c <MX_SPI1_Init+0x64>)
 8000f7a:	f003 fa6f 	bl	800445c <HAL_SPI_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f84:	f000 f986 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000015c 	.word	0x2000015c
 8000f90:	40013000 	.word	0x40013000

08000f94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_TIM2_Init+0x98>)
 8000fb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_TIM2_Init+0x98>)
 8000fba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000fbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_TIM2_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 63999;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_TIM2_Init+0x98>)
 8000fc8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000fcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_TIM2_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_TIM2_Init+0x98>)
 8000fd6:	2280      	movs	r2, #128	; 0x80
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <MX_TIM2_Init+0x98>)
 8000fdc:	f003 fe46 	bl	8004c6c <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fe6:	f000 f955 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_TIM2_Init+0x98>)
 8000ff8:	f003 ffe2 	bl	8004fc0 <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001002:	f000 f947 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <MX_TIM2_Init+0x98>)
 8001014:	f004 f9b4 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800101e:	f000 f939 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	200001b4 	.word	0x200001b4

08001030 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001036:	f107 0308 	add.w	r3, r7, #8
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_TIM3_Init+0x94>)
 800104e:	4a1e      	ldr	r2, [pc, #120]	; (80010c8 <MX_TIM3_Init+0x98>)
 8001050:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001054:	2277      	movs	r2, #119	; 0x77
 8001056:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_TIM3_Init+0x94>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800105e:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001060:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001064:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_TIM3_Init+0x94>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001074:	f003 fdfa 	bl	8004c6c <HAL_TIM_Base_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 f909 	bl	8001294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001082:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001088:	f107 0308 	add.w	r3, r7, #8
 800108c:	4619      	mov	r1, r3
 800108e:	480d      	ldr	r0, [pc, #52]	; (80010c4 <MX_TIM3_Init+0x94>)
 8001090:	f003 ff96 	bl	8004fc0 <HAL_TIM_ConfigClockSource>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800109a:	f000 f8fb 	bl	8001294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_TIM3_Init+0x94>)
 80010ac:	f004 f968 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80010b6:	f000 f8ed 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3718      	adds	r7, #24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001fc 	.word	0x200001fc
 80010c8:	40000400 	.word	0x40000400

080010cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <MX_USART1_UART_Init+0x50>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_USART1_UART_Init+0x4c>)
 8001104:	f004 f9ac 	bl	8005460 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800110e:	f000 f8c1 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000244 	.word	0x20000244
 800111c:	40013800 	.word	0x40013800

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_USART2_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800112c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001158:	f004 f982 	bl	8005460 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f000 f897 	bl	8001294 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000288 	.word	0x20000288
 8001170:	40004400 	.word	0x40004400

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	4b3e      	ldr	r3, [pc, #248]	; (8001284 <MX_GPIO_Init+0x110>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a3d      	ldr	r2, [pc, #244]	; (8001284 <MX_GPIO_Init+0x110>)
 800118e:	f043 0310 	orr.w	r3, r3, #16
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b3b      	ldr	r3, [pc, #236]	; (8001284 <MX_GPIO_Init+0x110>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a0:	4b38      	ldr	r3, [pc, #224]	; (8001284 <MX_GPIO_Init+0x110>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a37      	ldr	r2, [pc, #220]	; (8001284 <MX_GPIO_Init+0x110>)
 80011a6:	f043 0320 	orr.w	r3, r3, #32
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b35      	ldr	r3, [pc, #212]	; (8001284 <MX_GPIO_Init+0x110>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0320 	and.w	r3, r3, #32
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b32      	ldr	r3, [pc, #200]	; (8001284 <MX_GPIO_Init+0x110>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a31      	ldr	r2, [pc, #196]	; (8001284 <MX_GPIO_Init+0x110>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <MX_GPIO_Init+0x110>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d0:	4b2c      	ldr	r3, [pc, #176]	; (8001284 <MX_GPIO_Init+0x110>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a2b      	ldr	r2, [pc, #172]	; (8001284 <MX_GPIO_Init+0x110>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b29      	ldr	r3, [pc, #164]	; (8001284 <MX_GPIO_Init+0x110>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011ee:	4826      	ldr	r0, [pc, #152]	; (8001288 <MX_GPIO_Init+0x114>)
 80011f0:	f002 fce8 	bl	8003bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2110      	movs	r1, #16
 80011f8:	4824      	ldr	r0, [pc, #144]	; (800128c <MX_GPIO_Init+0x118>)
 80011fa:	f002 fce3 	bl	8003bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2302      	movs	r3, #2
 800120e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <MX_GPIO_Init+0x114>)
 8001218:	f002 fb50 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800121c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4619      	mov	r1, r3
 800122c:	4816      	ldr	r0, [pc, #88]	; (8001288 <MX_GPIO_Init+0x114>)
 800122e:	f002 fb45 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_15;
 8001232:	f248 1303 	movw	r3, #33027	; 0x8103
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001238:	2303      	movs	r3, #3
 800123a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 0310 	add.w	r3, r7, #16
 8001240:	4619      	mov	r1, r3
 8001242:	4812      	ldr	r0, [pc, #72]	; (800128c <MX_GPIO_Init+0x118>)
 8001244:	f002 fb3a 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001248:	2310      	movs	r3, #16
 800124a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124c:	2301      	movs	r3, #1
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2302      	movs	r3, #2
 8001256:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	4619      	mov	r1, r3
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <MX_GPIO_Init+0x118>)
 8001260:	f002 fb2c 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001268:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	4619      	mov	r1, r3
 8001274:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_GPIO_Init+0x11c>)
 8001276:	f002 fb21 	bl	80038bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	40011000 	.word	0x40011000
 800128c:	40010800 	.word	0x40010800
 8001290:	40010c00 	.word	0x40010c00

08001294 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001298:	b672      	cpsid	i
}
 800129a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800129c:	e7fe      	b.n	800129c <Error_Handler+0x8>
	...

080012a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_MspInit+0x5c>)
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <HAL_MspInit+0x5c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	6193      	str	r3, [r2, #24]
 80012b2:	4b12      	ldr	r3, [pc, #72]	; (80012fc <HAL_MspInit+0x5c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_MspInit+0x5c>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_MspInit+0x5c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_MspInit+0x5c>)
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_MspInit+0x60>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	4a04      	ldr	r2, [pc, #16]	; (8001300 <HAL_MspInit+0x60>)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000
 8001300:	40010000 	.word	0x40010000

08001304 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0310 	add.w	r3, r7, #16
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a20      	ldr	r2, [pc, #128]	; (80013a0 <HAL_CAN_MspInit+0x9c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d139      	bne.n	8001398 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001324:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HAL_CAN_MspInit+0xa0>)
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <HAL_CAN_MspInit+0xa0>)
 800132a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800132e:	61d3      	str	r3, [r2, #28]
 8001330:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_CAN_MspInit+0xa0>)
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HAL_CAN_MspInit+0xa0>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <HAL_CAN_MspInit+0xa0>)
 8001342:	f043 0304 	orr.w	r3, r3, #4
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_CAN_MspInit+0xa0>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001354:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001358:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	480f      	ldr	r0, [pc, #60]	; (80013a8 <HAL_CAN_MspInit+0xa4>)
 800136a:	f002 faa7 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800136e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001372:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137c:	f107 0310 	add.w	r3, r7, #16
 8001380:	4619      	mov	r1, r3
 8001382:	4809      	ldr	r0, [pc, #36]	; (80013a8 <HAL_CAN_MspInit+0xa4>)
 8001384:	f002 fa9a 	bl	80038bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2014      	movs	r0, #20
 800138e:	f001 ffa4 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001392:	2014      	movs	r0, #20
 8001394:	f001 ffbd 	bl	8003312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3720      	adds	r7, #32
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40006400 	.word	0x40006400
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010800 	.word	0x40010800

080013ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <HAL_SPI_MspInit+0x88>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d12f      	bne.n	800142c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	4a19      	ldr	r2, [pc, #100]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d6:	6193      	str	r3, [r2, #24]
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a13      	ldr	r2, [pc, #76]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013ea:	f043 0304 	orr.w	r3, r3, #4
 80013ee:	6193      	str	r3, [r2, #24]
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_SPI_MspInit+0x8c>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013fc:	23a0      	movs	r3, #160	; 0xa0
 80013fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <HAL_SPI_MspInit+0x90>)
 8001410:	f002 fa54 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001414:	2340      	movs	r3, #64	; 0x40
 8001416:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_SPI_MspInit+0x90>)
 8001428:	f002 fa48 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40013000 	.word	0x40013000
 8001438:	40021000 	.word	0x40021000
 800143c:	40010800 	.word	0x40010800

08001440 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001450:	d114      	bne.n	800147c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a18      	ldr	r2, [pc, #96]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	201c      	movs	r0, #28
 8001470:	f001 ff33 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001474:	201c      	movs	r0, #28
 8001476:	f001 ff4c 	bl	8003312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800147a:	e018      	b.n	80014ae <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <HAL_TIM_Base_MspInit+0x7c>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d113      	bne.n	80014ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	61d3      	str	r3, [r2, #28]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_TIM_Base_MspInit+0x78>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	201d      	movs	r0, #29
 80014a4:	f001 ff19 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014a8:	201d      	movs	r0, #29
 80014aa:	f001 ff32 	bl	8003312 <HAL_NVIC_EnableIRQ>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40000400 	.word	0x40000400

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a3b      	ldr	r2, [pc, #236]	; (80015c8 <HAL_UART_MspInit+0x108>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d13a      	bne.n	8001556 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <HAL_UART_MspInit+0x10c>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a39      	ldr	r2, [pc, #228]	; (80015cc <HAL_UART_MspInit+0x10c>)
 80014e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b37      	ldr	r3, [pc, #220]	; (80015cc <HAL_UART_MspInit+0x10c>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f4:	617b      	str	r3, [r7, #20]
 80014f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <HAL_UART_MspInit+0x10c>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	4a33      	ldr	r2, [pc, #204]	; (80015cc <HAL_UART_MspInit+0x10c>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6193      	str	r3, [r2, #24]
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_UART_MspInit+0x10c>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151e:	f107 0318 	add.w	r3, r7, #24
 8001522:	4619      	mov	r1, r3
 8001524:	482a      	ldr	r0, [pc, #168]	; (80015d0 <HAL_UART_MspInit+0x110>)
 8001526:	f002 f9c9 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800152a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001530:	2300      	movs	r3, #0
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	4824      	ldr	r0, [pc, #144]	; (80015d0 <HAL_UART_MspInit+0x110>)
 8001540:	f002 f9bc 	bl	80038bc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001544:	2200      	movs	r2, #0
 8001546:	2100      	movs	r1, #0
 8001548:	2025      	movs	r0, #37	; 0x25
 800154a:	f001 fec6 	bl	80032da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800154e:	2025      	movs	r0, #37	; 0x25
 8001550:	f001 fedf 	bl	8003312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001554:	e034      	b.n	80015c0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a1e      	ldr	r2, [pc, #120]	; (80015d4 <HAL_UART_MspInit+0x114>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d12f      	bne.n	80015c0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <HAL_UART_MspInit+0x10c>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_UART_MspInit+0x10c>)
 8001566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156a:	61d3      	str	r3, [r2, #28]
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_UART_MspInit+0x10c>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_UART_MspInit+0x10c>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a13      	ldr	r2, [pc, #76]	; (80015cc <HAL_UART_MspInit+0x10c>)
 800157e:	f043 0304 	orr.w	r3, r3, #4
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_UART_MspInit+0x10c>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001590:	2304      	movs	r3, #4
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0318 	add.w	r3, r7, #24
 80015a0:	4619      	mov	r1, r3
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <HAL_UART_MspInit+0x110>)
 80015a4:	f002 f98a 	bl	80038bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015a8:	2308      	movs	r3, #8
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0318 	add.w	r3, r7, #24
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <HAL_UART_MspInit+0x110>)
 80015bc:	f002 f97e 	bl	80038bc <HAL_GPIO_Init>
}
 80015c0:	bf00      	nop
 80015c2:	3728      	adds	r7, #40	; 0x28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40013800 	.word	0x40013800
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010800 	.word	0x40010800
 80015d4:	40004400 	.word	0x40004400

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80015dc:	e7fe      	b.n	80015dc <NMI_Handler+0x4>

080015de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e2:	e7fe      	b.n	80015e2 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	e7fe      	b.n	80015e8 <MemManage_Handler+0x4>

080015ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <BusFault_Handler+0x4>

080015f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <UsageFault_Handler+0x4>

080015f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr

08001602 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr

0800160e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
	...

0800161c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (Timer1 > 0)
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <SysTick_Handler+0x34>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d005      	beq.n	8001634 <SysTick_Handler+0x18>
		Timer1--;
 8001628:	4b09      	ldr	r3, [pc, #36]	; (8001650 <SysTick_Handler+0x34>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <SysTick_Handler+0x34>)
 8001632:	701a      	strb	r2, [r3, #0]
	if (Timer2 > 0)
 8001634:	4b07      	ldr	r3, [pc, #28]	; (8001654 <SysTick_Handler+0x38>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d005      	beq.n	8001648 <SysTick_Handler+0x2c>
		Timer2--;
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Handler+0x38>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	3b01      	subs	r3, #1
 8001642:	b2da      	uxtb	r2, r3
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <SysTick_Handler+0x38>)
 8001646:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 ffce 	bl	80025e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	2000012c 	.word	0x2000012c
 8001654:	2000012e 	.word	0x2000012e

08001658 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800165e:	f001 fb41 	bl	8002ce4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000134 	.word	0x20000134

0800166c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	Hata_sayac[0]++;/* BCM HATA SAYACI*/
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <TIM2_IRQHandler+0xa8>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	3301      	adds	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <TIM2_IRQHandler+0xa8>)
 800167c:	701a      	strb	r2, [r3, #0]
	Hata_sayac[2]++;/*BMS HATA SAYACI*/
 800167e:	4b25      	ldr	r3, [pc, #148]	; (8001714 <TIM2_IRQHandler+0xa8>)
 8001680:	789b      	ldrb	r3, [r3, #2]
 8001682:	3301      	adds	r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <TIM2_IRQHandler+0xa8>)
 8001688:	709a      	strb	r2, [r3, #2]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800168a:	4823      	ldr	r0, [pc, #140]	; (8001718 <TIM2_IRQHandler+0xac>)
 800168c:	f003 fb90 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
	 //LORA_Send_Together_DATAS();

	if ((Hata_sayac[0] >= 7) || (Hata_sayac[1] >= 7) || (Hata_sayac[2] >= 7)
 8001690:	4b20      	ldr	r3, [pc, #128]	; (8001714 <TIM2_IRQHandler+0xa8>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b06      	cmp	r3, #6
 8001696:	d80b      	bhi.n	80016b0 <TIM2_IRQHandler+0x44>
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <TIM2_IRQHandler+0xa8>)
 800169a:	785b      	ldrb	r3, [r3, #1]
 800169c:	2b06      	cmp	r3, #6
 800169e:	d807      	bhi.n	80016b0 <TIM2_IRQHandler+0x44>
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <TIM2_IRQHandler+0xa8>)
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	2b06      	cmp	r3, #6
 80016a6:	d803      	bhi.n	80016b0 <TIM2_IRQHandler+0x44>
			|| (Hata_sayac[3] >= 7) == 1) {
 80016a8:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <TIM2_IRQHandler+0xa8>)
 80016aa:	78db      	ldrb	r3, [r3, #3]
 80016ac:	2b06      	cmp	r3, #6
 80016ae:	d927      	bls.n	8001700 <TIM2_IRQHandler+0x94>
		for (int i = 0; i < 4; i++) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	e021      	b.n	80016fa <TIM2_IRQHandler+0x8e>
			switch (i) {
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <TIM2_IRQHandler+0x58>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d00c      	beq.n	80016dc <TIM2_IRQHandler+0x70>
 80016c2:	e017      	b.n	80016f4 <TIM2_IRQHandler+0x88>
			case 0:
				if (Hata_sayac[0] >= 7)/*BCM HATA DURUMU */
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <TIM2_IRQHandler+0xa8>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b06      	cmp	r3, #6
 80016ca:	d903      	bls.n	80016d4 <TIM2_IRQHandler+0x68>
					fault[0] = 1;
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <TIM2_IRQHandler+0xb0>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	701a      	strb	r2, [r3, #0]
				else
					fault[0] = 0;
				break;
 80016d2:	e00f      	b.n	80016f4 <TIM2_IRQHandler+0x88>
					fault[0] = 0;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <TIM2_IRQHandler+0xb0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
				break;
 80016da:	e00b      	b.n	80016f4 <TIM2_IRQHandler+0x88>
			case 2:
				if (Hata_sayac[2] >= 7)/*BMS HATA DURUMU*/
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <TIM2_IRQHandler+0xa8>)
 80016de:	789b      	ldrb	r3, [r3, #2]
 80016e0:	2b06      	cmp	r3, #6
 80016e2:	d903      	bls.n	80016ec <TIM2_IRQHandler+0x80>
					fault[2] = 0;
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <TIM2_IRQHandler+0xb0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	709a      	strb	r2, [r3, #2]
				else
					fault[2] = 1;
				break;
 80016ea:	e002      	b.n	80016f2 <TIM2_IRQHandler+0x86>
					fault[2] = 1;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <TIM2_IRQHandler+0xb0>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	709a      	strb	r2, [r3, #2]
				break;
 80016f2:	bf00      	nop
		for (int i = 0; i < 4; i++) {
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3301      	adds	r3, #1
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	ddda      	ble.n	80016b6 <TIM2_IRQHandler+0x4a>
			}
		}
	}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 8001700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001704:	4806      	ldr	r0, [pc, #24]	; (8001720 <TIM2_IRQHandler+0xb4>)
 8001706:	f002 fa75 	bl	8003bf4 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20002384 	.word	0x20002384
 8001718:	200001b4 	.word	0x200001b4
 800171c:	2000245c 	.word	0x2000245c
 8001720:	40011000 	.word	0x40011000

08001724 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <TIM3_IRQHandler+0x10>)
 800172a:	f003 fb41 	bl	8004db0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200001fc 	.word	0x200001fc

08001738 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USART1_IRQHandler+0x10>)
 800173e:	f003 ff9f 	bl	8005680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000244 	.word	0x20000244

0800174c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001754:	4a14      	ldr	r2, [pc, #80]	; (80017a8 <_sbrk+0x5c>)
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <_sbrk+0x60>)
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001760:	4b13      	ldr	r3, [pc, #76]	; (80017b0 <_sbrk+0x64>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d102      	bne.n	800176e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x64>)
 800176a:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <_sbrk+0x68>)
 800176c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800176e:	4b10      	ldr	r3, [pc, #64]	; (80017b0 <_sbrk+0x64>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4413      	add	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	429a      	cmp	r2, r3
 800177a:	d207      	bcs.n	800178c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800177c:	f008 fb3c 	bl	8009df8 <__errno>
 8001780:	4603      	mov	r3, r0
 8001782:	220c      	movs	r2, #12
 8001784:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001786:	f04f 33ff 	mov.w	r3, #4294967295
 800178a:	e009      	b.n	80017a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <_sbrk+0x64>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4413      	add	r3, r2
 800179a:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <_sbrk+0x64>)
 800179c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800179e:	68fb      	ldr	r3, [r7, #12]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20005000 	.word	0x20005000
 80017ac:	00000400 	.word	0x00000400
 80017b0:	20002388 	.word	0x20002388
 80017b4:	200028c8 	.word	0x200028c8

080017b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017c6:	490d      	ldr	r1, [pc, #52]	; (80017fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017c8:	4a0d      	ldr	r2, [pc, #52]	; (8001800 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017cc:	e002      	b.n	80017d4 <LoopCopyDataInit>

080017ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d2:	3304      	adds	r3, #4

080017d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017d8:	d3f9      	bcc.n	80017ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017dc:	4c0a      	ldr	r4, [pc, #40]	; (8001808 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e0:	e001      	b.n	80017e6 <LoopFillZerobss>

080017e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e4:	3204      	adds	r2, #4

080017e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017e8:	d3fb      	bcc.n	80017e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ea:	f7ff ffe5 	bl	80017b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f008 fb09 	bl	8009e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017f2:	f7ff fad1 	bl	8000d98 <main>
  bx lr
 80017f6:	4770      	bx	lr
  ldr r0, =_sdata
 80017f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017fc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001800:	0800af80 	.word	0x0800af80
  ldr r2, =_sbss
 8001804:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001808:	200028c4 	.word	0x200028c4

0800180c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC1_2_IRQHandler>
	...

08001810 <CANBUS_ConfigFilter_Init>:
 * @brief
 *
 * @pre
 * @post
 */
void CANBUS_ConfigFilter_Init(void) {
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	//Gelen Mesaj İçin Filtre Ayarları Yapılıyor...
	TxHeader.StdId = VCU_CANBUS_ID;
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <CANBUS_ConfigFilter_Init+0x64>)
 8001816:	2236      	movs	r2, #54	; 0x36
 8001818:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 800181a:	4b16      	ldr	r3, [pc, #88]	; (8001874 <CANBUS_ConfigFilter_Init+0x64>)
 800181c:	2208      	movs	r2, #8
 800181e:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <CANBUS_ConfigFilter_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <CANBUS_ConfigFilter_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
	Canfil.FilterBank = 0;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
	Canfil.FilterActivation = ENABLE;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 8001834:	2201      	movs	r2, #1
 8001836:	621a      	str	r2, [r3, #32]
	Canfil.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
	Canfil.FilterIdHigh = 0;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
	Canfil.FilterIdLow = 0;
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 8001846:	2200      	movs	r2, #0
 8001848:	605a      	str	r2, [r3, #4]
	Canfil.FilterMaskIdHigh = 0x0000;
 800184a:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
	Canfil.FilterMaskIdLow = 0x0000;
 8001850:	4b09      	ldr	r3, [pc, #36]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
	Canfil.FilterMode = CAN_FILTERMODE_IDMASK;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
	Canfil.FilterScale = CAN_FILTERSCALE_32BIT;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 800185e:	2201      	movs	r2, #1
 8001860:	61da      	str	r2, [r3, #28]
	Canfil.SlaveStartFilterBank = 0;
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

	//Filtreleme Aktif Ediliyor..
	HAL_CAN_ConfigFilter(&hcan, &Canfil);
 8001868:	4903      	ldr	r1, [pc, #12]	; (8001878 <CANBUS_ConfigFilter_Init+0x68>)
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <CANBUS_ConfigFilter_Init+0x6c>)
 800186c:	f000 fff7 	bl	800285e <HAL_CAN_ConfigFilter>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000238c 	.word	0x2000238c
 8001878:	200023c0 	.word	0x200023c0
 800187c:	20000134 	.word	0x20000134

08001880 <CANBUS_Init>:
 * @brief
 *
 * @pre
 * @post
 */
void CANBUS_Init(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	HAL_CAN_Start(&hcan);
 8001884:	4805      	ldr	r0, [pc, #20]	; (800189c <CANBUS_Init+0x1c>)
 8001886:	f001 f8b3 	bl	80029f0 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800188a:	2102      	movs	r1, #2
 800188c:	4803      	ldr	r0, [pc, #12]	; (800189c <CANBUS_Init+0x1c>)
 800188e:	f001 fa04 	bl	8002c9a <HAL_CAN_ActivateNotification>
	CANBUS_ConfigFilter_Init();
 8001892:	f7ff ffbd 	bl	8001810 <CANBUS_ConfigFilter_Init>

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000134 	.word	0x20000134

080018a0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 *
 * @pre
 * @post
 * @param hcan
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CanRX);
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f001 f8e2 	bl	8002a78 <HAL_CAN_GetRxMessage>
	CAN_ID = RxHeader.StdId;
 80018b4:	4b14      	ldr	r3, [pc, #80]	; (8001908 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80018bc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80018be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c2:	4813      	ldr	r0, [pc, #76]	; (8001910 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80018c4:	f002 f996 	bl	8003bf4 <HAL_GPIO_TogglePin>
	for (uint8_t i = 0; i < 8; i++) {
 80018c8:	2300      	movs	r3, #0
 80018ca:	73fb      	strb	r3, [r7, #15]
 80018cc:	e008      	b.n	80018e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		Nextion_Buffer[i] = CanRX[i];
 80018ce:	7bfa      	ldrb	r2, [r7, #15]
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	490c      	ldr	r1, [pc, #48]	; (8001904 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80018d4:	5c89      	ldrb	r1, [r1, r2]
 80018d6:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80018d8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; i++) {
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3301      	adds	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	d9f3      	bls.n	80018ce <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
	}
	Nextion_Incomming_Packet_ID_From_CANBUS(CAN_ID);
 80018e6:	4b09      	ldr	r3, [pc, #36]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 fbf8 	bl	80020e0 <Nextion_Incomming_Packet_ID_From_CANBUS>
	LORA_Incomming_Packet_ID_From_CANBUS(CAN_ID);
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fdc5 	bl	8002484 <LORA_Incomming_Packet_ID_From_CANBUS>


}
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200023ec 	.word	0x200023ec
 8001908:	200023a4 	.word	0x200023a4
 800190c:	200023e8 	.word	0x200023e8
 8001910:	40011000 	.word	0x40011000
 8001914:	200023f8 	.word	0x200023f8

08001918 <Send_BMSMsgPacket_To_Nextion>:
char Sending_Buffer_For_Nextion[50];
uint8_t Nextion_Ending[3] = { 0xFF, 0XFF, 0XFF };
uint8_t fault[6]={0};
extern uint32_t sd_card[5];

void Send_BMSMsgPacket_To_Nextion(void) {
 8001918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800191a:	b093      	sub	sp, #76	; 0x4c
 800191c:	af0e      	add	r7, sp, #56	; 0x38
	uint32_t written_bytes;

	switch (CanRX[0]) {
 800191e:	4b7f      	ldr	r3, [pc, #508]	; (8001b1c <Send_BMSMsgPacket_To_Nextion+0x204>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	3b01      	subs	r3, #1
 8001924:	2b04      	cmp	r3, #4
 8001926:	f200 8142 	bhi.w	8001bae <Send_BMSMsgPacket_To_Nextion+0x296>
 800192a:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <Send_BMSMsgPacket_To_Nextion+0x18>)
 800192c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001930:	08001945 	.word	0x08001945
 8001934:	080019a1 	.word	0x080019a1
 8001938:	08001a41 	.word	0x08001a41
 800193c:	08001aaf 	.word	0x08001aaf
 8001940:	08001b59 	.word	0x08001b59
	case 1:
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001944:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <Send_BMSMsgPacket_To_Nextion+0x208>)
 8001946:	6819      	ldr	r1, [r3, #0]
				"%s%u%s%s%u%s%s%u%s", Nextion_Battery_Max_Temperature,
				Nextion_BMS_Buffer[0], (char*) Nextion_Ending,
 8001948:	4b76      	ldr	r3, [pc, #472]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 800194c:	461e      	mov	r6, r3
 800194e:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <Send_BMSMsgPacket_To_Nextion+0x210>)
 8001950:	681b      	ldr	r3, [r3, #0]
				Nextion_Motor_Temperature, Nextion_BMS_Buffer[3],
 8001952:	4a74      	ldr	r2, [pc, #464]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001954:	78d2      	ldrb	r2, [r2, #3]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001956:	4614      	mov	r4, r2
 8001958:	4a74      	ldr	r2, [pc, #464]	; (8001b2c <Send_BMSMsgPacket_To_Nextion+0x214>)
 800195a:	6812      	ldr	r2, [r2, #0]
				(char*) Nextion_Ending, Nextion_Driver_Temperature,
				Nextion_BMS_Buffer[4], (char*) Nextion_Ending);
 800195c:	4871      	ldr	r0, [pc, #452]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 800195e:	7900      	ldrb	r0, [r0, #4]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001960:	4605      	mov	r5, r0
 8001962:	4873      	ldr	r0, [pc, #460]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001964:	9006      	str	r0, [sp, #24]
 8001966:	9505      	str	r5, [sp, #20]
 8001968:	9204      	str	r2, [sp, #16]
 800196a:	4a71      	ldr	r2, [pc, #452]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 800196c:	9203      	str	r2, [sp, #12]
 800196e:	9402      	str	r4, [sp, #8]
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4633      	mov	r3, r6
 8001978:	460a      	mov	r2, r1
 800197a:	496e      	ldr	r1, [pc, #440]	; (8001b34 <Send_BMSMsgPacket_To_Nextion+0x21c>)
 800197c:	486e      	ldr	r0, [pc, #440]	; (8001b38 <Send_BMSMsgPacket_To_Nextion+0x220>)
 800197e:	f008 fa6d 	bl	8009e5c <siprintf>
 8001982:	4603      	mov	r3, r0
 8001984:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	b29a      	uxth	r2, r3
 800198a:	2364      	movs	r3, #100	; 0x64
 800198c:	496a      	ldr	r1, [pc, #424]	; (8001b38 <Send_BMSMsgPacket_To_Nextion+0x220>)
 800198e:	486b      	ldr	r0, [pc, #428]	; (8001b3c <Send_BMSMsgPacket_To_Nextion+0x224>)
 8001990:	f003 fdb3 	bl	80054fa <HAL_UART_Transmit>
				written_bytes, 100);
		sd_card[2]=Nextion_BMS_Buffer[0];//MAKS BATARYA SICAKLIĞI
 8001994:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <Send_BMSMsgPacket_To_Nextion+0x228>)
 800199c:	609a      	str	r2, [r3, #8]
		break;
 800199e:	e106      	b.n	8001bae <Send_BMSMsgPacket_To_Nextion+0x296>
	case 2:
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 80019a0:	4b68      	ldr	r3, [pc, #416]	; (8001b44 <Send_BMSMsgPacket_To_Nextion+0x22c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
				"%s%u%s%s%u%sV1=%u%sV2=%u%sV3=%u%sV4=%u%sV5=%u%s",
				Nextion_Battery_Total_Voltage, Nextion_BMS_Buffer[5],
 80019a4:	4b5f      	ldr	r3, [pc, #380]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 80019a6:	795b      	ldrb	r3, [r3, #5]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 80019a8:	469c      	mov	ip, r3
 80019aa:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <Send_BMSMsgPacket_To_Nextion+0x230>)
 80019ac:	681b      	ldr	r3, [r3, #0]
				(char*) Nextion_Ending, Nextion_Battery_SOC,
				Nextion_BMS_Buffer[6], (char*) Nextion_Ending,
 80019ae:	495d      	ldr	r1, [pc, #372]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 80019b0:	7989      	ldrb	r1, [r1, #6]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 80019b2:	4608      	mov	r0, r1
				Nextion_BMS_Buffer[7], (char*) Nextion_Ending,
 80019b4:	495b      	ldr	r1, [pc, #364]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 80019b6:	79c9      	ldrb	r1, [r1, #7]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 80019b8:	460c      	mov	r4, r1
				Nextion_BMS_Buffer[8], (char*) Nextion_Ending,
 80019ba:	495a      	ldr	r1, [pc, #360]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 80019bc:	7a09      	ldrb	r1, [r1, #8]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 80019be:	460d      	mov	r5, r1
				Nextion_BMS_Buffer[9], (char*) Nextion_Ending,
 80019c0:	4958      	ldr	r1, [pc, #352]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 80019c2:	7a49      	ldrb	r1, [r1, #9]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 80019c4:	460e      	mov	r6, r1
				Nextion_BMS_Buffer[10], (char*) Nextion_Ending,
 80019c6:	4957      	ldr	r1, [pc, #348]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 80019c8:	7a89      	ldrb	r1, [r1, #10]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 80019ca:	6079      	str	r1, [r7, #4]
				Nextion_BMS_Buffer[11], (char*) Nextion_Ending);
 80019cc:	4955      	ldr	r1, [pc, #340]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 80019ce:	7ac9      	ldrb	r1, [r1, #11]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	4957      	ldr	r1, [pc, #348]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 80019d4:	910d      	str	r1, [sp, #52]	; 0x34
 80019d6:	f8d7 e000 	ldr.w	lr, [r7]
 80019da:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 80019de:	4954      	ldr	r1, [pc, #336]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 80019e0:	910b      	str	r1, [sp, #44]	; 0x2c
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	910a      	str	r1, [sp, #40]	; 0x28
 80019e6:	4952      	ldr	r1, [pc, #328]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 80019e8:	9109      	str	r1, [sp, #36]	; 0x24
 80019ea:	9608      	str	r6, [sp, #32]
 80019ec:	4950      	ldr	r1, [pc, #320]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 80019ee:	9107      	str	r1, [sp, #28]
 80019f0:	9506      	str	r5, [sp, #24]
 80019f2:	494f      	ldr	r1, [pc, #316]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 80019f4:	9105      	str	r1, [sp, #20]
 80019f6:	9404      	str	r4, [sp, #16]
 80019f8:	494d      	ldr	r1, [pc, #308]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 80019fa:	9103      	str	r1, [sp, #12]
 80019fc:	9002      	str	r0, [sp, #8]
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	4b4b      	ldr	r3, [pc, #300]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4663      	mov	r3, ip
 8001a06:	4951      	ldr	r1, [pc, #324]	; (8001b4c <Send_BMSMsgPacket_To_Nextion+0x234>)
 8001a08:	484b      	ldr	r0, [pc, #300]	; (8001b38 <Send_BMSMsgPacket_To_Nextion+0x220>)
 8001a0a:	f008 fa27 	bl	8009e5c <siprintf>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	2364      	movs	r3, #100	; 0x64
 8001a18:	4947      	ldr	r1, [pc, #284]	; (8001b38 <Send_BMSMsgPacket_To_Nextion+0x220>)
 8001a1a:	4848      	ldr	r0, [pc, #288]	; (8001b3c <Send_BMSMsgPacket_To_Nextion+0x224>)
 8001a1c:	f003 fd6d 	bl	80054fa <HAL_UART_Transmit>
				written_bytes, 100);
		sd_card[3]=Nextion_BMS_Buffer[5];//toplam voltaj
 8001a20:	4b40      	ldr	r3, [pc, #256]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a22:	795b      	ldrb	r3, [r3, #5]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <Send_BMSMsgPacket_To_Nextion+0x228>)
 8001a28:	60da      	str	r2, [r3, #12]
		sd_card[4]=(Nextion_BMS_Buffer[5]*(1218));//batarya kalan enerji hesabı (24S 10P pil bankası)
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a2c:	795b      	ldrb	r3, [r3, #5]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	f240 43c2 	movw	r3, #1218	; 0x4c2
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b41      	ldr	r3, [pc, #260]	; (8001b40 <Send_BMSMsgPacket_To_Nextion+0x228>)
 8001a3c:	611a      	str	r2, [r3, #16]
		break;
 8001a3e:	e0b6      	b.n	8001bae <Send_BMSMsgPacket_To_Nextion+0x296>
	case 3:
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
				"V6=%u%sV7=%u%sV8=%u%sV9=%u%sVA=%u%sVB=%u%sVC=%u%s",
				Nextion_BMS_Buffer[12], (char*) Nextion_Ending,
 8001a40:	4b38      	ldr	r3, [pc, #224]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a42:	7b1b      	ldrb	r3, [r3, #12]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001a44:	469c      	mov	ip, r3
				Nextion_BMS_Buffer[13], (char*) Nextion_Ending,
 8001a46:	4b37      	ldr	r3, [pc, #220]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a48:	7b5b      	ldrb	r3, [r3, #13]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001a4a:	461a      	mov	r2, r3
				Nextion_BMS_Buffer[14], (char*) Nextion_Ending,
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a4e:	7b9b      	ldrb	r3, [r3, #14]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001a50:	4619      	mov	r1, r3
				Nextion_BMS_Buffer[15], (char*) Nextion_Ending,
 8001a52:	4b34      	ldr	r3, [pc, #208]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a54:	7bdb      	ldrb	r3, [r3, #15]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001a56:	4618      	mov	r0, r3
				Nextion_BMS_Buffer[16], (char*) Nextion_Ending,
 8001a58:	4b32      	ldr	r3, [pc, #200]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a5a:	7c1b      	ldrb	r3, [r3, #16]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001a5c:	461c      	mov	r4, r3
				Nextion_BMS_Buffer[17], (char*) Nextion_Ending,
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a60:	7c5b      	ldrb	r3, [r3, #17]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001a62:	461d      	mov	r5, r3
				Nextion_BMS_Buffer[18], (char*) Nextion_Ending);
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001a66:	7c9b      	ldrb	r3, [r3, #18]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001a68:	461e      	mov	r6, r3
 8001a6a:	4b31      	ldr	r3, [pc, #196]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001a6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a6e:	960a      	str	r6, [sp, #40]	; 0x28
 8001a70:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001a72:	9309      	str	r3, [sp, #36]	; 0x24
 8001a74:	9508      	str	r5, [sp, #32]
 8001a76:	4b2e      	ldr	r3, [pc, #184]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001a78:	9307      	str	r3, [sp, #28]
 8001a7a:	9406      	str	r4, [sp, #24]
 8001a7c:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001a7e:	9305      	str	r3, [sp, #20]
 8001a80:	9004      	str	r0, [sp, #16]
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001a84:	9303      	str	r3, [sp, #12]
 8001a86:	9102      	str	r1, [sp, #8]
 8001a88:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	9200      	str	r2, [sp, #0]
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001a90:	4662      	mov	r2, ip
 8001a92:	492f      	ldr	r1, [pc, #188]	; (8001b50 <Send_BMSMsgPacket_To_Nextion+0x238>)
 8001a94:	4828      	ldr	r0, [pc, #160]	; (8001b38 <Send_BMSMsgPacket_To_Nextion+0x220>)
 8001a96:	f008 f9e1 	bl	8009e5c <siprintf>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	2364      	movs	r3, #100	; 0x64
 8001aa4:	4924      	ldr	r1, [pc, #144]	; (8001b38 <Send_BMSMsgPacket_To_Nextion+0x220>)
 8001aa6:	4825      	ldr	r0, [pc, #148]	; (8001b3c <Send_BMSMsgPacket_To_Nextion+0x224>)
 8001aa8:	f003 fd27 	bl	80054fa <HAL_UART_Transmit>
				written_bytes, 100);
		break;
 8001aac:	e07f      	b.n	8001bae <Send_BMSMsgPacket_To_Nextion+0x296>
	case 4:
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
				"VD=%u%sVE=%u%sVF=%u%sVG=%u%sVH=%u%sVI=%u%sVJ=%u%s",
				Nextion_BMS_Buffer[19], (char*) Nextion_Ending,
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001ab0:	7cdb      	ldrb	r3, [r3, #19]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001ab2:	469c      	mov	ip, r3
				Nextion_BMS_Buffer[20], (char*) Nextion_Ending,
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001ab6:	7d1b      	ldrb	r3, [r3, #20]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001ab8:	461a      	mov	r2, r3
				Nextion_BMS_Buffer[21], (char*) Nextion_Ending,
 8001aba:	4b1a      	ldr	r3, [pc, #104]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001abc:	7d5b      	ldrb	r3, [r3, #21]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001abe:	4619      	mov	r1, r3
				Nextion_BMS_Buffer[22], (char*) Nextion_Ending,
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001ac2:	7d9b      	ldrb	r3, [r3, #22]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001ac4:	4618      	mov	r0, r3
				Nextion_BMS_Buffer[23], (char*) Nextion_Ending,
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001ac8:	7ddb      	ldrb	r3, [r3, #23]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001aca:	461c      	mov	r4, r3
				Nextion_BMS_Buffer[24], (char*) Nextion_Ending,
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001ace:	7e1b      	ldrb	r3, [r3, #24]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001ad0:	461d      	mov	r5, r3
				Nextion_BMS_Buffer[25], (char*) Nextion_Ending);
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <Send_BMSMsgPacket_To_Nextion+0x20c>)
 8001ad4:	7e5b      	ldrb	r3, [r3, #25]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001ad6:	461e      	mov	r6, r3
 8001ad8:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001ada:	930b      	str	r3, [sp, #44]	; 0x2c
 8001adc:	960a      	str	r6, [sp, #40]	; 0x28
 8001ade:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001ae0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ae2:	9508      	str	r5, [sp, #32]
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001ae6:	9307      	str	r3, [sp, #28]
 8001ae8:	9406      	str	r4, [sp, #24]
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001aec:	9305      	str	r3, [sp, #20]
 8001aee:	9004      	str	r0, [sp, #16]
 8001af0:	4b0f      	ldr	r3, [pc, #60]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001af2:	9303      	str	r3, [sp, #12]
 8001af4:	9102      	str	r1, [sp, #8]
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	9200      	str	r2, [sp, #0]
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <Send_BMSMsgPacket_To_Nextion+0x218>)
 8001afe:	4662      	mov	r2, ip
 8001b00:	4914      	ldr	r1, [pc, #80]	; (8001b54 <Send_BMSMsgPacket_To_Nextion+0x23c>)
 8001b02:	480d      	ldr	r0, [pc, #52]	; (8001b38 <Send_BMSMsgPacket_To_Nextion+0x220>)
 8001b04:	f008 f9aa 	bl	8009e5c <siprintf>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	2364      	movs	r3, #100	; 0x64
 8001b12:	4909      	ldr	r1, [pc, #36]	; (8001b38 <Send_BMSMsgPacket_To_Nextion+0x220>)
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <Send_BMSMsgPacket_To_Nextion+0x224>)
 8001b16:	f003 fcf0 	bl	80054fa <HAL_UART_Transmit>
				written_bytes, 100);
		break;
 8001b1a:	e048      	b.n	8001bae <Send_BMSMsgPacket_To_Nextion+0x296>
 8001b1c:	200023ec 	.word	0x200023ec
 8001b20:	20000034 	.word	0x20000034
 8001b24:	20002400 	.word	0x20002400
 8001b28:	20000038 	.word	0x20000038
 8001b2c:	2000003c 	.word	0x2000003c
 8001b30:	20000040 	.word	0x20000040
 8001b34:	0800a80c 	.word	0x0800a80c
 8001b38:	20002428 	.word	0x20002428
 8001b3c:	20000288 	.word	0x20000288
 8001b40:	20002370 	.word	0x20002370
 8001b44:	2000002c 	.word	0x2000002c
 8001b48:	20000030 	.word	0x20000030
 8001b4c:	0800a820 	.word	0x0800a820
 8001b50:	0800a850 	.word	0x0800a850
 8001b54:	0800a884 	.word	0x0800a884
	case 5:
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
				"VK=%u%sVL=%u%sVM=%u%sVN=%u%sVO=%u%s", Nextion_BMS_Buffer[26],
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <Send_BMSMsgPacket_To_Nextion+0x2a0>)
 8001b5a:	7e9b      	ldrb	r3, [r3, #26]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001b5c:	461d      	mov	r5, r3
				(char*) Nextion_Ending, Nextion_BMS_Buffer[27],
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <Send_BMSMsgPacket_To_Nextion+0x2a0>)
 8001b60:	7edb      	ldrb	r3, [r3, #27]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001b62:	461a      	mov	r2, r3
				(char*) Nextion_Ending, Nextion_BMS_Buffer[28],
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <Send_BMSMsgPacket_To_Nextion+0x2a0>)
 8001b66:	7f1b      	ldrb	r3, [r3, #28]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001b68:	4619      	mov	r1, r3
				(char*) Nextion_Ending, Nextion_BMS_Buffer[29],
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <Send_BMSMsgPacket_To_Nextion+0x2a0>)
 8001b6c:	7f5b      	ldrb	r3, [r3, #29]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001b6e:	4618      	mov	r0, r3
				(char*) Nextion_Ending, Nextion_BMS_Buffer[30],
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <Send_BMSMsgPacket_To_Nextion+0x2a0>)
 8001b72:	7f9b      	ldrb	r3, [r3, #30]
		written_bytes = sprintf(Sending_Buffer_For_Nextion,
 8001b74:	461c      	mov	r4, r3
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <Send_BMSMsgPacket_To_Nextion+0x2a4>)
 8001b78:	9307      	str	r3, [sp, #28]
 8001b7a:	9406      	str	r4, [sp, #24]
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <Send_BMSMsgPacket_To_Nextion+0x2a4>)
 8001b7e:	9305      	str	r3, [sp, #20]
 8001b80:	9004      	str	r0, [sp, #16]
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <Send_BMSMsgPacket_To_Nextion+0x2a4>)
 8001b84:	9303      	str	r3, [sp, #12]
 8001b86:	9102      	str	r1, [sp, #8]
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <Send_BMSMsgPacket_To_Nextion+0x2a4>)
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	9200      	str	r2, [sp, #0]
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <Send_BMSMsgPacket_To_Nextion+0x2a4>)
 8001b90:	462a      	mov	r2, r5
 8001b92:	490b      	ldr	r1, [pc, #44]	; (8001bc0 <Send_BMSMsgPacket_To_Nextion+0x2a8>)
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <Send_BMSMsgPacket_To_Nextion+0x2ac>)
 8001b96:	f008 f961 	bl	8009e5c <siprintf>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	60fb      	str	r3, [r7, #12]
				(char*) Nextion_Ending);
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	2364      	movs	r3, #100	; 0x64
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <Send_BMSMsgPacket_To_Nextion+0x2ac>)
 8001ba6:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <Send_BMSMsgPacket_To_Nextion+0x2b0>)
 8001ba8:	f003 fca7 	bl	80054fa <HAL_UART_Transmit>
				written_bytes, 100);
		break;
 8001bac:	bf00      	nop
	}

}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20002400 	.word	0x20002400
 8001bbc:	20000040 	.word	0x20000040
 8001bc0:	0800a8b8 	.word	0x0800a8b8
 8001bc4:	20002428 	.word	0x20002428
 8001bc8:	20000288 	.word	0x20000288

08001bcc <Create_BMSMsgPacket_For_Nextion>:

void Create_BMSMsgPacket_For_Nextion(void) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
	switch (CanRX[0]) {
 8001bd2:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <Create_BMSMsgPacket_For_Nextion+0x110>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d87a      	bhi.n	8001cd2 <Create_BMSMsgPacket_For_Nextion+0x106>
 8001bdc:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <Create_BMSMsgPacket_For_Nextion+0x18>)
 8001bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be2:	bf00      	nop
 8001be4:	08001bf9 	.word	0x08001bf9
 8001be8:	08001c29 	.word	0x08001c29
 8001bec:	08001c5b 	.word	0x08001c5b
 8001bf0:	08001c83 	.word	0x08001c83
 8001bf4:	08001cab 	.word	0x08001cab
	case 1:
		//Max,min,ort,motor,sürücü temp
		for (uint8_t i = 0; i < 5; i++) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	71fb      	strb	r3, [r7, #7]
 8001bfc:	e009      	b.n	8001c12 <Create_BMSMsgPacket_For_Nextion+0x46>
			Nextion_BMS_Buffer[i] = CanRX[i + 1];
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <Create_BMSMsgPacket_For_Nextion+0x110>)
 8001c06:	5c89      	ldrb	r1, [r1, r2]
 8001c08:	4a35      	ldr	r2, [pc, #212]	; (8001ce0 <Create_BMSMsgPacket_For_Nextion+0x114>)
 8001c0a:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 5; i++) {
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	71fb      	strb	r3, [r7, #7]
 8001c12:	79fb      	ldrb	r3, [r7, #7]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d9f2      	bls.n	8001bfe <Create_BMSMsgPacket_For_Nextion+0x32>

		}
		Send_BMSMsgPacket_To_Nextion();
 8001c18:	f7ff fe7e 	bl	8001918 <Send_BMSMsgPacket_To_Nextion>
		sd_card[2]=Nextion_BMS_Buffer[0];
 8001c1c:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <Create_BMSMsgPacket_For_Nextion+0x114>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <Create_BMSMsgPacket_For_Nextion+0x118>)
 8001c24:	609a      	str	r2, [r3, #8]
		break;
 8001c26:	e054      	b.n	8001cd2 <Create_BMSMsgPacket_For_Nextion+0x106>
	case 2:
		//total volt, soc ,battery voltage 1-5
		for (uint8_t i = 0; i < 7; i++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	71bb      	strb	r3, [r7, #6]
 8001c2c:	e00a      	b.n	8001c44 <Create_BMSMsgPacket_For_Nextion+0x78>
			Nextion_BMS_Buffer[i + 5] = CanRX[i + 1];
 8001c2e:	79bb      	ldrb	r3, [r7, #6]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	79bb      	ldrb	r3, [r7, #6]
 8001c34:	3305      	adds	r3, #5
 8001c36:	4929      	ldr	r1, [pc, #164]	; (8001cdc <Create_BMSMsgPacket_For_Nextion+0x110>)
 8001c38:	5c89      	ldrb	r1, [r1, r2]
 8001c3a:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <Create_BMSMsgPacket_For_Nextion+0x114>)
 8001c3c:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 7; i++) {
 8001c3e:	79bb      	ldrb	r3, [r7, #6]
 8001c40:	3301      	adds	r3, #1
 8001c42:	71bb      	strb	r3, [r7, #6]
 8001c44:	79bb      	ldrb	r3, [r7, #6]
 8001c46:	2b06      	cmp	r3, #6
 8001c48:	d9f1      	bls.n	8001c2e <Create_BMSMsgPacket_For_Nextion+0x62>
		}
		Send_BMSMsgPacket_To_Nextion();
 8001c4a:	f7ff fe65 	bl	8001918 <Send_BMSMsgPacket_To_Nextion>
		sd_card[3]=Nextion_BMS_Buffer[5];
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <Create_BMSMsgPacket_For_Nextion+0x114>)
 8001c50:	795b      	ldrb	r3, [r3, #5]
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <Create_BMSMsgPacket_For_Nextion+0x118>)
 8001c56:	60da      	str	r2, [r3, #12]

		break;
 8001c58:	e03b      	b.n	8001cd2 <Create_BMSMsgPacket_For_Nextion+0x106>
	case 3:
		//battery voltage 6-12
		for (uint8_t i = 0; i < 7; i++) {
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	717b      	strb	r3, [r7, #5]
 8001c5e:	e00a      	b.n	8001c76 <Create_BMSMsgPacket_For_Nextion+0xaa>
			Nextion_BMS_Buffer[i + 12] = CanRX[i + 1];
 8001c60:	797b      	ldrb	r3, [r7, #5]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	797b      	ldrb	r3, [r7, #5]
 8001c66:	330c      	adds	r3, #12
 8001c68:	491c      	ldr	r1, [pc, #112]	; (8001cdc <Create_BMSMsgPacket_For_Nextion+0x110>)
 8001c6a:	5c89      	ldrb	r1, [r1, r2]
 8001c6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ce0 <Create_BMSMsgPacket_For_Nextion+0x114>)
 8001c6e:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 7; i++) {
 8001c70:	797b      	ldrb	r3, [r7, #5]
 8001c72:	3301      	adds	r3, #1
 8001c74:	717b      	strb	r3, [r7, #5]
 8001c76:	797b      	ldrb	r3, [r7, #5]
 8001c78:	2b06      	cmp	r3, #6
 8001c7a:	d9f1      	bls.n	8001c60 <Create_BMSMsgPacket_For_Nextion+0x94>
		}
		Send_BMSMsgPacket_To_Nextion();
 8001c7c:	f7ff fe4c 	bl	8001918 <Send_BMSMsgPacket_To_Nextion>
		break;
 8001c80:	e027      	b.n	8001cd2 <Create_BMSMsgPacket_For_Nextion+0x106>
	case 4:
		//battery voltage 13-20
		for (uint8_t i = 0; i < 7; i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	713b      	strb	r3, [r7, #4]
 8001c86:	e00a      	b.n	8001c9e <Create_BMSMsgPacket_For_Nextion+0xd2>
			Nextion_BMS_Buffer[i + 19] = CanRX[i + 1];
 8001c88:	793b      	ldrb	r3, [r7, #4]
 8001c8a:	1c5a      	adds	r2, r3, #1
 8001c8c:	793b      	ldrb	r3, [r7, #4]
 8001c8e:	3313      	adds	r3, #19
 8001c90:	4912      	ldr	r1, [pc, #72]	; (8001cdc <Create_BMSMsgPacket_For_Nextion+0x110>)
 8001c92:	5c89      	ldrb	r1, [r1, r2]
 8001c94:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <Create_BMSMsgPacket_For_Nextion+0x114>)
 8001c96:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 7; i++) {
 8001c98:	793b      	ldrb	r3, [r7, #4]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	713b      	strb	r3, [r7, #4]
 8001c9e:	793b      	ldrb	r3, [r7, #4]
 8001ca0:	2b06      	cmp	r3, #6
 8001ca2:	d9f1      	bls.n	8001c88 <Create_BMSMsgPacket_For_Nextion+0xbc>
		}
		Send_BMSMsgPacket_To_Nextion();
 8001ca4:	f7ff fe38 	bl	8001918 <Send_BMSMsgPacket_To_Nextion>
		break;
 8001ca8:	e013      	b.n	8001cd2 <Create_BMSMsgPacket_For_Nextion+0x106>
	case 5:
		for (uint8_t i = 0; i < 7; i++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	70fb      	strb	r3, [r7, #3]
 8001cae:	e00a      	b.n	8001cc6 <Create_BMSMsgPacket_For_Nextion+0xfa>
			Nextion_BMS_Buffer[i + 26] = CanRX[i + 1];
 8001cb0:	78fb      	ldrb	r3, [r7, #3]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	331a      	adds	r3, #26
 8001cb8:	4908      	ldr	r1, [pc, #32]	; (8001cdc <Create_BMSMsgPacket_For_Nextion+0x110>)
 8001cba:	5c89      	ldrb	r1, [r1, r2]
 8001cbc:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <Create_BMSMsgPacket_For_Nextion+0x114>)
 8001cbe:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < 7; i++) {
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	70fb      	strb	r3, [r7, #3]
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	2b06      	cmp	r3, #6
 8001cca:	d9f1      	bls.n	8001cb0 <Create_BMSMsgPacket_For_Nextion+0xe4>
		}
		Send_BMSMsgPacket_To_Nextion();
 8001ccc:	f7ff fe24 	bl	8001918 <Send_BMSMsgPacket_To_Nextion>
		break;
 8001cd0:	bf00      	nop
	}

}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200023ec 	.word	0x200023ec
 8001ce0:	20002400 	.word	0x20002400
 8001ce4:	20002370 	.word	0x20002370

08001ce8 <nextion_uzunlar>:
	//kısa far durumu gönderiliyor..
	sprintf(Sending_Buffer_For_Nextion, "%s%c%s", kisa_far, far_stat, (char*)Nextion_Ending);
	HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion, strlen(Sending_Buffer_For_Nextion), 100);
}

void nextion_uzunlar(void) {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af02      	add	r7, sp, #8
	//uzun far durumu gönderiliyor..
	sprintf(Sending_Buffer_For_Nextion, "%s%c%s", uzun_far, far_stat, (char*)Nextion_Ending);
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <nextion_uzunlar+0x24>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <nextion_uzunlar+0x28>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <nextion_uzunlar+0x2c>)
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4906      	ldr	r1, [pc, #24]	; (8001d18 <nextion_uzunlar+0x30>)
 8001d00:	4806      	ldr	r0, [pc, #24]	; (8001d1c <nextion_uzunlar+0x34>)
 8001d02:	f008 f8ab 	bl	8009e5c <siprintf>
	//HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion, strlen(Sending_Buffer_For_Nextion), 100);
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	2000000c 	.word	0x2000000c
 8001d10:	200023f4 	.word	0x200023f4
 8001d14:	20000040 	.word	0x20000040
 8001d18:	0800a8dc 	.word	0x0800a8dc
 8001d1c:	20002428 	.word	0x20002428

08001d20 <nextion_dortlu>:

void nextion_dortlu(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af02      	add	r7, sp, #8
	//Dörtlülerin durumu gönderiliyor..
	sprintf(Sending_Buffer_For_Nextion, "%s%c%s", dortlu, dortlu_stat,(char*)Nextion_Ending);
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <nextion_dortlu+0x38>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <nextion_dortlu+0x3c>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <nextion_dortlu+0x40>)
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	460b      	mov	r3, r1
 8001d36:	490b      	ldr	r1, [pc, #44]	; (8001d64 <nextion_dortlu+0x44>)
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <nextion_dortlu+0x48>)
 8001d3a:	f008 f88f 	bl	8009e5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion, strlen(Sending_Buffer_For_Nextion), 100);
 8001d3e:	480a      	ldr	r0, [pc, #40]	; (8001d68 <nextion_dortlu+0x48>)
 8001d40:	f7fe fa04 	bl	800014c <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	2364      	movs	r3, #100	; 0x64
 8001d4a:	4907      	ldr	r1, [pc, #28]	; (8001d68 <nextion_dortlu+0x48>)
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <nextion_dortlu+0x4c>)
 8001d4e:	f003 fbd4 	bl	80054fa <HAL_UART_Transmit>
}
 8001d52:	bf00      	nop
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	200023f5 	.word	0x200023f5
 8001d60:	20000040 	.word	0x20000040
 8001d64:	0800a8dc 	.word	0x0800a8dc
 8001d68:	20002428 	.word	0x20002428
 8001d6c:	20000288 	.word	0x20000288

08001d70 <nextion_sol_sinyal>:

void nextion_sol_sinyal(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af02      	add	r7, sp, #8
	//Sol sinyal gönderiliyor..
	sprintf(Sending_Buffer_For_Nextion, "%s%c%s",nex_sag_sinyal , sinyal_stat, (char*)Nextion_Ending);
 8001d76:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <nextion_sol_sinyal+0x38>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <nextion_sol_sinyal+0x3c>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <nextion_sol_sinyal+0x40>)
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	460b      	mov	r3, r1
 8001d86:	490b      	ldr	r1, [pc, #44]	; (8001db4 <nextion_sol_sinyal+0x44>)
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <nextion_sol_sinyal+0x48>)
 8001d8a:	f008 f867 	bl	8009e5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion, strlen(Sending_Buffer_For_Nextion), 100);
 8001d8e:	480a      	ldr	r0, [pc, #40]	; (8001db8 <nextion_sol_sinyal+0x48>)
 8001d90:	f7fe f9dc 	bl	800014c <strlen>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	2364      	movs	r3, #100	; 0x64
 8001d9a:	4907      	ldr	r1, [pc, #28]	; (8001db8 <nextion_sol_sinyal+0x48>)
 8001d9c:	4807      	ldr	r0, [pc, #28]	; (8001dbc <nextion_sol_sinyal+0x4c>)
 8001d9e:	f003 fbac 	bl	80054fa <HAL_UART_Transmit>
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000014 	.word	0x20000014
 8001dac:	200023f6 	.word	0x200023f6
 8001db0:	20000040 	.word	0x20000040
 8001db4:	0800a8dc 	.word	0x0800a8dc
 8001db8:	20002428 	.word	0x20002428
 8001dbc:	20000288 	.word	0x20000288

08001dc0 <nextion_sag_sinyal>:

void nextion_sag_sinyal(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af02      	add	r7, sp, #8
	//Sağ sinyal gönderiliyor..
	sprintf(Sending_Buffer_For_Nextion, "%s%c%s", nex_sol_sinyal, sinyal_stat, (char*)Nextion_Ending);
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <nextion_sag_sinyal+0x38>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <nextion_sag_sinyal+0x3c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <nextion_sag_sinyal+0x40>)
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	490b      	ldr	r1, [pc, #44]	; (8001e04 <nextion_sag_sinyal+0x44>)
 8001dd8:	480b      	ldr	r0, [pc, #44]	; (8001e08 <nextion_sag_sinyal+0x48>)
 8001dda:	f008 f83f 	bl	8009e5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion, strlen(Sending_Buffer_For_Nextion), 100);
 8001dde:	480a      	ldr	r0, [pc, #40]	; (8001e08 <nextion_sag_sinyal+0x48>)
 8001de0:	f7fe f9b4 	bl	800014c <strlen>
 8001de4:	4603      	mov	r3, r0
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	2364      	movs	r3, #100	; 0x64
 8001dea:	4907      	ldr	r1, [pc, #28]	; (8001e08 <nextion_sag_sinyal+0x48>)
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <nextion_sag_sinyal+0x4c>)
 8001dee:	f003 fb84 	bl	80054fa <HAL_UART_Transmit>
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000010 	.word	0x20000010
 8001dfc:	200023f6 	.word	0x200023f6
 8001e00:	20000040 	.word	0x20000040
 8001e04:	0800a8dc 	.word	0x0800a8dc
 8001e08:	20002428 	.word	0x20002428
 8001e0c:	20000288 	.word	0x20000288

08001e10 <Create_BCM_MsgPacket_For_Nextion>:

void Create_BCM_MsgPacket_For_Nextion() {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++) {
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	e052      	b.n	8001ec2 <Create_BCM_MsgPacket_For_Nextion+0xb2>
		switch (i) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b04      	cmp	r3, #4
 8001e20:	d84b      	bhi.n	8001eba <Create_BCM_MsgPacket_For_Nextion+0xaa>
 8001e22:	a201      	add	r2, pc, #4	; (adr r2, 8001e28 <Create_BCM_MsgPacket_For_Nextion+0x18>)
 8001e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e28:	08001e3d 	.word	0x08001e3d
 8001e2c:	08001e5d 	.word	0x08001e5d
 8001e30:	08001e7d 	.word	0x08001e7d
 8001e34:	08001e9d 	.word	0x08001e9d
 8001e38:	08001ebb 	.word	0x08001ebb
		case 0:
			if (CanRX[0] == 1) {
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <Create_BCM_MsgPacket_For_Nextion+0xc4>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d105      	bne.n	8001e50 <Create_BCM_MsgPacket_For_Nextion+0x40>
				//Sağ Sinyal aktif
				sinyal_stat = 49;
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <Create_BCM_MsgPacket_For_Nextion+0xc8>)
 8001e46:	2231      	movs	r2, #49	; 0x31
 8001e48:	701a      	strb	r2, [r3, #0]
				nextion_sol_sinyal();
 8001e4a:	f7ff ff91 	bl	8001d70 <nextion_sol_sinyal>

			} else {
				sinyal_stat = 48;
				nextion_sol_sinyal();
			}
			break;
 8001e4e:	e035      	b.n	8001ebc <Create_BCM_MsgPacket_For_Nextion+0xac>
				sinyal_stat = 48;
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <Create_BCM_MsgPacket_For_Nextion+0xc8>)
 8001e52:	2230      	movs	r2, #48	; 0x30
 8001e54:	701a      	strb	r2, [r3, #0]
				nextion_sol_sinyal();
 8001e56:	f7ff ff8b 	bl	8001d70 <nextion_sol_sinyal>
			break;
 8001e5a:	e02f      	b.n	8001ebc <Create_BCM_MsgPacket_For_Nextion+0xac>
		case 1:
			if (CanRX[1] == 1) {
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <Create_BCM_MsgPacket_For_Nextion+0xc4>)
 8001e5e:	785b      	ldrb	r3, [r3, #1]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <Create_BCM_MsgPacket_For_Nextion+0x60>
				//Sol Sinyal aktif
				sinyal_stat = 49;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <Create_BCM_MsgPacket_For_Nextion+0xc8>)
 8001e66:	2231      	movs	r2, #49	; 0x31
 8001e68:	701a      	strb	r2, [r3, #0]
				nextion_sag_sinyal();
 8001e6a:	f7ff ffa9 	bl	8001dc0 <nextion_sag_sinyal>
			} else {
				sinyal_stat = 48;
				nextion_sag_sinyal();

			}
			break;
 8001e6e:	e025      	b.n	8001ebc <Create_BCM_MsgPacket_For_Nextion+0xac>
				sinyal_stat = 48;
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <Create_BCM_MsgPacket_For_Nextion+0xc8>)
 8001e72:	2230      	movs	r2, #48	; 0x30
 8001e74:	701a      	strb	r2, [r3, #0]
				nextion_sag_sinyal();
 8001e76:	f7ff ffa3 	bl	8001dc0 <nextion_sag_sinyal>
			break;
 8001e7a:	e01f      	b.n	8001ebc <Create_BCM_MsgPacket_For_Nextion+0xac>
		case 2:
			if (CanRX[2] == 1) {
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <Create_BCM_MsgPacket_For_Nextion+0xc4>)
 8001e7e:	789b      	ldrb	r3, [r3, #2]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d105      	bne.n	8001e90 <Create_BCM_MsgPacket_For_Nextion+0x80>
				//Dörtlü Aktif
				dortlu_stat = 49;
 8001e84:	4b15      	ldr	r3, [pc, #84]	; (8001edc <Create_BCM_MsgPacket_For_Nextion+0xcc>)
 8001e86:	2231      	movs	r2, #49	; 0x31
 8001e88:	701a      	strb	r2, [r3, #0]
				nextion_dortlu();
 8001e8a:	f7ff ff49 	bl	8001d20 <nextion_dortlu>
			} else {
				dortlu_stat = 48;
				nextion_dortlu();
			}
			break;
 8001e8e:	e015      	b.n	8001ebc <Create_BCM_MsgPacket_For_Nextion+0xac>
				dortlu_stat = 48;
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <Create_BCM_MsgPacket_For_Nextion+0xcc>)
 8001e92:	2230      	movs	r2, #48	; 0x30
 8001e94:	701a      	strb	r2, [r3, #0]
				nextion_dortlu();
 8001e96:	f7ff ff43 	bl	8001d20 <nextion_dortlu>
			break;
 8001e9a:	e00f      	b.n	8001ebc <Create_BCM_MsgPacket_For_Nextion+0xac>
		case 3:
			if (CanRX[3] == 1) {
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <Create_BCM_MsgPacket_For_Nextion+0xc4>)
 8001e9e:	78db      	ldrb	r3, [r3, #3]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <Create_BCM_MsgPacket_For_Nextion+0xa0>
				//Far aktif
				far_stat = 49;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <Create_BCM_MsgPacket_For_Nextion+0xd0>)
 8001ea6:	2231      	movs	r2, #49	; 0x31
 8001ea8:	701a      	strb	r2, [r3, #0]
				nextion_uzunlar();
 8001eaa:	f7ff ff1d 	bl	8001ce8 <nextion_uzunlar>
		case 4:
			if (CanRX[4] == 1) {

			}
		default:
			break;
 8001eae:	e004      	b.n	8001eba <Create_BCM_MsgPacket_For_Nextion+0xaa>
				far_stat = 48;
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <Create_BCM_MsgPacket_For_Nextion+0xd0>)
 8001eb2:	2230      	movs	r2, #48	; 0x30
 8001eb4:	701a      	strb	r2, [r3, #0]
				nextion_uzunlar();
 8001eb6:	f7ff ff17 	bl	8001ce8 <nextion_uzunlar>
			break;
 8001eba:	bf00      	nop
	for (int i = 0; i < 8; i++) {
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	dda9      	ble.n	8001e1c <Create_BCM_MsgPacket_For_Nextion+0xc>
		}

	}
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200023ec 	.word	0x200023ec
 8001ed8:	200023f6 	.word	0x200023f6
 8001edc:	200023f5 	.word	0x200023f5
 8001ee0:	200023f4 	.word	0x200023f4

08001ee4 <Create_SPEED_MsgPacket_For_Nextion>:
void Create_SPEED_MsgPacket_For_Nextion() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af02      	add	r7, sp, #8
	speed = CanRX[0];
 8001eea:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <Create_SPEED_MsgPacket_For_Nextion+0x4c>)
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <Create_SPEED_MsgPacket_For_Nextion+0x50>)
 8001ef0:	701a      	strb	r2, [r3, #0]
	sd_card[1]=speed;
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <Create_SPEED_MsgPacket_For_Nextion+0x50>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <Create_SPEED_MsgPacket_For_Nextion+0x54>)
 8001efa:	605a      	str	r2, [r3, #4]
		sprintf(Sending_Buffer_For_Nextion, "%s%u%s", Nextion_Speed, speed, Nextion_Ending);
 8001efc:	4b0f      	ldr	r3, [pc, #60]	; (8001f3c <Create_SPEED_MsgPacket_For_Nextion+0x58>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <Create_SPEED_MsgPacket_For_Nextion+0x50>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <Create_SPEED_MsgPacket_For_Nextion+0x5c>)
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	490d      	ldr	r1, [pc, #52]	; (8001f44 <Create_SPEED_MsgPacket_For_Nextion+0x60>)
 8001f0e:	480e      	ldr	r0, [pc, #56]	; (8001f48 <Create_SPEED_MsgPacket_For_Nextion+0x64>)
 8001f10:	f007 ffa4 	bl	8009e5c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion, strlen(Sending_Buffer_For_Nextion), 100);
 8001f14:	480c      	ldr	r0, [pc, #48]	; (8001f48 <Create_SPEED_MsgPacket_For_Nextion+0x64>)
 8001f16:	f7fe f919 	bl	800014c <strlen>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	2364      	movs	r3, #100	; 0x64
 8001f20:	4909      	ldr	r1, [pc, #36]	; (8001f48 <Create_SPEED_MsgPacket_For_Nextion+0x64>)
 8001f22:	480a      	ldr	r0, [pc, #40]	; (8001f4c <Create_SPEED_MsgPacket_For_Nextion+0x68>)
 8001f24:	f003 fae9 	bl	80054fa <HAL_UART_Transmit>


}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	200023ec 	.word	0x200023ec
 8001f34:	20002421 	.word	0x20002421
 8001f38:	20002370 	.word	0x20002370
 8001f3c:	20000024 	.word	0x20000024
 8001f40:	20000040 	.word	0x20000040
 8001f44:	0800a8e4 	.word	0x0800a8e4
 8001f48:	20002428 	.word	0x20002428
 8001f4c:	20000288 	.word	0x20000288

08001f50 <Create_CURRENT_MsgPacket_For_Nextion>:
void Create_CURRENT_MsgPacket_For_Nextion() {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af02      	add	r7, sp, #8
	current = ((CanRX[0] * 256) + (CanRX[1] * 1000) + (CanRX[2] * 256) + CanRX[3]);
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <Create_CURRENT_MsgPacket_For_Nextion+0x70>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	021a      	lsls	r2, r3, #8
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <Create_CURRENT_MsgPacket_For_Nextion+0x70>)
 8001f5e:	785b      	ldrb	r3, [r3, #1]
 8001f60:	4619      	mov	r1, r3
 8001f62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f66:	fb01 f303 	mul.w	r3, r1, r3
 8001f6a:	441a      	add	r2, r3
 8001f6c:	4b14      	ldr	r3, [pc, #80]	; (8001fc0 <Create_CURRENT_MsgPacket_For_Nextion+0x70>)
 8001f6e:	789b      	ldrb	r3, [r3, #2]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	4413      	add	r3, r2
 8001f74:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <Create_CURRENT_MsgPacket_For_Nextion+0x70>)
 8001f76:	78d2      	ldrb	r2, [r2, #3]
 8001f78:	4413      	add	r3, r2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <Create_CURRENT_MsgPacket_For_Nextion+0x74>)
 8001f7e:	601a      	str	r2, [r3, #0]
	current = current/1000;
 8001f80:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <Create_CURRENT_MsgPacket_For_Nextion+0x74>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <Create_CURRENT_MsgPacket_For_Nextion+0x78>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	099b      	lsrs	r3, r3, #6
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	; (8001fc4 <Create_CURRENT_MsgPacket_For_Nextion+0x74>)
 8001f8e:	6013      	str	r3, [r2, #0]
		/*Nextion Ekrana veri basılıyor..*/

		sprintf(Sending_Buffer_For_Nextion, "%s%lu%s", Nextion_Current, current, Nextion_Ending);
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <Create_CURRENT_MsgPacket_For_Nextion+0x7c>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <Create_CURRENT_MsgPacket_For_Nextion+0x74>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	490d      	ldr	r1, [pc, #52]	; (8001fd0 <Create_CURRENT_MsgPacket_For_Nextion+0x80>)
 8001f9a:	9100      	str	r1, [sp, #0]
 8001f9c:	490d      	ldr	r1, [pc, #52]	; (8001fd4 <Create_CURRENT_MsgPacket_For_Nextion+0x84>)
 8001f9e:	480e      	ldr	r0, [pc, #56]	; (8001fd8 <Create_CURRENT_MsgPacket_For_Nextion+0x88>)
 8001fa0:	f007 ff5c 	bl	8009e5c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion, strlen(Sending_Buffer_For_Nextion), 100);
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <Create_CURRENT_MsgPacket_For_Nextion+0x88>)
 8001fa6:	f7fe f8d1 	bl	800014c <strlen>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	2364      	movs	r3, #100	; 0x64
 8001fb0:	4909      	ldr	r1, [pc, #36]	; (8001fd8 <Create_CURRENT_MsgPacket_For_Nextion+0x88>)
 8001fb2:	480a      	ldr	r0, [pc, #40]	; (8001fdc <Create_CURRENT_MsgPacket_For_Nextion+0x8c>)
 8001fb4:	f003 faa1 	bl	80054fa <HAL_UART_Transmit>

}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200023ec 	.word	0x200023ec
 8001fc4:	20002424 	.word	0x20002424
 8001fc8:	10624dd3 	.word	0x10624dd3
 8001fcc:	20000028 	.word	0x20000028
 8001fd0:	20000040 	.word	0x20000040
 8001fd4:	0800a8ec 	.word	0x0800a8ec
 8001fd8:	20002428 	.word	0x20002428
 8001fdc:	20000288 	.word	0x20000288

08001fe0 <Nextion_Fault>:
void Nextion_Fault() {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af02      	add	r7, sp, #8
	//VCU İletişim Hatası Yok
	sprintf(Sending_Buffer_For_Nextion, "%s%d%s", H_VCU, 1, Nextion_Ending);
 8001fe6:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <Nextion_Fault+0xe0>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <Nextion_Fault+0xe4>)
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	2301      	movs	r3, #1
 8001ff0:	4935      	ldr	r1, [pc, #212]	; (80020c8 <Nextion_Fault+0xe8>)
 8001ff2:	4836      	ldr	r0, [pc, #216]	; (80020cc <Nextion_Fault+0xec>)
 8001ff4:	f007 ff32 	bl	8009e5c <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
			strlen(Sending_Buffer_For_Nextion), 100);
 8001ff8:	4834      	ldr	r0, [pc, #208]	; (80020cc <Nextion_Fault+0xec>)
 8001ffa:	f7fe f8a7 	bl	800014c <strlen>
 8001ffe:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 8002000:	b29a      	uxth	r2, r3
 8002002:	2364      	movs	r3, #100	; 0x64
 8002004:	4931      	ldr	r1, [pc, #196]	; (80020cc <Nextion_Fault+0xec>)
 8002006:	4832      	ldr	r0, [pc, #200]	; (80020d0 <Nextion_Fault+0xf0>)
 8002008:	f003 fa77 	bl	80054fa <HAL_UART_Transmit>

	//Hata sinyal gönderiliyor..
	if (fault[2] == 1) {
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <Nextion_Fault+0xf4>)
 800200e:	789b      	ldrb	r3, [r3, #2]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d113      	bne.n	800203c <Nextion_Fault+0x5c>
		//BMS İletişim Hatası
		sprintf(Sending_Buffer_For_Nextion, "%s%d%s", H_BMS, 1, Nextion_Ending);
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <Nextion_Fault+0xf8>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <Nextion_Fault+0xe4>)
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2301      	movs	r3, #1
 800201e:	492a      	ldr	r1, [pc, #168]	; (80020c8 <Nextion_Fault+0xe8>)
 8002020:	482a      	ldr	r0, [pc, #168]	; (80020cc <Nextion_Fault+0xec>)
 8002022:	f007 ff1b 	bl	8009e5c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
				strlen(Sending_Buffer_For_Nextion), 100);
 8002026:	4829      	ldr	r0, [pc, #164]	; (80020cc <Nextion_Fault+0xec>)
 8002028:	f7fe f890 	bl	800014c <strlen>
 800202c:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 800202e:	b29a      	uxth	r2, r3
 8002030:	2364      	movs	r3, #100	; 0x64
 8002032:	4926      	ldr	r1, [pc, #152]	; (80020cc <Nextion_Fault+0xec>)
 8002034:	4826      	ldr	r0, [pc, #152]	; (80020d0 <Nextion_Fault+0xf0>)
 8002036:	f003 fa60 	bl	80054fa <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
					strlen(Sending_Buffer_For_Nextion), 100);
		}

	}
}
 800203a:	e03d      	b.n	80020b8 <Nextion_Fault+0xd8>
		sprintf(Sending_Buffer_For_Nextion, "%s%d%s", H_BMS, 0, Nextion_Ending);
 800203c:	4b26      	ldr	r3, [pc, #152]	; (80020d8 <Nextion_Fault+0xf8>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <Nextion_Fault+0xe4>)
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	2300      	movs	r3, #0
 8002046:	4920      	ldr	r1, [pc, #128]	; (80020c8 <Nextion_Fault+0xe8>)
 8002048:	4820      	ldr	r0, [pc, #128]	; (80020cc <Nextion_Fault+0xec>)
 800204a:	f007 ff07 	bl	8009e5c <siprintf>
				strlen(Sending_Buffer_For_Nextion), 100);
 800204e:	481f      	ldr	r0, [pc, #124]	; (80020cc <Nextion_Fault+0xec>)
 8002050:	f7fe f87c 	bl	800014c <strlen>
 8002054:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 8002056:	b29a      	uxth	r2, r3
 8002058:	2364      	movs	r3, #100	; 0x64
 800205a:	491c      	ldr	r1, [pc, #112]	; (80020cc <Nextion_Fault+0xec>)
 800205c:	481c      	ldr	r0, [pc, #112]	; (80020d0 <Nextion_Fault+0xf0>)
 800205e:	f003 fa4c 	bl	80054fa <HAL_UART_Transmit>
		if (fault[0] == 1) {
 8002062:	4b1c      	ldr	r3, [pc, #112]	; (80020d4 <Nextion_Fault+0xf4>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d113      	bne.n	8002092 <Nextion_Fault+0xb2>
			sprintf(Sending_Buffer_For_Nextion, "%s%d%s", H_BCM, 1,
 800206a:	4b1c      	ldr	r3, [pc, #112]	; (80020dc <Nextion_Fault+0xfc>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <Nextion_Fault+0xe4>)
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2301      	movs	r3, #1
 8002074:	4914      	ldr	r1, [pc, #80]	; (80020c8 <Nextion_Fault+0xe8>)
 8002076:	4815      	ldr	r0, [pc, #84]	; (80020cc <Nextion_Fault+0xec>)
 8002078:	f007 fef0 	bl	8009e5c <siprintf>
					strlen(Sending_Buffer_For_Nextion), 100);
 800207c:	4813      	ldr	r0, [pc, #76]	; (80020cc <Nextion_Fault+0xec>)
 800207e:	f7fe f865 	bl	800014c <strlen>
 8002082:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 8002084:	b29a      	uxth	r2, r3
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	4910      	ldr	r1, [pc, #64]	; (80020cc <Nextion_Fault+0xec>)
 800208a:	4811      	ldr	r0, [pc, #68]	; (80020d0 <Nextion_Fault+0xf0>)
 800208c:	f003 fa35 	bl	80054fa <HAL_UART_Transmit>
}
 8002090:	e012      	b.n	80020b8 <Nextion_Fault+0xd8>
			sprintf(Sending_Buffer_For_Nextion, "%s%d%s", H_BCM, 0,
 8002092:	4b12      	ldr	r3, [pc, #72]	; (80020dc <Nextion_Fault+0xfc>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <Nextion_Fault+0xe4>)
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2300      	movs	r3, #0
 800209c:	490a      	ldr	r1, [pc, #40]	; (80020c8 <Nextion_Fault+0xe8>)
 800209e:	480b      	ldr	r0, [pc, #44]	; (80020cc <Nextion_Fault+0xec>)
 80020a0:	f007 fedc 	bl	8009e5c <siprintf>
					strlen(Sending_Buffer_For_Nextion), 100);
 80020a4:	4809      	ldr	r0, [pc, #36]	; (80020cc <Nextion_Fault+0xec>)
 80020a6:	f7fe f851 	bl	800014c <strlen>
 80020aa:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart2, (uint8_t*) Sending_Buffer_For_Nextion,
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	2364      	movs	r3, #100	; 0x64
 80020b0:	4906      	ldr	r1, [pc, #24]	; (80020cc <Nextion_Fault+0xec>)
 80020b2:	4807      	ldr	r0, [pc, #28]	; (80020d0 <Nextion_Fault+0xf0>)
 80020b4:	f003 fa21 	bl	80054fa <HAL_UART_Transmit>
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000020 	.word	0x20000020
 80020c4:	20000040 	.word	0x20000040
 80020c8:	0800a8f4 	.word	0x0800a8f4
 80020cc:	20002428 	.word	0x20002428
 80020d0:	20000288 	.word	0x20000288
 80020d4:	2000245c 	.word	0x2000245c
 80020d8:	20000018 	.word	0x20000018
 80020dc:	2000001c 	.word	0x2000001c

080020e0 <Nextion_Incomming_Packet_ID_From_CANBUS>:


void Nextion_Incomming_Packet_ID_From_CANBUS(uint8_t CAN_ID) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
	switch (CAN_ID) {
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	2b36      	cmp	r3, #54	; 0x36
 80020ee:	dc2f      	bgt.n	8002150 <Nextion_Incomming_Packet_ID_From_CANBUS+0x70>
 80020f0:	2b23      	cmp	r3, #35	; 0x23
 80020f2:	db41      	blt.n	8002178 <Nextion_Incomming_Packet_ID_From_CANBUS+0x98>
 80020f4:	3b23      	subs	r3, #35	; 0x23
 80020f6:	2b13      	cmp	r3, #19
 80020f8:	d83e      	bhi.n	8002178 <Nextion_Incomming_Packet_ID_From_CANBUS+0x98>
 80020fa:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <Nextion_Incomming_Packet_ID_From_CANBUS+0x20>)
 80020fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002100:	08002167 	.word	0x08002167
 8002104:	08002179 	.word	0x08002179
 8002108:	08002179 	.word	0x08002179
 800210c:	08002179 	.word	0x08002179
 8002110:	08002157 	.word	0x08002157
 8002114:	08002179 	.word	0x08002179
 8002118:	08002179 	.word	0x08002179
 800211c:	08002179 	.word	0x08002179
 8002120:	08002179 	.word	0x08002179
 8002124:	08002179 	.word	0x08002179
 8002128:	08002179 	.word	0x08002179
 800212c:	08002179 	.word	0x08002179
 8002130:	08002179 	.word	0x08002179
 8002134:	08002173 	.word	0x08002173
 8002138:	08002179 	.word	0x08002179
 800213c:	08002179 	.word	0x08002179
 8002140:	08002179 	.word	0x08002179
 8002144:	08002179 	.word	0x08002179
 8002148:	08002179 	.word	0x08002179
 800214c:	08002161 	.word	0x08002161
 8002150:	2b50      	cmp	r3, #80	; 0x50
 8002152:	d00b      	beq.n	800216c <Nextion_Incomming_Packet_ID_From_CANBUS+0x8c>
	case Current_ID:
		Create_CURRENT_MsgPacket_For_Nextion();/*KODLARI TAMAMLANDI TEST EDİLECEK*/
		break;
	}

}
 8002154:	e010      	b.n	8002178 <Nextion_Incomming_Packet_ID_From_CANBUS+0x98>
		Create_BMSMsgPacket_For_Nextion();/*TÜM BMS KODLARI TAMAMLANDI*/
 8002156:	f7ff fd39 	bl	8001bcc <Create_BMSMsgPacket_For_Nextion>
		Nextion_Fault();
 800215a:	f7ff ff41 	bl	8001fe0 <Nextion_Fault>
		break;
 800215e:	e00b      	b.n	8002178 <Nextion_Incomming_Packet_ID_From_CANBUS+0x98>
		Nextion_Fault();
 8002160:	f7ff ff3e 	bl	8001fe0 <Nextion_Fault>
		break;
 8002164:	e008      	b.n	8002178 <Nextion_Incomming_Packet_ID_From_CANBUS+0x98>
		Create_BCM_MsgPacket_For_Nextion();/*KODLARI TAMAMLANDI TEST EDİLECEK*/
 8002166:	f7ff fe53 	bl	8001e10 <Create_BCM_MsgPacket_For_Nextion>
		break;
 800216a:	e005      	b.n	8002178 <Nextion_Incomming_Packet_ID_From_CANBUS+0x98>
		Create_SPEED_MsgPacket_For_Nextion();/*KODLARI TAMAMLANDI TEEST EDİLECEK*/
 800216c:	f7ff feba 	bl	8001ee4 <Create_SPEED_MsgPacket_For_Nextion>
		break;
 8002170:	e002      	b.n	8002178 <Nextion_Incomming_Packet_ID_From_CANBUS+0x98>
		Create_CURRENT_MsgPacket_For_Nextion();/*KODLARI TAMAMLANDI TEST EDİLECEK*/
 8002172:	f7ff feed 	bl	8001f50 <Create_CURRENT_MsgPacket_For_Nextion>
		break;
 8002176:	bf00      	nop
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <Create_BMS_MsgPacket_For_LORA>:
char xchar[2]={'x','\0'};
char dotchar[2]={',','\0'};

char LORA_Sending_Buffer[200];

void Create_BMS_MsgPacket_For_LORA(void) {
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	b0b7      	sub	sp, #220	; 0xdc
 8002184:	af1c      	add	r7, sp, #112	; 0x70
	switch (CanRX[0]) {
 8002186:	4b7e      	ldr	r3, [pc, #504]	; (8002380 <Create_BMS_MsgPacket_For_LORA+0x200>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	3b01      	subs	r3, #1
 800218c:	2b04      	cmp	r3, #4
 800218e:	d868      	bhi.n	8002262 <Create_BMS_MsgPacket_For_LORA+0xe2>
 8002190:	a201      	add	r2, pc, #4	; (adr r2, 8002198 <Create_BMS_MsgPacket_For_LORA+0x18>)
 8002192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002196:	bf00      	nop
 8002198:	080021ad 	.word	0x080021ad
 800219c:	080021d3 	.word	0x080021d3
 80021a0:	080021f7 	.word	0x080021f7
 80021a4:	0800221b 	.word	0x0800221b
 80021a8:	0800223f 	.word	0x0800223f
	case 1:
		//Max,min,ort,motor,sürücü temp
		for (int i = 0; i < 7; i++) {
 80021ac:	2300      	movs	r3, #0
 80021ae:	667b      	str	r3, [r7, #100]	; 0x64
 80021b0:	e00b      	b.n	80021ca <Create_BMS_MsgPacket_For_LORA+0x4a>
			LORA_Instant_Buffer[i] = CanRX[i + 1];
 80021b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021b4:	3301      	adds	r3, #1
 80021b6:	4a72      	ldr	r2, [pc, #456]	; (8002380 <Create_BMS_MsgPacket_For_LORA+0x200>)
 80021b8:	5cd1      	ldrb	r1, [r2, r3]
 80021ba:	4a72      	ldr	r2, [pc, #456]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80021bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021be:	4413      	add	r3, r2
 80021c0:	460a      	mov	r2, r1
 80021c2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 7; i++) {
 80021c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021c6:	3301      	adds	r3, #1
 80021c8:	667b      	str	r3, [r7, #100]	; 0x64
 80021ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	ddf0      	ble.n	80021b2 <Create_BMS_MsgPacket_For_LORA+0x32>
		}
		break;
 80021d0:	e047      	b.n	8002262 <Create_BMS_MsgPacket_For_LORA+0xe2>
	case 2:
		//total volt, soc ,battery voltage 1-5
		for (int i = 0; i < 7; i++) {
 80021d2:	2300      	movs	r3, #0
 80021d4:	663b      	str	r3, [r7, #96]	; 0x60
 80021d6:	e00a      	b.n	80021ee <Create_BMS_MsgPacket_For_LORA+0x6e>
			LORA_Instant_Buffer[i + 5] = CanRX[i + 1];
 80021d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021de:	3305      	adds	r3, #5
 80021e0:	4967      	ldr	r1, [pc, #412]	; (8002380 <Create_BMS_MsgPacket_For_LORA+0x200>)
 80021e2:	5c89      	ldrb	r1, [r1, r2]
 80021e4:	4a67      	ldr	r2, [pc, #412]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80021e6:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 7; i++) {
 80021e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021ea:	3301      	adds	r3, #1
 80021ec:	663b      	str	r3, [r7, #96]	; 0x60
 80021ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f0:	2b06      	cmp	r3, #6
 80021f2:	ddf1      	ble.n	80021d8 <Create_BMS_MsgPacket_For_LORA+0x58>
		}
		break;
 80021f4:	e035      	b.n	8002262 <Create_BMS_MsgPacket_For_LORA+0xe2>
	case 3:
		//battery voltage 6-12
		for (int i = 0; i < 7; i++) {
 80021f6:	2300      	movs	r3, #0
 80021f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021fa:	e00a      	b.n	8002212 <Create_BMS_MsgPacket_For_LORA+0x92>
			LORA_Instant_Buffer[i + 12] = CanRX[i + 1];
 80021fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002202:	330c      	adds	r3, #12
 8002204:	495e      	ldr	r1, [pc, #376]	; (8002380 <Create_BMS_MsgPacket_For_LORA+0x200>)
 8002206:	5c89      	ldrb	r1, [r1, r2]
 8002208:	4a5e      	ldr	r2, [pc, #376]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 800220a:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 7; i++) {
 800220c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800220e:	3301      	adds	r3, #1
 8002210:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002214:	2b06      	cmp	r3, #6
 8002216:	ddf1      	ble.n	80021fc <Create_BMS_MsgPacket_For_LORA+0x7c>
		}
		break;
 8002218:	e023      	b.n	8002262 <Create_BMS_MsgPacket_For_LORA+0xe2>
	case 4:
		//battery voltage 13-20
		for (int i = 0; i < 7; i++) {
 800221a:	2300      	movs	r3, #0
 800221c:	65bb      	str	r3, [r7, #88]	; 0x58
 800221e:	e00a      	b.n	8002236 <Create_BMS_MsgPacket_For_LORA+0xb6>
			LORA_Instant_Buffer[i + 19] = CanRX[i + 1];
 8002220:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002226:	3313      	adds	r3, #19
 8002228:	4955      	ldr	r1, [pc, #340]	; (8002380 <Create_BMS_MsgPacket_For_LORA+0x200>)
 800222a:	5c89      	ldrb	r1, [r1, r2]
 800222c:	4a55      	ldr	r2, [pc, #340]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 800222e:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 7; i++) {
 8002230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002232:	3301      	adds	r3, #1
 8002234:	65bb      	str	r3, [r7, #88]	; 0x58
 8002236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002238:	2b06      	cmp	r3, #6
 800223a:	ddf1      	ble.n	8002220 <Create_BMS_MsgPacket_For_LORA+0xa0>
		}
		break;
 800223c:	e011      	b.n	8002262 <Create_BMS_MsgPacket_For_LORA+0xe2>
	case 5:  // battery voltage 21-24
		for (int i = 0; i < 6; i++) {
 800223e:	2300      	movs	r3, #0
 8002240:	657b      	str	r3, [r7, #84]	; 0x54
 8002242:	e00a      	b.n	800225a <Create_BMS_MsgPacket_For_LORA+0xda>
			LORA_Instant_Buffer[i + 26] = CanRX[i + 1];
 8002244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002246:	1c5a      	adds	r2, r3, #1
 8002248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224a:	331a      	adds	r3, #26
 800224c:	494c      	ldr	r1, [pc, #304]	; (8002380 <Create_BMS_MsgPacket_For_LORA+0x200>)
 800224e:	5c89      	ldrb	r1, [r1, r2]
 8002250:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002252:	54d1      	strb	r1, [r2, r3]
		for (int i = 0; i < 6; i++) {
 8002254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002256:	3301      	adds	r3, #1
 8002258:	657b      	str	r3, [r7, #84]	; 0x54
 800225a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800225c:	2b05      	cmp	r3, #5
 800225e:	ddf1      	ble.n	8002244 <Create_BMS_MsgPacket_For_LORA+0xc4>
		}
		break;
 8002260:	bf00      	nop
	}
	sprintf(LORA_BMS_Buffer,
			"%u,0,0,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,%u,",
			LORA_Instant_Buffer[0],LORA_Instant_Buffer[3],
 8002262:	4b48      	ldr	r3, [pc, #288]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002264:	781b      	ldrb	r3, [r3, #0]
	sprintf(LORA_BMS_Buffer,
 8002266:	469c      	mov	ip, r3
			LORA_Instant_Buffer[0],LORA_Instant_Buffer[3],
 8002268:	4b46      	ldr	r3, [pc, #280]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 800226a:	78db      	ldrb	r3, [r3, #3]
	sprintf(LORA_BMS_Buffer,
 800226c:	469e      	mov	lr, r3
			LORA_Instant_Buffer[4], LORA_Instant_Buffer[5],
 800226e:	4b45      	ldr	r3, [pc, #276]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002270:	791b      	ldrb	r3, [r3, #4]
	sprintf(LORA_BMS_Buffer,
 8002272:	64fb      	str	r3, [r7, #76]	; 0x4c
			LORA_Instant_Buffer[4], LORA_Instant_Buffer[5],
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002276:	795b      	ldrb	r3, [r3, #5]
	sprintf(LORA_BMS_Buffer,
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
			LORA_Instant_Buffer[6], LORA_Instant_Buffer[7],
 800227a:	4b42      	ldr	r3, [pc, #264]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 800227c:	799b      	ldrb	r3, [r3, #6]
	sprintf(LORA_BMS_Buffer,
 800227e:	647b      	str	r3, [r7, #68]	; 0x44
			LORA_Instant_Buffer[6], LORA_Instant_Buffer[7],
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002282:	79db      	ldrb	r3, [r3, #7]
	sprintf(LORA_BMS_Buffer,
 8002284:	643b      	str	r3, [r7, #64]	; 0x40
			LORA_Instant_Buffer[8], LORA_Instant_Buffer[9],
 8002286:	4b3f      	ldr	r3, [pc, #252]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002288:	7a1b      	ldrb	r3, [r3, #8]
	sprintf(LORA_BMS_Buffer,
 800228a:	63fb      	str	r3, [r7, #60]	; 0x3c
			LORA_Instant_Buffer[8], LORA_Instant_Buffer[9],
 800228c:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 800228e:	7a5b      	ldrb	r3, [r3, #9]
	sprintf(LORA_BMS_Buffer,
 8002290:	63bb      	str	r3, [r7, #56]	; 0x38
			LORA_Instant_Buffer[10], LORA_Instant_Buffer[11],
 8002292:	4b3c      	ldr	r3, [pc, #240]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002294:	7a9b      	ldrb	r3, [r3, #10]
	sprintf(LORA_BMS_Buffer,
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
			LORA_Instant_Buffer[10], LORA_Instant_Buffer[11],
 8002298:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 800229a:	7adb      	ldrb	r3, [r3, #11]
	sprintf(LORA_BMS_Buffer,
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
			LORA_Instant_Buffer[12], LORA_Instant_Buffer[13],
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022a0:	7b1b      	ldrb	r3, [r3, #12]
	sprintf(LORA_BMS_Buffer,
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			LORA_Instant_Buffer[12], LORA_Instant_Buffer[13],
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022a6:	7b5b      	ldrb	r3, [r3, #13]
	sprintf(LORA_BMS_Buffer,
 80022a8:	62bb      	str	r3, [r7, #40]	; 0x28
			LORA_Instant_Buffer[14], LORA_Instant_Buffer[15],
 80022aa:	4b36      	ldr	r3, [pc, #216]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022ac:	7b9b      	ldrb	r3, [r3, #14]
	sprintf(LORA_BMS_Buffer,
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
			LORA_Instant_Buffer[14], LORA_Instant_Buffer[15],
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022b2:	7bdb      	ldrb	r3, [r3, #15]
	sprintf(LORA_BMS_Buffer,
 80022b4:	623b      	str	r3, [r7, #32]
			LORA_Instant_Buffer[16], LORA_Instant_Buffer[17],
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022b8:	7c1b      	ldrb	r3, [r3, #16]
	sprintf(LORA_BMS_Buffer,
 80022ba:	61fb      	str	r3, [r7, #28]
			LORA_Instant_Buffer[16], LORA_Instant_Buffer[17],
 80022bc:	4b31      	ldr	r3, [pc, #196]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022be:	7c5b      	ldrb	r3, [r3, #17]
	sprintf(LORA_BMS_Buffer,
 80022c0:	61bb      	str	r3, [r7, #24]
			LORA_Instant_Buffer[18], LORA_Instant_Buffer[19],
 80022c2:	4b30      	ldr	r3, [pc, #192]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022c4:	7c9b      	ldrb	r3, [r3, #18]
	sprintf(LORA_BMS_Buffer,
 80022c6:	617b      	str	r3, [r7, #20]
			LORA_Instant_Buffer[18], LORA_Instant_Buffer[19],
 80022c8:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022ca:	7cdb      	ldrb	r3, [r3, #19]
	sprintf(LORA_BMS_Buffer,
 80022cc:	613b      	str	r3, [r7, #16]
			LORA_Instant_Buffer[20], LORA_Instant_Buffer[21],
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022d0:	7d1b      	ldrb	r3, [r3, #20]
	sprintf(LORA_BMS_Buffer,
 80022d2:	60fb      	str	r3, [r7, #12]
			LORA_Instant_Buffer[20], LORA_Instant_Buffer[21],
 80022d4:	4b2b      	ldr	r3, [pc, #172]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022d6:	7d5b      	ldrb	r3, [r3, #21]
	sprintf(LORA_BMS_Buffer,
 80022d8:	60bb      	str	r3, [r7, #8]
			LORA_Instant_Buffer[22], LORA_Instant_Buffer[23],
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022dc:	7d9b      	ldrb	r3, [r3, #22]
	sprintf(LORA_BMS_Buffer,
 80022de:	607b      	str	r3, [r7, #4]
			LORA_Instant_Buffer[22], LORA_Instant_Buffer[23],
 80022e0:	4b28      	ldr	r3, [pc, #160]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022e2:	7ddb      	ldrb	r3, [r3, #23]
	sprintf(LORA_BMS_Buffer,
 80022e4:	603b      	str	r3, [r7, #0]
			LORA_Instant_Buffer[24], LORA_Instant_Buffer[25],
 80022e6:	4b27      	ldr	r3, [pc, #156]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022e8:	7e1b      	ldrb	r3, [r3, #24]
	sprintf(LORA_BMS_Buffer,
 80022ea:	461e      	mov	r6, r3
			LORA_Instant_Buffer[24], LORA_Instant_Buffer[25],
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022ee:	7e5b      	ldrb	r3, [r3, #25]
	sprintf(LORA_BMS_Buffer,
 80022f0:	461d      	mov	r5, r3
			LORA_Instant_Buffer[26], LORA_Instant_Buffer[27],
 80022f2:	4b24      	ldr	r3, [pc, #144]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022f4:	7e9b      	ldrb	r3, [r3, #26]
	sprintf(LORA_BMS_Buffer,
 80022f6:	461c      	mov	r4, r3
			LORA_Instant_Buffer[26], LORA_Instant_Buffer[27],
 80022f8:	4b22      	ldr	r3, [pc, #136]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 80022fa:	7edb      	ldrb	r3, [r3, #27]
	sprintf(LORA_BMS_Buffer,
 80022fc:	4618      	mov	r0, r3
			LORA_Instant_Buffer[28],LORA_Instant_Buffer[29],
 80022fe:	4b21      	ldr	r3, [pc, #132]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002300:	7f1b      	ldrb	r3, [r3, #28]
	sprintf(LORA_BMS_Buffer,
 8002302:	4619      	mov	r1, r3
			LORA_Instant_Buffer[28],LORA_Instant_Buffer[29],
 8002304:	4b1f      	ldr	r3, [pc, #124]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 8002306:	7f5b      	ldrb	r3, [r3, #29]
	sprintf(LORA_BMS_Buffer,
 8002308:	461a      	mov	r2, r3
			LORA_Instant_Buffer[30]/*LORA_Instant_Buffer[31]*/);
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <Create_BMS_MsgPacket_For_LORA+0x204>)
 800230c:	7f9b      	ldrb	r3, [r3, #30]
	sprintf(LORA_BMS_Buffer,
 800230e:	931a      	str	r3, [sp, #104]	; 0x68
 8002310:	9219      	str	r2, [sp, #100]	; 0x64
 8002312:	9118      	str	r1, [sp, #96]	; 0x60
 8002314:	9017      	str	r0, [sp, #92]	; 0x5c
 8002316:	9416      	str	r4, [sp, #88]	; 0x58
 8002318:	9515      	str	r5, [sp, #84]	; 0x54
 800231a:	9614      	str	r6, [sp, #80]	; 0x50
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	9213      	str	r2, [sp, #76]	; 0x4c
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	9212      	str	r2, [sp, #72]	; 0x48
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	9211      	str	r2, [sp, #68]	; 0x44
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	9210      	str	r2, [sp, #64]	; 0x40
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	920f      	str	r2, [sp, #60]	; 0x3c
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	920e      	str	r2, [sp, #56]	; 0x38
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	920d      	str	r2, [sp, #52]	; 0x34
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	920c      	str	r2, [sp, #48]	; 0x30
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002342:	920a      	str	r2, [sp, #40]	; 0x28
 8002344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002346:	9209      	str	r2, [sp, #36]	; 0x24
 8002348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234a:	9208      	str	r2, [sp, #32]
 800234c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800234e:	9207      	str	r2, [sp, #28]
 8002350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002352:	9206      	str	r2, [sp, #24]
 8002354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002356:	9205      	str	r2, [sp, #20]
 8002358:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235a:	9204      	str	r2, [sp, #16]
 800235c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800235e:	9203      	str	r2, [sp, #12]
 8002360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002362:	9202      	str	r2, [sp, #8]
 8002364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002366:	9201      	str	r2, [sp, #4]
 8002368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	4673      	mov	r3, lr
 800236e:	4662      	mov	r2, ip
 8002370:	4905      	ldr	r1, [pc, #20]	; (8002388 <Create_BMS_MsgPacket_For_LORA+0x208>)
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <Create_BMS_MsgPacket_For_LORA+0x20c>)
 8002374:	f007 fd72 	bl	8009e5c <siprintf>

}
 8002378:	bf00      	nop
 800237a:	376c      	adds	r7, #108	; 0x6c
 800237c:	46bd      	mov	sp, r7
 800237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002380:	200023ec 	.word	0x200023ec
 8002384:	20002464 	.word	0x20002464
 8002388:	0800a8fc 	.word	0x0800a8fc
 800238c:	2000252c 	.word	0x2000252c

08002390 <Create_BCM_MsgPacket_For_LORA>:
void Create_BCM_MsgPacket_For_LORA(void) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af02      	add	r7, sp, #8
//Sırası ile Sağ Sinyal, Sol sinyal, Dortlu, Uzunlar
	for (int i = 0; i < 5; i++) {
 8002396:	2300      	movs	r3, #0
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	e00b      	b.n	80023b4 <Create_BCM_MsgPacket_For_LORA+0x24>
		LORA_Instant_Buffer[i] = CanRX[i];
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <Create_BCM_MsgPacket_For_LORA+0x58>)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	7819      	ldrb	r1, [r3, #0]
 80023a4:	4a11      	ldr	r2, [pc, #68]	; (80023ec <Create_BCM_MsgPacket_For_LORA+0x5c>)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	460a      	mov	r2, r1
 80023ac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 5; i++) {
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3301      	adds	r3, #1
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	ddf0      	ble.n	800239c <Create_BCM_MsgPacket_For_LORA+0xc>
	}
	sprintf(LORA_BCM_Buffer, "%u,%u,%u,%u,", LORA_Instant_Buffer[1],
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <Create_BCM_MsgPacket_For_LORA+0x5c>)
 80023bc:	785b      	ldrb	r3, [r3, #1]
 80023be:	4619      	mov	r1, r3
			LORA_Instant_Buffer[2], LORA_Instant_Buffer[3],
 80023c0:	4b0a      	ldr	r3, [pc, #40]	; (80023ec <Create_BCM_MsgPacket_For_LORA+0x5c>)
 80023c2:	789b      	ldrb	r3, [r3, #2]
	sprintf(LORA_BCM_Buffer, "%u,%u,%u,%u,", LORA_Instant_Buffer[1],
 80023c4:	4618      	mov	r0, r3
			LORA_Instant_Buffer[2], LORA_Instant_Buffer[3],
 80023c6:	4b09      	ldr	r3, [pc, #36]	; (80023ec <Create_BCM_MsgPacket_For_LORA+0x5c>)
 80023c8:	78db      	ldrb	r3, [r3, #3]
	sprintf(LORA_BCM_Buffer, "%u,%u,%u,%u,", LORA_Instant_Buffer[1],
 80023ca:	461a      	mov	r2, r3
			LORA_Instant_Buffer[4]);
 80023cc:	4b07      	ldr	r3, [pc, #28]	; (80023ec <Create_BCM_MsgPacket_For_LORA+0x5c>)
 80023ce:	791b      	ldrb	r3, [r3, #4]
	sprintf(LORA_BCM_Buffer, "%u,%u,%u,%u,", LORA_Instant_Buffer[1],
 80023d0:	9301      	str	r3, [sp, #4]
 80023d2:	9200      	str	r2, [sp, #0]
 80023d4:	4603      	mov	r3, r0
 80023d6:	460a      	mov	r2, r1
 80023d8:	4905      	ldr	r1, [pc, #20]	; (80023f0 <Create_BCM_MsgPacket_For_LORA+0x60>)
 80023da:	4806      	ldr	r0, [pc, #24]	; (80023f4 <Create_BCM_MsgPacket_For_LORA+0x64>)
 80023dc:	f007 fd3e 	bl	8009e5c <siprintf>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	200023ec 	.word	0x200023ec
 80023ec:	20002464 	.word	0x20002464
 80023f0:	0800a958 	.word	0x0800a958
 80023f4:	20000044 	.word	0x20000044

080023f8 <Create_SPEED_MsgPacket_For_LORA>:
void Create_SPEED_MsgPacket_For_LORA(void) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	LORA_Instant_Buffer[0] = CanRX[0];
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <Create_SPEED_MsgPacket_For_LORA+0x20>)
 80023fe:	781a      	ldrb	r2, [r3, #0]
 8002400:	4b06      	ldr	r3, [pc, #24]	; (800241c <Create_SPEED_MsgPacket_For_LORA+0x24>)
 8002402:	701a      	strb	r2, [r3, #0]
	sprintf(LORA_SPEED_Buffer, "%u,",  LORA_Instant_Buffer[0]);
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <Create_SPEED_MsgPacket_For_LORA+0x24>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	4905      	ldr	r1, [pc, #20]	; (8002420 <Create_SPEED_MsgPacket_For_LORA+0x28>)
 800240c:	4805      	ldr	r0, [pc, #20]	; (8002424 <Create_SPEED_MsgPacket_For_LORA+0x2c>)
 800240e:	f007 fd25 	bl	8009e5c <siprintf>
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	200023ec 	.word	0x200023ec
 800241c:	20002464 	.word	0x20002464
 8002420:	0800a968 	.word	0x0800a968
 8002424:	20000060 	.word	0x20000060

08002428 <Create_CURRENT_MsgPacket_For_LORA>:
void Create_CURRENT_MsgPacket_For_LORA(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
	uint32_t CURRENT = ((CanRX[0] * 256) + (CanRX[1] * 1000)
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <Create_CURRENT_MsgPacket_For_LORA+0x4c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	021a      	lsls	r2, r3, #8
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <Create_CURRENT_MsgPacket_For_LORA+0x4c>)
 8002436:	785b      	ldrb	r3, [r3, #1]
 8002438:	4619      	mov	r1, r3
 800243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243e:	fb01 f303 	mul.w	r3, r1, r3
 8002442:	441a      	add	r2, r3
			+ (CanRX[2] * 256) + CanRX[3]);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <Create_CURRENT_MsgPacket_For_LORA+0x4c>)
 8002446:	789b      	ldrb	r3, [r3, #2]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	4413      	add	r3, r2
 800244c:	4a09      	ldr	r2, [pc, #36]	; (8002474 <Create_CURRENT_MsgPacket_For_LORA+0x4c>)
 800244e:	78d2      	ldrb	r2, [r2, #3]
 8002450:	4413      	add	r3, r2
	uint32_t CURRENT = ((CanRX[0] * 256) + (CanRX[1] * 1000)
 8002452:	607b      	str	r3, [r7, #4]
	CURRENT=CURRENT/1000;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <Create_CURRENT_MsgPacket_For_LORA+0x50>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	607b      	str	r3, [r7, #4]
	sprintf(LORA_CURRENT_Buffer, "%lu",  CURRENT);
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4906      	ldr	r1, [pc, #24]	; (800247c <Create_CURRENT_MsgPacket_For_LORA+0x54>)
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <Create_CURRENT_MsgPacket_For_LORA+0x58>)
 8002466:	f007 fcf9 	bl	8009e5c <siprintf>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	200023ec 	.word	0x200023ec
 8002478:	10624dd3 	.word	0x10624dd3
 800247c:	0800a96c 	.word	0x0800a96c
 8002480:	2000006c 	.word	0x2000006c

08002484 <LORA_Incomming_Packet_ID_From_CANBUS>:
void LORA_Incomming_Packet_ID_From_CANBUS(uint8_t CAN_ID) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
	switch (CAN_ID) {
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b50      	cmp	r3, #80	; 0x50
 8002492:	d00f      	beq.n	80024b4 <LORA_Incomming_Packet_ID_From_CANBUS+0x30>
 8002494:	2b50      	cmp	r3, #80	; 0x50
 8002496:	dc13      	bgt.n	80024c0 <LORA_Incomming_Packet_ID_From_CANBUS+0x3c>
 8002498:	2b30      	cmp	r3, #48	; 0x30
 800249a:	d00e      	beq.n	80024ba <LORA_Incomming_Packet_ID_From_CANBUS+0x36>
 800249c:	2b30      	cmp	r3, #48	; 0x30
 800249e:	dc0f      	bgt.n	80024c0 <LORA_Incomming_Packet_ID_From_CANBUS+0x3c>
 80024a0:	2b23      	cmp	r3, #35	; 0x23
 80024a2:	d004      	beq.n	80024ae <LORA_Incomming_Packet_ID_From_CANBUS+0x2a>
 80024a4:	2b27      	cmp	r3, #39	; 0x27
 80024a6:	d10b      	bne.n	80024c0 <LORA_Incomming_Packet_ID_From_CANBUS+0x3c>
	case BMS_ID:
		Create_BMS_MsgPacket_For_LORA();
 80024a8:	f7ff fe6a 	bl	8002180 <Create_BMS_MsgPacket_For_LORA>

		break;
 80024ac:	e008      	b.n	80024c0 <LORA_Incomming_Packet_ID_From_CANBUS+0x3c>
	case BCM_ID:
		Create_BCM_MsgPacket_For_LORA();
 80024ae:	f7ff ff6f 	bl	8002390 <Create_BCM_MsgPacket_For_LORA>

		break;
 80024b2:	e005      	b.n	80024c0 <LORA_Incomming_Packet_ID_From_CANBUS+0x3c>
	case SPEED_ID:
		Create_SPEED_MsgPacket_For_LORA();
 80024b4:	f7ff ffa0 	bl	80023f8 <Create_SPEED_MsgPacket_For_LORA>

		break;
 80024b8:	e002      	b.n	80024c0 <LORA_Incomming_Packet_ID_From_CANBUS+0x3c>
	case Current_ID:
		Create_CURRENT_MsgPacket_For_LORA();
 80024ba:	f7ff ffb5 	bl	8002428 <Create_CURRENT_MsgPacket_For_LORA>

		break;
 80024be:	bf00      	nop
	}

}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <LORA_Send_Together_DATAS>:

void LORA_Send_Together_DATAS(void) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af04      	add	r7, sp, #16
	uint32_t length = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
	char LORA_Adress[3]={'\0'};
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <LORA_Send_Together_DATAS+0x70>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	803b      	strh	r3, [r7, #0]
 80024d8:	2300      	movs	r3, #0
 80024da:	70bb      	strb	r3, [r7, #2]
	LORA_Adress[0] = (char) 0x05;
 80024dc:	2305      	movs	r3, #5
 80024de:	703b      	strb	r3, [r7, #0]
	LORA_Adress[1] = LORA_RECEIVER_HIGH;
 80024e0:	2327      	movs	r3, #39	; 0x27
 80024e2:	707b      	strb	r3, [r7, #1]
	LORA_Adress[2] = LORA_RECEIVER_LOW;
 80024e4:	2327      	movs	r3, #39	; 0x27
 80024e6:	70bb      	strb	r3, [r7, #2]
	LORA_Adress[3] = '\0';
 80024e8:	2300      	movs	r3, #0
 80024ea:	70fb      	strb	r3, [r7, #3]
//	for(int i =3 ; i<=n;i++)
//	{
//		LORA_Sending_Buffer[i]= LORA_Sending_Buffer[i+1];
//	}

	sprintf(LORA_Sending_Buffer, "%s%s%s%s%s%s", LORA_Adress, LORA_BCM_Buffer,
 80024ec:	463a      	mov	r2, r7
 80024ee:	4b13      	ldr	r3, [pc, #76]	; (800253c <LORA_Send_Together_DATAS+0x74>)
 80024f0:	9303      	str	r3, [sp, #12]
 80024f2:	4b13      	ldr	r3, [pc, #76]	; (8002540 <LORA_Send_Together_DATAS+0x78>)
 80024f4:	9302      	str	r3, [sp, #8]
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <LORA_Send_Together_DATAS+0x7c>)
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <LORA_Send_Together_DATAS+0x80>)
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	4b13      	ldr	r3, [pc, #76]	; (800254c <LORA_Send_Together_DATAS+0x84>)
 8002500:	4913      	ldr	r1, [pc, #76]	; (8002550 <LORA_Send_Together_DATAS+0x88>)
 8002502:	4814      	ldr	r0, [pc, #80]	; (8002554 <LORA_Send_Together_DATAS+0x8c>)
 8002504:	f007 fcaa 	bl	8009e5c <siprintf>
			LORA_SPEED_Buffer, LORA_BMS_Buffer, LORA_CURRENT_Buffer, xchar);
	length = strlen(LORA_Sending_Buffer);
 8002508:	4812      	ldr	r0, [pc, #72]	; (8002554 <LORA_Send_Together_DATAS+0x8c>)
 800250a:	f7fd fe1f 	bl	800014c <strlen>
 800250e:	6078      	str	r0, [r7, #4]

	LORA_Sending_Buffer[0] = (char) 0x00;
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <LORA_Send_Together_DATAS+0x8c>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) LORA_Sending_Buffer,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	b29a      	uxth	r2, r3
 800251a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800251e:	490d      	ldr	r1, [pc, #52]	; (8002554 <LORA_Send_Together_DATAS+0x8c>)
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <LORA_Send_Together_DATAS+0x90>)
 8002522:	f002 ffea 	bl	80054fa <HAL_UART_Transmit>
			(uint16_t) (length), 500);
	memset(LORA_Sending_Buffer, '\0', 200);
 8002526:	22c8      	movs	r2, #200	; 0xc8
 8002528:	2100      	movs	r1, #0
 800252a:	480a      	ldr	r0, [pc, #40]	; (8002554 <LORA_Send_Together_DATAS+0x8c>)
 800252c:	f007 fc8e 	bl	8009e4c <memset>
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	0800a980 	.word	0x0800a980
 800253c:	20000078 	.word	0x20000078
 8002540:	2000006c 	.word	0x2000006c
 8002544:	2000252c 	.word	0x2000252c
 8002548:	20000060 	.word	0x20000060
 800254c:	20000044 	.word	0x20000044
 8002550:	0800a970 	.word	0x0800a970
 8002554:	20002590 	.word	0x20002590
 8002558:	20000244 	.word	0x20000244

0800255c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <HAL_Init+0x28>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_Init+0x28>)
 8002566:	f043 0310 	orr.w	r3, r3, #16
 800256a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800256c:	2003      	movs	r0, #3
 800256e:	f000 fea9 	bl	80032c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002572:	2000      	movs	r0, #0
 8002574:	f000 f808 	bl	8002588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002578:	f7fe fe92 	bl	80012a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40022000 	.word	0x40022000

08002588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_InitTick+0x54>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_InitTick+0x58>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	4619      	mov	r1, r3
 800259a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259e:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fec1 	bl	800332e <HAL_SYSTICK_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00e      	b.n	80025d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b0f      	cmp	r3, #15
 80025ba:	d80a      	bhi.n	80025d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025bc:	2200      	movs	r2, #0
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295
 80025c4:	f000 fe89 	bl	80032da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025c8:	4a06      	ldr	r2, [pc, #24]	; (80025e4 <HAL_InitTick+0x5c>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e000      	b.n	80025d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000004 	.word	0x20000004
 80025e0:	20000080 	.word	0x20000080
 80025e4:	2000007c 	.word	0x2000007c

080025e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025ec:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_IncTick+0x1c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_IncTick+0x20>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4413      	add	r3, r2
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <HAL_IncTick+0x20>)
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	20000080 	.word	0x20000080
 8002608:	20002658 	.word	0x20002658

0800260c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return uwTick;
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <HAL_GetTick+0x10>)
 8002612:	681b      	ldr	r3, [r3, #0]
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	20002658 	.word	0x20002658

08002620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7ff fff0 	bl	800260c <HAL_GetTick>
 800262c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d005      	beq.n	8002646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <HAL_Delay+0x44>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002646:	bf00      	nop
 8002648:	f7ff ffe0 	bl	800260c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d8f7      	bhi.n	8002648 <HAL_Delay+0x28>
  {
  }
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	20000080 	.word	0x20000080

08002668 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0ed      	b.n	8002856 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fe fe3c 	bl	8001304 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800269c:	f7ff ffb6 	bl	800260c <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026a2:	e012      	b.n	80026ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026a4:	f7ff ffb2 	bl	800260c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b0a      	cmp	r3, #10
 80026b0:	d90b      	bls.n	80026ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2205      	movs	r2, #5
 80026c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e0c5      	b.n	8002856 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0e5      	beq.n	80026a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 0202 	bic.w	r2, r2, #2
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e8:	f7ff ff90 	bl	800260c <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026ee:	e012      	b.n	8002716 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026f0:	f7ff ff8c 	bl	800260c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b0a      	cmp	r3, #10
 80026fc:	d90b      	bls.n	8002716 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2205      	movs	r2, #5
 800270e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e09f      	b.n	8002856 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 0302 	and.w	r3, r3, #2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e5      	bne.n	80026f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7e1b      	ldrb	r3, [r3, #24]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d108      	bne.n	800273e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e007      	b.n	800274e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7e5b      	ldrb	r3, [r3, #25]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e007      	b.n	8002778 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002776:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e9b      	ldrb	r3, [r3, #26]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d108      	bne.n	8002792 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0220 	orr.w	r2, r2, #32
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e007      	b.n	80027a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0220 	bic.w	r2, r2, #32
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7edb      	ldrb	r3, [r3, #27]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d108      	bne.n	80027bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0210 	bic.w	r2, r2, #16
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0210 	orr.w	r2, r2, #16
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	7f1b      	ldrb	r3, [r3, #28]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d108      	bne.n	80027e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0208 	orr.w	r2, r2, #8
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e007      	b.n	80027f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0208 	bic.w	r2, r2, #8
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	7f5b      	ldrb	r3, [r3, #29]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d108      	bne.n	8002810 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f042 0204 	orr.w	r2, r2, #4
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	e007      	b.n	8002820 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0204 	bic.w	r2, r2, #4
 800281e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	ea42 0103 	orr.w	r1, r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800285e:	b480      	push	{r7}
 8002860:	b087      	sub	sp, #28
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002874:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d003      	beq.n	8002884 <HAL_CAN_ConfigFilter+0x26>
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	2b02      	cmp	r3, #2
 8002880:	f040 80aa 	bne.w	80029d8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	2201      	movs	r2, #1
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	43db      	mvns	r3, r3
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d123      	bne.n	8002906 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	401a      	ands	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	3248      	adds	r2, #72	; 0x48
 80028e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028fc:	6979      	ldr	r1, [r7, #20]
 80028fe:	3348      	adds	r3, #72	; 0x48
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d122      	bne.n	8002954 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	431a      	orrs	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800292e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3248      	adds	r2, #72	; 0x48
 8002934:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002948:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800294a:	6979      	ldr	r1, [r7, #20]
 800294c:	3348      	adds	r3, #72	; 0x48
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	43db      	mvns	r3, r3
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800296e:	e007      	b.n	8002980 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	431a      	orrs	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	43db      	mvns	r3, r3
 8002992:	401a      	ands	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800299a:	e007      	b.n	80029ac <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d107      	bne.n	80029c4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	431a      	orrs	r2, r3
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029ca:	f023 0201 	bic.w	r2, r3, #1
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	e006      	b.n	80029e6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
  }
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bc80      	pop	{r7}
 80029ee:	4770      	bx	lr

080029f0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d12e      	bne.n	8002a62 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2202      	movs	r2, #2
 8002a08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7ff fdf6 	bl	800260c <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a22:	e012      	b.n	8002a4a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a24:	f7ff fdf2 	bl	800260c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b0a      	cmp	r3, #10
 8002a30:	d90b      	bls.n	8002a4a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2205      	movs	r2, #5
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e012      	b.n	8002a70 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1e5      	bne.n	8002a24 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e006      	b.n	8002a70 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
 8002a84:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a8c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a8e:	7dfb      	ldrb	r3, [r7, #23]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d003      	beq.n	8002a9c <HAL_CAN_GetRxMessage+0x24>
 8002a94:	7dfb      	ldrb	r3, [r7, #23]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	f040 80f3 	bne.w	8002c82 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d116      	bne.n	8002ade <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0e7      	b.n	8002c90 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d107      	bne.n	8002ade <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e0d8      	b.n	8002c90 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	331b      	adds	r3, #27
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	4413      	add	r3, r2
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0204 	and.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10c      	bne.n	8002b16 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	331b      	adds	r3, #27
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	0d5b      	lsrs	r3, r3, #21
 8002b0c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e00b      	b.n	8002b2e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	331b      	adds	r3, #27
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4413      	add	r3, r2
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	331b      	adds	r3, #27
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	4413      	add	r3, r2
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0202 	and.w	r2, r3, #2
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	331b      	adds	r3, #27
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 020f 	and.w	r2, r3, #15
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	331b      	adds	r3, #27
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	4413      	add	r3, r2
 8002b68:	3304      	adds	r3, #4
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	0a1b      	lsrs	r3, r3, #8
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	331b      	adds	r3, #27
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	3304      	adds	r3, #4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0c1b      	lsrs	r3, r3, #16
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0a1a      	lsrs	r2, r3, #8
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	b2d2      	uxtb	r2, r2
 8002bba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	0c1a      	lsrs	r2, r3, #16
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	b2d2      	uxtb	r2, r2
 8002bd4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e1a      	lsrs	r2, r3, #24
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	3303      	adds	r3, #3
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	3304      	adds	r3, #4
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0a1a      	lsrs	r2, r3, #8
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	3305      	adds	r3, #5
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	0c1a      	lsrs	r2, r3, #16
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3306      	adds	r3, #6
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	4413      	add	r3, r2
 8002c46:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e1a      	lsrs	r2, r3, #24
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	3307      	adds	r3, #7
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d108      	bne.n	8002c6e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	60da      	str	r2, [r3, #12]
 8002c6c:	e007      	b.n	8002c7e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f042 0220 	orr.w	r2, r2, #32
 8002c7c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e006      	b.n	8002c90 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
  }
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	371c      	adds	r7, #28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002caa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d002      	beq.n	8002cb8 <HAL_CAN_ActivateNotification+0x1e>
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d109      	bne.n	8002ccc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6959      	ldr	r1, [r3, #20]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	e006      	b.n	8002cda <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3714      	adds	r7, #20
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08a      	sub	sp, #40	; 0x28
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d07c      	beq.n	8002e24 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f000 f983 	bl	8003052 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d4c:	e016      	b.n	8002d7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	e00c      	b.n	8002d7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d004      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	e002      	b.n	8002d7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f986 	bl	8003088 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d024      	beq.n	8002dd0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f962 	bl	8003064 <HAL_CAN_TxMailbox1CompleteCallback>
 8002da0:	e016      	b.n	8002dd0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d004      	beq.n	8002db6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
 8002db4:	e00c      	b.n	8002dd0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc8:	e002      	b.n	8002dd0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f965 	bl	800309a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d024      	beq.n	8002e24 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002de2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f941 	bl	8003076 <HAL_CAN_TxMailbox2CompleteCallback>
 8002df4:	e016      	b.n	8002e24 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d004      	beq.n	8002e0a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e06:	627b      	str	r3, [r7, #36]	; 0x24
 8002e08:	e00c      	b.n	8002e24 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d004      	beq.n	8002e1e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1c:	e002      	b.n	8002e24 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f944 	bl	80030ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00c      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d007      	beq.n	8002e48 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2210      	movs	r2, #16
 8002e46:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	f003 0304 	and.w	r3, r3, #4
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00b      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f92a 	bl	80030be <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d009      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d002      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7fe fd0c 	bl	80018a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00c      	beq.n	8002eac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f003 0320 	and.w	r3, r3, #32
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00b      	beq.n	8002ece <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2208      	movs	r2, #8
 8002ec6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f90a 	bl	80030e2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d002      	beq.n	8002eec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8f2 	bl	80030d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00b      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f003 0310 	and.w	r3, r3, #16
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2210      	movs	r2, #16
 8002f06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f8f3 	bl	80030f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00b      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2208      	movs	r2, #8
 8002f28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8eb 	bl	8003106 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d07b      	beq.n	8003032 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d072      	beq.n	800302a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d008      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f76:	f043 0302 	orr.w	r3, r3, #2
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d008      	beq.n	8002f98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	f043 0304 	orr.w	r3, r3, #4
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f98:	6a3b      	ldr	r3, [r7, #32]
 8002f9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d043      	beq.n	800302a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d03e      	beq.n	800302a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fb2:	2b60      	cmp	r3, #96	; 0x60
 8002fb4:	d02b      	beq.n	800300e <HAL_CAN_IRQHandler+0x32a>
 8002fb6:	2b60      	cmp	r3, #96	; 0x60
 8002fb8:	d82e      	bhi.n	8003018 <HAL_CAN_IRQHandler+0x334>
 8002fba:	2b50      	cmp	r3, #80	; 0x50
 8002fbc:	d022      	beq.n	8003004 <HAL_CAN_IRQHandler+0x320>
 8002fbe:	2b50      	cmp	r3, #80	; 0x50
 8002fc0:	d82a      	bhi.n	8003018 <HAL_CAN_IRQHandler+0x334>
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d019      	beq.n	8002ffa <HAL_CAN_IRQHandler+0x316>
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d826      	bhi.n	8003018 <HAL_CAN_IRQHandler+0x334>
 8002fca:	2b30      	cmp	r3, #48	; 0x30
 8002fcc:	d010      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x30c>
 8002fce:	2b30      	cmp	r3, #48	; 0x30
 8002fd0:	d822      	bhi.n	8003018 <HAL_CAN_IRQHandler+0x334>
 8002fd2:	2b10      	cmp	r3, #16
 8002fd4:	d002      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x2f8>
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d005      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fda:	e01d      	b.n	8003018 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fe4:	e019      	b.n	800301a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	f043 0310 	orr.w	r3, r3, #16
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fee:	e014      	b.n	800301a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f043 0320 	orr.w	r3, r3, #32
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ff8:	e00f      	b.n	800301a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003002:	e00a      	b.n	800301a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800300c:	e005      	b.n	800301a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003016:	e000      	b.n	800301a <HAL_CAN_IRQHandler+0x336>
            break;
 8003018:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003028:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2204      	movs	r2, #4
 8003030:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f867 	bl	8003118 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800304a:	bf00      	nop
 800304c:	3728      	adds	r7, #40	; 0x28
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	bc80      	pop	{r7}
 8003074:	4770      	bx	lr

08003076 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	bc80      	pop	{r7}
 8003098:	4770      	bx	lr

0800309a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bc80      	pop	{r7}
 80030bc:	4770      	bx	lr

080030be <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bc80      	pop	{r7}
 80030ce:	4770      	bx	lr

080030d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003106:	b480      	push	{r7}
 8003108:	b083      	sub	sp, #12
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	bc80      	pop	{r7}
 8003128:	4770      	bx	lr
	...

0800312c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <__NVIC_SetPriorityGrouping+0x44>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003148:	4013      	ands	r3, r2
 800314a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800315c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800315e:	4a04      	ldr	r2, [pc, #16]	; (8003170 <__NVIC_SetPriorityGrouping+0x44>)
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	60d3      	str	r3, [r2, #12]
}
 8003164:	bf00      	nop
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <__NVIC_GetPriorityGrouping+0x18>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	0a1b      	lsrs	r3, r3, #8
 800317e:	f003 0307 	and.w	r3, r3, #7
}
 8003182:	4618      	mov	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	db0b      	blt.n	80031ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	f003 021f 	and.w	r2, r3, #31
 80031a8:	4906      	ldr	r1, [pc, #24]	; (80031c4 <__NVIC_EnableIRQ+0x34>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	2001      	movs	r0, #1
 80031b2:	fa00 f202 	lsl.w	r2, r0, r2
 80031b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr
 80031c4:	e000e100 	.word	0xe000e100

080031c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	6039      	str	r1, [r7, #0]
 80031d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	db0a      	blt.n	80031f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	490c      	ldr	r1, [pc, #48]	; (8003214 <__NVIC_SetPriority+0x4c>)
 80031e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e6:	0112      	lsls	r2, r2, #4
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	440b      	add	r3, r1
 80031ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f0:	e00a      	b.n	8003208 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	4908      	ldr	r1, [pc, #32]	; (8003218 <__NVIC_SetPriority+0x50>)
 80031f8:	79fb      	ldrb	r3, [r7, #7]
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	3b04      	subs	r3, #4
 8003200:	0112      	lsls	r2, r2, #4
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	440b      	add	r3, r1
 8003206:	761a      	strb	r2, [r3, #24]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000e100 	.word	0xe000e100
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800321c:	b480      	push	{r7}
 800321e:	b089      	sub	sp, #36	; 0x24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0307 	and.w	r3, r3, #7
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	f1c3 0307 	rsb	r3, r3, #7
 8003236:	2b04      	cmp	r3, #4
 8003238:	bf28      	it	cs
 800323a:	2304      	movcs	r3, #4
 800323c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	3304      	adds	r3, #4
 8003242:	2b06      	cmp	r3, #6
 8003244:	d902      	bls.n	800324c <NVIC_EncodePriority+0x30>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	3b03      	subs	r3, #3
 800324a:	e000      	b.n	800324e <NVIC_EncodePriority+0x32>
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003250:	f04f 32ff 	mov.w	r2, #4294967295
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	401a      	ands	r2, r3
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003264:	f04f 31ff 	mov.w	r1, #4294967295
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	43d9      	mvns	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	4313      	orrs	r3, r2
         );
}
 8003276:	4618      	mov	r0, r3
 8003278:	3724      	adds	r7, #36	; 0x24
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003290:	d301      	bcc.n	8003296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003292:	2301      	movs	r3, #1
 8003294:	e00f      	b.n	80032b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <SysTick_Config+0x40>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800329e:	210f      	movs	r1, #15
 80032a0:	f04f 30ff 	mov.w	r0, #4294967295
 80032a4:	f7ff ff90 	bl	80031c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032a8:	4b05      	ldr	r3, [pc, #20]	; (80032c0 <SysTick_Config+0x40>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <SysTick_Config+0x40>)
 80032b0:	2207      	movs	r2, #7
 80032b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	e000e010 	.word	0xe000e010

080032c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7ff ff2d 	bl	800312c <__NVIC_SetPriorityGrouping>
}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032da:	b580      	push	{r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032ec:	f7ff ff42 	bl	8003174 <__NVIC_GetPriorityGrouping>
 80032f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	6978      	ldr	r0, [r7, #20]
 80032f8:	f7ff ff90 	bl	800321c <NVIC_EncodePriority>
 80032fc:	4602      	mov	r2, r0
 80032fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff5f 	bl	80031c8 <__NVIC_SetPriority>
}
 800330a:	bf00      	nop
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800331c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff35 	bl	8003190 <__NVIC_EnableIRQ>
}
 8003326:	bf00      	nop
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ffa2 	bl	8003280 <SysTick_Config>
 800333c:	4603      	mov	r3, r0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003358:	2b02      	cmp	r3, #2
 800335a:	d008      	beq.n	800336e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2204      	movs	r2, #4
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e020      	b.n	80033b0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 020e 	bic.w	r2, r2, #14
 800337c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0201 	bic.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d005      	beq.n	80033de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2204      	movs	r2, #4
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e051      	b.n	8003482 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 020e 	bic.w	r2, r2, #14
 80033ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f022 0201 	bic.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a22      	ldr	r2, [pc, #136]	; (800348c <HAL_DMA_Abort_IT+0xd0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d029      	beq.n	800345c <HAL_DMA_Abort_IT+0xa0>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a20      	ldr	r2, [pc, #128]	; (8003490 <HAL_DMA_Abort_IT+0xd4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d022      	beq.n	8003458 <HAL_DMA_Abort_IT+0x9c>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a1f      	ldr	r2, [pc, #124]	; (8003494 <HAL_DMA_Abort_IT+0xd8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d01a      	beq.n	8003452 <HAL_DMA_Abort_IT+0x96>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a1d      	ldr	r2, [pc, #116]	; (8003498 <HAL_DMA_Abort_IT+0xdc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d012      	beq.n	800344c <HAL_DMA_Abort_IT+0x90>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1c      	ldr	r2, [pc, #112]	; (800349c <HAL_DMA_Abort_IT+0xe0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00a      	beq.n	8003446 <HAL_DMA_Abort_IT+0x8a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a1a      	ldr	r2, [pc, #104]	; (80034a0 <HAL_DMA_Abort_IT+0xe4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d102      	bne.n	8003440 <HAL_DMA_Abort_IT+0x84>
 800343a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800343e:	e00e      	b.n	800345e <HAL_DMA_Abort_IT+0xa2>
 8003440:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003444:	e00b      	b.n	800345e <HAL_DMA_Abort_IT+0xa2>
 8003446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800344a:	e008      	b.n	800345e <HAL_DMA_Abort_IT+0xa2>
 800344c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003450:	e005      	b.n	800345e <HAL_DMA_Abort_IT+0xa2>
 8003452:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003456:	e002      	b.n	800345e <HAL_DMA_Abort_IT+0xa2>
 8003458:	2310      	movs	r3, #16
 800345a:	e000      	b.n	800345e <HAL_DMA_Abort_IT+0xa2>
 800345c:	2301      	movs	r3, #1
 800345e:	4a11      	ldr	r2, [pc, #68]	; (80034a4 <HAL_DMA_Abort_IT+0xe8>)
 8003460:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	2b00      	cmp	r3, #0
 8003478:	d003      	beq.n	8003482 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
    } 
  }
  return status;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40020008 	.word	0x40020008
 8003490:	4002001c 	.word	0x4002001c
 8003494:	40020030 	.word	0x40020030
 8003498:	40020044 	.word	0x40020044
 800349c:	40020058 	.word	0x40020058
 80034a0:	4002006c 	.word	0x4002006c
 80034a4:	40020000 	.word	0x40020000

080034a8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80034a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80034c2:	4b2f      	ldr	r3, [pc, #188]	; (8003580 <HAL_FLASH_Program+0xd8>)
 80034c4:	7e1b      	ldrb	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_FLASH_Program+0x26>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e054      	b.n	8003578 <HAL_FLASH_Program+0xd0>
 80034ce:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_FLASH_Program+0xd8>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80034d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034d8:	f000 f8b2 	bl	8003640 <FLASH_WaitForLastOperation>
 80034dc:	4603      	mov	r3, r0
 80034de:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d144      	bne.n	8003570 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80034ec:	2301      	movs	r3, #1
 80034ee:	757b      	strb	r3, [r7, #21]
 80034f0:	e007      	b.n	8003502 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d102      	bne.n	80034fe <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80034f8:	2302      	movs	r3, #2
 80034fa:	757b      	strb	r3, [r7, #21]
 80034fc:	e001      	b.n	8003502 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80034fe:	2304      	movs	r3, #4
 8003500:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003502:	2300      	movs	r3, #0
 8003504:	75bb      	strb	r3, [r7, #22]
 8003506:	e02d      	b.n	8003564 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003508:	7dbb      	ldrb	r3, [r7, #22]
 800350a:	005a      	lsls	r2, r3, #1
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	eb02 0c03 	add.w	ip, r2, r3
 8003512:	7dbb      	ldrb	r3, [r7, #22]
 8003514:	0119      	lsls	r1, r3, #4
 8003516:	e9d7 2300 	ldrd	r2, r3, [r7]
 800351a:	f1c1 0620 	rsb	r6, r1, #32
 800351e:	f1a1 0020 	sub.w	r0, r1, #32
 8003522:	fa22 f401 	lsr.w	r4, r2, r1
 8003526:	fa03 f606 	lsl.w	r6, r3, r6
 800352a:	4334      	orrs	r4, r6
 800352c:	fa23 f000 	lsr.w	r0, r3, r0
 8003530:	4304      	orrs	r4, r0
 8003532:	fa23 f501 	lsr.w	r5, r3, r1
 8003536:	b2a3      	uxth	r3, r4
 8003538:	4619      	mov	r1, r3
 800353a:	4660      	mov	r0, ip
 800353c:	f000 f864 	bl	8003608 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003540:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003544:	f000 f87c 	bl	8003640 <FLASH_WaitForLastOperation>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800354c:	4b0d      	ldr	r3, [pc, #52]	; (8003584 <HAL_FLASH_Program+0xdc>)
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <HAL_FLASH_Program+0xdc>)
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d107      	bne.n	800356e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800355e:	7dbb      	ldrb	r3, [r7, #22]
 8003560:	3301      	adds	r3, #1
 8003562:	75bb      	strb	r3, [r7, #22]
 8003564:	7dba      	ldrb	r2, [r7, #22]
 8003566:	7d7b      	ldrb	r3, [r7, #21]
 8003568:	429a      	cmp	r2, r3
 800356a:	d3cd      	bcc.n	8003508 <HAL_FLASH_Program+0x60>
 800356c:	e000      	b.n	8003570 <HAL_FLASH_Program+0xc8>
      {
        break;
 800356e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_FLASH_Program+0xd8>)
 8003572:	2200      	movs	r2, #0
 8003574:	761a      	strb	r2, [r3, #24]

  return status;
 8003576:	7dfb      	ldrb	r3, [r7, #23]
}
 8003578:	4618      	mov	r0, r3
 800357a:	371c      	adds	r7, #28
 800357c:	46bd      	mov	sp, r7
 800357e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003580:	20002660 	.word	0x20002660
 8003584:	40022000 	.word	0x40022000

08003588 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <HAL_FLASH_Unlock+0x40>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_FLASH_Unlock+0x40>)
 80035a0:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <HAL_FLASH_Unlock+0x44>)
 80035a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <HAL_FLASH_Unlock+0x40>)
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_FLASH_Unlock+0x48>)
 80035a8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_FLASH_Unlock+0x40>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80035ba:	79fb      	ldrb	r3, [r7, #7]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40022000 	.word	0x40022000
 80035cc:	45670123 	.word	0x45670123
 80035d0:	cdef89ab 	.word	0xcdef89ab

080035d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_FLASH_Lock+0x1c>)
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_FLASH_Lock+0x1c>)
 80035de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40022000 	.word	0x40022000

080035f4 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80035f8:	4b02      	ldr	r3, [pc, #8]	; (8003604 <HAL_FLASH_GetError+0x10>)
 80035fa:	69db      	ldr	r3, [r3, #28]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	20002660 	.word	0x20002660

08003608 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <FLASH_Program_HalfWord+0x30>)
 8003616:	2200      	movs	r2, #0
 8003618:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800361a:	4b08      	ldr	r3, [pc, #32]	; (800363c <FLASH_Program_HalfWord+0x34>)
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	4a07      	ldr	r2, [pc, #28]	; (800363c <FLASH_Program_HalfWord+0x34>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	887a      	ldrh	r2, [r7, #2]
 800362a:	801a      	strh	r2, [r3, #0]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20002660 	.word	0x20002660
 800363c:	40022000 	.word	0x40022000

08003640 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7fe ffe0 	bl	800260c <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800364e:	e010      	b.n	8003672 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d00c      	beq.n	8003672 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <FLASH_WaitForLastOperation+0x2e>
 800365e:	f7fe ffd5 	bl	800260c <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d201      	bcs.n	8003672 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e025      	b.n	80036be <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <FLASH_WaitForLastOperation+0x88>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e8      	bne.n	8003650 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800367e:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <FLASH_WaitForLastOperation+0x88>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800368a:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <FLASH_WaitForLastOperation+0x88>)
 800368c:	2220      	movs	r2, #32
 800368e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003690:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <FLASH_WaitForLastOperation+0x88>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0310 	and.w	r3, r3, #16
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <FLASH_WaitForLastOperation+0x88>)
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <FLASH_WaitForLastOperation+0x88>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80036b4:	f000 f80a 	bl	80036cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000

080036cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <FLASH_SetErrorCode+0x98>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <FLASH_SetErrorCode+0x9c>)
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <FLASH_SetErrorCode+0x9c>)
 80036ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f043 0310 	orr.w	r3, r3, #16
 80036f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <FLASH_SetErrorCode+0x98>)
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003702:	4b19      	ldr	r3, [pc, #100]	; (8003768 <FLASH_SetErrorCode+0x9c>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	4a17      	ldr	r2, [pc, #92]	; (8003768 <FLASH_SetErrorCode+0x9c>)
 800370c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f043 0304 	orr.w	r3, r3, #4
 8003714:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003716:	4b13      	ldr	r3, [pc, #76]	; (8003764 <FLASH_SetErrorCode+0x98>)
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003722:	4b11      	ldr	r3, [pc, #68]	; (8003768 <FLASH_SetErrorCode+0x9c>)
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f043 0304 	orr.w	r3, r3, #4
 800372a:	4a0f      	ldr	r2, [pc, #60]	; (8003768 <FLASH_SetErrorCode+0x9c>)
 800372c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800372e:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <FLASH_SetErrorCode+0x98>)
 8003730:	69db      	ldr	r3, [r3, #28]
 8003732:	4a0c      	ldr	r2, [pc, #48]	; (8003764 <FLASH_SetErrorCode+0x98>)
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f240 1201 	movw	r2, #257	; 0x101
 8003740:	4293      	cmp	r3, r2
 8003742:	d106      	bne.n	8003752 <FLASH_SetErrorCode+0x86>
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <FLASH_SetErrorCode+0x98>)
 8003746:	69db      	ldr	r3, [r3, #28]
 8003748:	4a06      	ldr	r2, [pc, #24]	; (8003764 <FLASH_SetErrorCode+0x98>)
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	61d3      	str	r3, [r2, #28]
}  
 8003750:	e002      	b.n	8003758 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003752:	4a04      	ldr	r2, [pc, #16]	; (8003764 <FLASH_SetErrorCode+0x98>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60d3      	str	r3, [r2, #12]
}  
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40022000 	.word	0x40022000
 8003768:	20002660 	.word	0x20002660

0800376c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800377e:	4b2f      	ldr	r3, [pc, #188]	; (800383c <HAL_FLASHEx_Erase+0xd0>)
 8003780:	7e1b      	ldrb	r3, [r3, #24]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_FLASHEx_Erase+0x1e>
 8003786:	2302      	movs	r3, #2
 8003788:	e053      	b.n	8003832 <HAL_FLASHEx_Erase+0xc6>
 800378a:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_FLASHEx_Erase+0xd0>)
 800378c:	2201      	movs	r2, #1
 800378e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d116      	bne.n	80037c6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003798:	f24c 3050 	movw	r0, #50000	; 0xc350
 800379c:	f7ff ff50 	bl	8003640 <FLASH_WaitForLastOperation>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d141      	bne.n	800382a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80037a6:	2001      	movs	r0, #1
 80037a8:	f000 f84c 	bl	8003844 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037b0:	f7ff ff46 	bl	8003640 <FLASH_WaitForLastOperation>
 80037b4:	4603      	mov	r3, r0
 80037b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80037b8:	4b21      	ldr	r3, [pc, #132]	; (8003840 <HAL_FLASHEx_Erase+0xd4>)
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	4a20      	ldr	r2, [pc, #128]	; (8003840 <HAL_FLASHEx_Erase+0xd4>)
 80037be:	f023 0304 	bic.w	r3, r3, #4
 80037c2:	6113      	str	r3, [r2, #16]
 80037c4:	e031      	b.n	800382a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80037c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037ca:	f7ff ff39 	bl	8003640 <FLASH_WaitForLastOperation>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d12a      	bne.n	800382a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	e019      	b.n	8003818 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80037e4:	68b8      	ldr	r0, [r7, #8]
 80037e6:	f000 f849 	bl	800387c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037ee:	f7ff ff27 	bl	8003640 <FLASH_WaitForLastOperation>
 80037f2:	4603      	mov	r3, r0
 80037f4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_FLASHEx_Erase+0xd4>)
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <HAL_FLASHEx_Erase+0xd4>)
 80037fc:	f023 0302 	bic.w	r3, r3, #2
 8003800:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	601a      	str	r2, [r3, #0]
            break;
 800380e:	e00c      	b.n	800382a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003816:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	029a      	lsls	r2, r3, #10
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d3dc      	bcc.n	80037e4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_FLASHEx_Erase+0xd0>)
 800382c:	2200      	movs	r2, #0
 800382e:	761a      	strb	r2, [r3, #24]

  return status;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20002660 	.word	0x20002660
 8003840:	40022000 	.word	0x40022000

08003844 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800384c:	4b09      	ldr	r3, [pc, #36]	; (8003874 <FLASH_MassErase+0x30>)
 800384e:	2200      	movs	r2, #0
 8003850:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <FLASH_MassErase+0x34>)
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <FLASH_MassErase+0x34>)
 8003858:	f043 0304 	orr.w	r3, r3, #4
 800385c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <FLASH_MassErase+0x34>)
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	4a05      	ldr	r2, [pc, #20]	; (8003878 <FLASH_MassErase+0x34>)
 8003864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003868:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr
 8003874:	20002660 	.word	0x20002660
 8003878:	40022000 	.word	0x40022000

0800387c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003884:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <FLASH_PageErase+0x38>)
 8003886:	2200      	movs	r2, #0
 8003888:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <FLASH_PageErase+0x3c>)
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <FLASH_PageErase+0x3c>)
 8003890:	f043 0302 	orr.w	r3, r3, #2
 8003894:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003896:	4a08      	ldr	r2, [pc, #32]	; (80038b8 <FLASH_PageErase+0x3c>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <FLASH_PageErase+0x3c>)
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	4a05      	ldr	r2, [pc, #20]	; (80038b8 <FLASH_PageErase+0x3c>)
 80038a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	20002660 	.word	0x20002660
 80038b8:	40022000 	.word	0x40022000

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b08b      	sub	sp, #44	; 0x2c
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c6:	2300      	movs	r3, #0
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ce:	e169      	b.n	8003ba4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038d0:	2201      	movs	r2, #1
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69fa      	ldr	r2, [r7, #28]
 80038e0:	4013      	ands	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	f040 8158 	bne.w	8003b9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a9a      	ldr	r2, [pc, #616]	; (8003b5c <HAL_GPIO_Init+0x2a0>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d05e      	beq.n	80039b6 <HAL_GPIO_Init+0xfa>
 80038f8:	4a98      	ldr	r2, [pc, #608]	; (8003b5c <HAL_GPIO_Init+0x2a0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d875      	bhi.n	80039ea <HAL_GPIO_Init+0x12e>
 80038fe:	4a98      	ldr	r2, [pc, #608]	; (8003b60 <HAL_GPIO_Init+0x2a4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d058      	beq.n	80039b6 <HAL_GPIO_Init+0xfa>
 8003904:	4a96      	ldr	r2, [pc, #600]	; (8003b60 <HAL_GPIO_Init+0x2a4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d86f      	bhi.n	80039ea <HAL_GPIO_Init+0x12e>
 800390a:	4a96      	ldr	r2, [pc, #600]	; (8003b64 <HAL_GPIO_Init+0x2a8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d052      	beq.n	80039b6 <HAL_GPIO_Init+0xfa>
 8003910:	4a94      	ldr	r2, [pc, #592]	; (8003b64 <HAL_GPIO_Init+0x2a8>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d869      	bhi.n	80039ea <HAL_GPIO_Init+0x12e>
 8003916:	4a94      	ldr	r2, [pc, #592]	; (8003b68 <HAL_GPIO_Init+0x2ac>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d04c      	beq.n	80039b6 <HAL_GPIO_Init+0xfa>
 800391c:	4a92      	ldr	r2, [pc, #584]	; (8003b68 <HAL_GPIO_Init+0x2ac>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d863      	bhi.n	80039ea <HAL_GPIO_Init+0x12e>
 8003922:	4a92      	ldr	r2, [pc, #584]	; (8003b6c <HAL_GPIO_Init+0x2b0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d046      	beq.n	80039b6 <HAL_GPIO_Init+0xfa>
 8003928:	4a90      	ldr	r2, [pc, #576]	; (8003b6c <HAL_GPIO_Init+0x2b0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d85d      	bhi.n	80039ea <HAL_GPIO_Init+0x12e>
 800392e:	2b12      	cmp	r3, #18
 8003930:	d82a      	bhi.n	8003988 <HAL_GPIO_Init+0xcc>
 8003932:	2b12      	cmp	r3, #18
 8003934:	d859      	bhi.n	80039ea <HAL_GPIO_Init+0x12e>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <HAL_GPIO_Init+0x80>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	080039b7 	.word	0x080039b7
 8003940:	08003991 	.word	0x08003991
 8003944:	080039a3 	.word	0x080039a3
 8003948:	080039e5 	.word	0x080039e5
 800394c:	080039eb 	.word	0x080039eb
 8003950:	080039eb 	.word	0x080039eb
 8003954:	080039eb 	.word	0x080039eb
 8003958:	080039eb 	.word	0x080039eb
 800395c:	080039eb 	.word	0x080039eb
 8003960:	080039eb 	.word	0x080039eb
 8003964:	080039eb 	.word	0x080039eb
 8003968:	080039eb 	.word	0x080039eb
 800396c:	080039eb 	.word	0x080039eb
 8003970:	080039eb 	.word	0x080039eb
 8003974:	080039eb 	.word	0x080039eb
 8003978:	080039eb 	.word	0x080039eb
 800397c:	080039eb 	.word	0x080039eb
 8003980:	08003999 	.word	0x08003999
 8003984:	080039ad 	.word	0x080039ad
 8003988:	4a79      	ldr	r2, [pc, #484]	; (8003b70 <HAL_GPIO_Init+0x2b4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800398e:	e02c      	b.n	80039ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	623b      	str	r3, [r7, #32]
          break;
 8003996:	e029      	b.n	80039ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	3304      	adds	r3, #4
 800399e:	623b      	str	r3, [r7, #32]
          break;
 80039a0:	e024      	b.n	80039ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	3308      	adds	r3, #8
 80039a8:	623b      	str	r3, [r7, #32]
          break;
 80039aa:	e01f      	b.n	80039ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	330c      	adds	r3, #12
 80039b2:	623b      	str	r3, [r7, #32]
          break;
 80039b4:	e01a      	b.n	80039ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d102      	bne.n	80039c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039be:	2304      	movs	r3, #4
 80039c0:	623b      	str	r3, [r7, #32]
          break;
 80039c2:	e013      	b.n	80039ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d105      	bne.n	80039d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039cc:	2308      	movs	r3, #8
 80039ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	611a      	str	r2, [r3, #16]
          break;
 80039d6:	e009      	b.n	80039ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039d8:	2308      	movs	r3, #8
 80039da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	615a      	str	r2, [r3, #20]
          break;
 80039e2:	e003      	b.n	80039ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039e4:	2300      	movs	r3, #0
 80039e6:	623b      	str	r3, [r7, #32]
          break;
 80039e8:	e000      	b.n	80039ec <HAL_GPIO_Init+0x130>
          break;
 80039ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	2bff      	cmp	r3, #255	; 0xff
 80039f0:	d801      	bhi.n	80039f6 <HAL_GPIO_Init+0x13a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	e001      	b.n	80039fa <HAL_GPIO_Init+0x13e>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3304      	adds	r3, #4
 80039fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d802      	bhi.n	8003a08 <HAL_GPIO_Init+0x14c>
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	e002      	b.n	8003a0e <HAL_GPIO_Init+0x152>
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	3b08      	subs	r3, #8
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	210f      	movs	r1, #15
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	43db      	mvns	r3, r3
 8003a1e:	401a      	ands	r2, r3
 8003a20:	6a39      	ldr	r1, [r7, #32]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	fa01 f303 	lsl.w	r3, r1, r3
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 80b1 	beq.w	8003b9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a3c:	4b4d      	ldr	r3, [pc, #308]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	4a4c      	ldr	r2, [pc, #304]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003a42:	f043 0301 	orr.w	r3, r3, #1
 8003a46:	6193      	str	r3, [r2, #24]
 8003a48:	4b4a      	ldr	r3, [pc, #296]	; (8003b74 <HAL_GPIO_Init+0x2b8>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a54:	4a48      	ldr	r2, [pc, #288]	; (8003b78 <HAL_GPIO_Init+0x2bc>)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4013      	ands	r3, r2
 8003a76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <HAL_GPIO_Init+0x2c0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <HAL_GPIO_Init+0x1ec>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a3f      	ldr	r2, [pc, #252]	; (8003b80 <HAL_GPIO_Init+0x2c4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00d      	beq.n	8003aa4 <HAL_GPIO_Init+0x1e8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3e      	ldr	r2, [pc, #248]	; (8003b84 <HAL_GPIO_Init+0x2c8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d007      	beq.n	8003aa0 <HAL_GPIO_Init+0x1e4>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3d      	ldr	r2, [pc, #244]	; (8003b88 <HAL_GPIO_Init+0x2cc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_GPIO_Init+0x1e0>
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e006      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	e004      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	e002      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <HAL_GPIO_Init+0x1ee>
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	f002 0203 	and.w	r2, r2, #3
 8003ab0:	0092      	lsls	r2, r2, #2
 8003ab2:	4093      	lsls	r3, r2
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003aba:	492f      	ldr	r1, [pc, #188]	; (8003b78 <HAL_GPIO_Init+0x2bc>)
 8003abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abe:	089b      	lsrs	r3, r3, #2
 8003ac0:	3302      	adds	r3, #2
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d006      	beq.n	8003ae2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ad4:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	492c      	ldr	r1, [pc, #176]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	600b      	str	r3, [r1, #0]
 8003ae0:	e006      	b.n	8003af0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ae2:	4b2a      	ldr	r3, [pc, #168]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	4928      	ldr	r1, [pc, #160]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003afc:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	4922      	ldr	r1, [pc, #136]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
 8003b08:	e006      	b.n	8003b18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	43db      	mvns	r3, r3
 8003b12:	491e      	ldr	r1, [pc, #120]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d006      	beq.n	8003b32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	4918      	ldr	r1, [pc, #96]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]
 8003b30:	e006      	b.n	8003b40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	4914      	ldr	r1, [pc, #80]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d021      	beq.n	8003b90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b4c:	4b0f      	ldr	r3, [pc, #60]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	490e      	ldr	r1, [pc, #56]	; (8003b8c <HAL_GPIO_Init+0x2d0>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60cb      	str	r3, [r1, #12]
 8003b58:	e021      	b.n	8003b9e <HAL_GPIO_Init+0x2e2>
 8003b5a:	bf00      	nop
 8003b5c:	10320000 	.word	0x10320000
 8003b60:	10310000 	.word	0x10310000
 8003b64:	10220000 	.word	0x10220000
 8003b68:	10210000 	.word	0x10210000
 8003b6c:	10120000 	.word	0x10120000
 8003b70:	10110000 	.word	0x10110000
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40010000 	.word	0x40010000
 8003b7c:	40010800 	.word	0x40010800
 8003b80:	40010c00 	.word	0x40010c00
 8003b84:	40011000 	.word	0x40011000
 8003b88:	40011400 	.word	0x40011400
 8003b8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b90:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_GPIO_Init+0x304>)
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	43db      	mvns	r3, r3
 8003b98:	4909      	ldr	r1, [pc, #36]	; (8003bc0 <HAL_GPIO_Init+0x304>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	fa22 f303 	lsr.w	r3, r2, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f47f ae8e 	bne.w	80038d0 <HAL_GPIO_Init+0x14>
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	372c      	adds	r7, #44	; 0x2c
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	40010400 	.word	0x40010400

08003bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	807b      	strh	r3, [r7, #2]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bd4:	787b      	ldrb	r3, [r7, #1]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003be0:	e003      	b.n	8003bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003be2:	887b      	ldrh	r3, [r7, #2]
 8003be4:	041a      	lsls	r2, r3, #16
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	611a      	str	r2, [r3, #16]
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	041a      	lsls	r2, r3, #16
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	43d9      	mvns	r1, r3
 8003c12:	887b      	ldrh	r3, [r7, #2]
 8003c14:	400b      	ands	r3, r1
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	611a      	str	r2, [r3, #16]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e272      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 8087 	beq.w	8003d56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c48:	4b92      	ldr	r3, [pc, #584]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d00c      	beq.n	8003c6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c54:	4b8f      	ldr	r3, [pc, #572]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 030c 	and.w	r3, r3, #12
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d112      	bne.n	8003c86 <HAL_RCC_OscConfig+0x5e>
 8003c60:	4b8c      	ldr	r3, [pc, #560]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6c:	d10b      	bne.n	8003c86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c6e:	4b89      	ldr	r3, [pc, #548]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d06c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x12c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d168      	bne.n	8003d54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e24c      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x76>
 8003c90:	4b80      	ldr	r3, [pc, #512]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7f      	ldr	r2, [pc, #508]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	e02e      	b.n	8003cfc <HAL_RCC_OscConfig+0xd4>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x98>
 8003ca6:	4b7b      	ldr	r3, [pc, #492]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7a      	ldr	r2, [pc, #488]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b78      	ldr	r3, [pc, #480]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a77      	ldr	r2, [pc, #476]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e01d      	b.n	8003cfc <HAL_RCC_OscConfig+0xd4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xbc>
 8003cca:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a71      	ldr	r2, [pc, #452]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a6e      	ldr	r2, [pc, #440]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0xd4>
 8003ce4:	4b6b      	ldr	r3, [pc, #428]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6a      	ldr	r2, [pc, #424]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b68      	ldr	r3, [pc, #416]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a67      	ldr	r2, [pc, #412]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe fc82 	bl	800260c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fc7e 	bl	800260c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e200      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b5d      	ldr	r3, [pc, #372]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0xe4>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fe fc6e 	bl	800260c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fe fc6a 	bl	800260c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e1ec      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d46:	4b53      	ldr	r3, [pc, #332]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0x10c>
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d063      	beq.n	8003e2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d62:	4b4c      	ldr	r3, [pc, #304]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d6e:	4b49      	ldr	r3, [pc, #292]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f003 030c 	and.w	r3, r3, #12
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d11c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x18c>
 8003d7a:	4b46      	ldr	r3, [pc, #280]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d86:	4b43      	ldr	r3, [pc, #268]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RCC_OscConfig+0x176>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1c0      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4939      	ldr	r1, [pc, #228]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	e03a      	b.n	8003e2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dbc:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fc23 	bl	800260c <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fe fc1f 	bl	800260c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e1a1      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de8:	4b2a      	ldr	r3, [pc, #168]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4927      	ldr	r1, [pc, #156]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfe:	4b26      	ldr	r3, [pc, #152]	; (8003e98 <HAL_RCC_OscConfig+0x270>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe fc02 	bl	800260c <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fbfe 	bl	800260c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e180      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d03a      	beq.n	8003eac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d019      	beq.n	8003e72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b17      	ldr	r3, [pc, #92]	; (8003e9c <HAL_RCC_OscConfig+0x274>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e44:	f7fe fbe2 	bl	800260c <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fbde 	bl	800260c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e160      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	4b0d      	ldr	r3, [pc, #52]	; (8003e94 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	f000 fad8 	bl	8004420 <RCC_Delay>
 8003e70:	e01c      	b.n	8003eac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <HAL_RCC_OscConfig+0x274>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e78:	f7fe fbc8 	bl	800260c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7e:	e00f      	b.n	8003ea0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e80:	f7fe fbc4 	bl	800260c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d908      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e146      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
 8003e92:	bf00      	nop
 8003e94:	40021000 	.word	0x40021000
 8003e98:	42420000 	.word	0x42420000
 8003e9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	4b92      	ldr	r3, [pc, #584]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e9      	bne.n	8003e80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80a6 	beq.w	8004006 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ebe:	4b8b      	ldr	r3, [pc, #556]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10d      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eca:	4b88      	ldr	r3, [pc, #544]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	4a87      	ldr	r2, [pc, #540]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	61d3      	str	r3, [r2, #28]
 8003ed6:	4b85      	ldr	r3, [pc, #532]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b82      	ldr	r3, [pc, #520]	; (80040f0 <HAL_RCC_OscConfig+0x4c8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b7f      	ldr	r3, [pc, #508]	; (80040f0 <HAL_RCC_OscConfig+0x4c8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a7e      	ldr	r2, [pc, #504]	; (80040f0 <HAL_RCC_OscConfig+0x4c8>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fe fb85 	bl	800260c <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fe fb81 	bl	800260c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	; 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e103      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b75      	ldr	r3, [pc, #468]	; (80040f0 <HAL_RCC_OscConfig+0x4c8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_OscConfig+0x312>
 8003f2c:	4b6f      	ldr	r3, [pc, #444]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	4a6e      	ldr	r2, [pc, #440]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6213      	str	r3, [r2, #32]
 8003f38:	e02d      	b.n	8003f96 <HAL_RCC_OscConfig+0x36e>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x334>
 8003f42:	4b6a      	ldr	r3, [pc, #424]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	4a69      	ldr	r2, [pc, #420]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	6213      	str	r3, [r2, #32]
 8003f4e:	4b67      	ldr	r3, [pc, #412]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a66      	ldr	r2, [pc, #408]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f54:	f023 0304 	bic.w	r3, r3, #4
 8003f58:	6213      	str	r3, [r2, #32]
 8003f5a:	e01c      	b.n	8003f96 <HAL_RCC_OscConfig+0x36e>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	2b05      	cmp	r3, #5
 8003f62:	d10c      	bne.n	8003f7e <HAL_RCC_OscConfig+0x356>
 8003f64:	4b61      	ldr	r3, [pc, #388]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	4a60      	ldr	r2, [pc, #384]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	f043 0304 	orr.w	r3, r3, #4
 8003f6e:	6213      	str	r3, [r2, #32]
 8003f70:	4b5e      	ldr	r3, [pc, #376]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4a5d      	ldr	r2, [pc, #372]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f76:	f043 0301 	orr.w	r3, r3, #1
 8003f7a:	6213      	str	r3, [r2, #32]
 8003f7c:	e00b      	b.n	8003f96 <HAL_RCC_OscConfig+0x36e>
 8003f7e:	4b5b      	ldr	r3, [pc, #364]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	4a5a      	ldr	r2, [pc, #360]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6213      	str	r3, [r2, #32]
 8003f8a:	4b58      	ldr	r3, [pc, #352]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	4a57      	ldr	r2, [pc, #348]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d015      	beq.n	8003fca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f9e:	f7fe fb35 	bl	800260c <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fa4:	e00a      	b.n	8003fbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa6:	f7fe fb31 	bl	800260c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0b1      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0ee      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x37e>
 8003fc8:	e014      	b.n	8003ff4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fca:	f7fe fb1f 	bl	800260c <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fd0:	e00a      	b.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fe fb1b 	bl	800260c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e09b      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe8:	4b40      	ldr	r3, [pc, #256]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ee      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d105      	bne.n	8004006 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ffa:	4b3c      	ldr	r3, [pc, #240]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	4a3b      	ldr	r2, [pc, #236]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8004000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004004:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 8087 	beq.w	800411e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004010:	4b36      	ldr	r3, [pc, #216]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b08      	cmp	r3, #8
 800401a:	d061      	beq.n	80040e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b02      	cmp	r3, #2
 8004022:	d146      	bne.n	80040b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004024:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <HAL_RCC_OscConfig+0x4cc>)
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402a:	f7fe faef 	bl	800260c <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004032:	f7fe faeb 	bl	800260c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e06d      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004044:	4b29      	ldr	r3, [pc, #164]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1f0      	bne.n	8004032 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a1b      	ldr	r3, [r3, #32]
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d108      	bne.n	800406c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800405a:	4b24      	ldr	r3, [pc, #144]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	4921      	ldr	r1, [pc, #132]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8004068:	4313      	orrs	r3, r2
 800406a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800406c:	4b1f      	ldr	r3, [pc, #124]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a19      	ldr	r1, [r3, #32]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	430b      	orrs	r3, r1
 800407e:	491b      	ldr	r1, [pc, #108]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <HAL_RCC_OscConfig+0x4cc>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fe fabf 	bl	800260c <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004092:	f7fe fabb 	bl	800260c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e03d      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x46a>
 80040b0:	e035      	b.n	800411e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_OscConfig+0x4cc>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fe faa8 	bl	800260c <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fe faa4 	bl	800260c <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e026      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d2:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCC_OscConfig+0x4c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x498>
 80040de:	e01e      	b.n	800411e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e019      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40007000 	.word	0x40007000
 80040f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_OscConfig+0x500>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	429a      	cmp	r2, r3
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e000      	b.n	8004120 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40021000 	.word	0x40021000

0800412c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e0d0      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004140:	4b6a      	ldr	r3, [pc, #424]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	429a      	cmp	r2, r3
 800414c:	d910      	bls.n	8004170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800414e:	4b67      	ldr	r3, [pc, #412]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 0207 	bic.w	r2, r3, #7
 8004156:	4965      	ldr	r1, [pc, #404]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b63      	ldr	r3, [pc, #396]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e0b8      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d020      	beq.n	80041be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004188:	4b59      	ldr	r3, [pc, #356]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a58      	ldr	r2, [pc, #352]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 800418e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a0:	4b53      	ldr	r3, [pc, #332]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4a52      	ldr	r2, [pc, #328]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80041aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ac:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	494d      	ldr	r1, [pc, #308]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d040      	beq.n	800424c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d115      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e07f      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d107      	bne.n	80041fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ea:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e073      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fa:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06b      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f023 0203 	bic.w	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4936      	ldr	r1, [pc, #216]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800421c:	f7fe f9f6 	bl	800260c <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004222:	e00a      	b.n	800423a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004224:	f7fe f9f2 	bl	800260c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004232:	4293      	cmp	r3, r2
 8004234:	d901      	bls.n	800423a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e053      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423a:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f003 020c 	and.w	r2, r3, #12
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	429a      	cmp	r2, r3
 800424a:	d1eb      	bne.n	8004224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800424c:	4b27      	ldr	r3, [pc, #156]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d210      	bcs.n	800427c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f023 0207 	bic.w	r2, r3, #7
 8004262:	4922      	ldr	r1, [pc, #136]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	4313      	orrs	r3, r2
 8004268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426a:	4b20      	ldr	r3, [pc, #128]	; (80042ec <HAL_RCC_ClockConfig+0x1c0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d001      	beq.n	800427c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e032      	b.n	80042e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d008      	beq.n	800429a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004288:	4b19      	ldr	r3, [pc, #100]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4916      	ldr	r1, [pc, #88]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004296:	4313      	orrs	r3, r2
 8004298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	490e      	ldr	r1, [pc, #56]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042ba:	f000 f821 	bl	8004300 <HAL_RCC_GetSysClockFreq>
 80042be:	4602      	mov	r2, r0
 80042c0:	4b0b      	ldr	r3, [pc, #44]	; (80042f0 <HAL_RCC_ClockConfig+0x1c4>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	091b      	lsrs	r3, r3, #4
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	490a      	ldr	r1, [pc, #40]	; (80042f4 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	5ccb      	ldrb	r3, [r1, r3]
 80042ce:	fa22 f303 	lsr.w	r3, r2, r3
 80042d2:	4a09      	ldr	r2, [pc, #36]	; (80042f8 <HAL_RCC_ClockConfig+0x1cc>)
 80042d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <HAL_RCC_ClockConfig+0x1d0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe f954 	bl	8002588 <HAL_InitTick>

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40022000 	.word	0x40022000
 80042f0:	40021000 	.word	0x40021000
 80042f4:	0800a9dc 	.word	0x0800a9dc
 80042f8:	20000004 	.word	0x20000004
 80042fc:	2000007c 	.word	0x2000007c

08004300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004300:	b490      	push	{r4, r7}
 8004302:	b08a      	sub	sp, #40	; 0x28
 8004304:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004306:	4b29      	ldr	r3, [pc, #164]	; (80043ac <HAL_RCC_GetSysClockFreq+0xac>)
 8004308:	1d3c      	adds	r4, r7, #4
 800430a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800430c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004310:	f240 2301 	movw	r3, #513	; 0x201
 8004314:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
 800431a:	2300      	movs	r3, #0
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	2300      	movs	r3, #0
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004326:	2300      	movs	r3, #0
 8004328:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800432a:	4b21      	ldr	r3, [pc, #132]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b04      	cmp	r3, #4
 8004338:	d002      	beq.n	8004340 <HAL_RCC_GetSysClockFreq+0x40>
 800433a:	2b08      	cmp	r3, #8
 800433c:	d003      	beq.n	8004346 <HAL_RCC_GetSysClockFreq+0x46>
 800433e:	e02b      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004340:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004342:	623b      	str	r3, [r7, #32]
      break;
 8004344:	e02b      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	0c9b      	lsrs	r3, r3, #18
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	3328      	adds	r3, #40	; 0x28
 8004350:	443b      	add	r3, r7
 8004352:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004356:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d012      	beq.n	8004388 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004362:	4b13      	ldr	r3, [pc, #76]	; (80043b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	0c5b      	lsrs	r3, r3, #17
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	3328      	adds	r3, #40	; 0x28
 800436e:	443b      	add	r3, r7
 8004370:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004374:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	4a0e      	ldr	r2, [pc, #56]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800437a:	fb03 f202 	mul.w	r2, r3, r2
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	fbb2 f3f3 	udiv	r3, r2, r3
 8004384:	627b      	str	r3, [r7, #36]	; 0x24
 8004386:	e004      	b.n	8004392 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	4a0b      	ldr	r2, [pc, #44]	; (80043b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800438c:	fb02 f303 	mul.w	r3, r2, r3
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	623b      	str	r3, [r7, #32]
      break;
 8004396:	e002      	b.n	800439e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004398:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800439a:	623b      	str	r3, [r7, #32]
      break;
 800439c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439e:	6a3b      	ldr	r3, [r7, #32]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3728      	adds	r7, #40	; 0x28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bc90      	pop	{r4, r7}
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	0800a984 	.word	0x0800a984
 80043b0:	40021000 	.word	0x40021000
 80043b4:	007a1200 	.word	0x007a1200
 80043b8:	003d0900 	.word	0x003d0900

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b02      	ldr	r3, [pc, #8]	; (80043cc <HAL_RCC_GetHCLKFreq+0x10>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	20000004 	.word	0x20000004

080043d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043d4:	f7ff fff2 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043d8:	4602      	mov	r2, r0
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	0a1b      	lsrs	r3, r3, #8
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	4903      	ldr	r1, [pc, #12]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e6:	5ccb      	ldrb	r3, [r1, r3]
 80043e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40021000 	.word	0x40021000
 80043f4:	0800a9ec 	.word	0x0800a9ec

080043f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043fc:	f7ff ffde 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	0adb      	lsrs	r3, r3, #11
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	4903      	ldr	r1, [pc, #12]	; (800441c <HAL_RCC_GetPCLK2Freq+0x24>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004414:	4618      	mov	r0, r3
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	0800a9ec 	.word	0x0800a9ec

08004420 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004428:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <RCC_Delay+0x34>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <RCC_Delay+0x38>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0a5b      	lsrs	r3, r3, #9
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800443c:	bf00      	nop
  }
  while (Delay --);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1e5a      	subs	r2, r3, #1
 8004442:	60fa      	str	r2, [r7, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f9      	bne.n	800443c <RCC_Delay+0x1c>
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr
 8004454:	20000004 	.word	0x20000004
 8004458:	10624dd3 	.word	0x10624dd3

0800445c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e076      	b.n	800455c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b00      	cmp	r3, #0
 8004474:	d108      	bne.n	8004488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800447e:	d009      	beq.n	8004494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	61da      	str	r2, [r3, #28]
 8004486:	e005      	b.n	8004494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d106      	bne.n	80044b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7fc ff7c 	bl	80013ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004518:	ea42 0103 	orr.w	r1, r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004520:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	0c1a      	lsrs	r2, r3, #16
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f002 0204 	and.w	r2, r2, #4
 800453a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69da      	ldr	r2, [r3, #28]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800454a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	4613      	mov	r3, r2
 8004572:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_SPI_Transmit+0x22>
 8004582:	2302      	movs	r3, #2
 8004584:	e126      	b.n	80047d4 <HAL_SPI_Transmit+0x270>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458e:	f7fe f83d 	bl	800260c <HAL_GetTick>
 8004592:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004594:	88fb      	ldrh	r3, [r7, #6]
 8004596:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d002      	beq.n	80045aa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
 80045a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045a8:	e10b      	b.n	80047c2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <HAL_SPI_Transmit+0x52>
 80045b0:	88fb      	ldrh	r3, [r7, #6]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045ba:	e102      	b.n	80047c2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2203      	movs	r2, #3
 80045c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004602:	d10f      	bne.n	8004624 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004612:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004622:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462e:	2b40      	cmp	r3, #64	; 0x40
 8004630:	d007      	beq.n	8004642 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004640:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800464a:	d14b      	bne.n	80046e4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_SPI_Transmit+0xf6>
 8004654:	8afb      	ldrh	r3, [r7, #22]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d13e      	bne.n	80046d8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	881a      	ldrh	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	1c9a      	adds	r2, r3, #2
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800467e:	e02b      	b.n	80046d8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b02      	cmp	r3, #2
 800468c:	d112      	bne.n	80046b4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	881a      	ldrh	r2, [r3, #0]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	86da      	strh	r2, [r3, #54]	; 0x36
 80046b2:	e011      	b.n	80046d8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b4:	f7fd ffaa 	bl	800260c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d803      	bhi.n	80046cc <HAL_SPI_Transmit+0x168>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d102      	bne.n	80046d2 <HAL_SPI_Transmit+0x16e>
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046d6:	e074      	b.n	80047c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ce      	bne.n	8004680 <HAL_SPI_Transmit+0x11c>
 80046e2:	e04c      	b.n	800477e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <HAL_SPI_Transmit+0x18e>
 80046ec:	8afb      	ldrh	r3, [r7, #22]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d140      	bne.n	8004774 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	7812      	ldrb	r2, [r2, #0]
 80046fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004718:	e02c      	b.n	8004774 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d113      	bne.n	8004750 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	330c      	adds	r3, #12
 8004732:	7812      	ldrb	r2, [r2, #0]
 8004734:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004744:	b29b      	uxth	r3, r3
 8004746:	3b01      	subs	r3, #1
 8004748:	b29a      	uxth	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	86da      	strh	r2, [r3, #54]	; 0x36
 800474e:	e011      	b.n	8004774 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004750:	f7fd ff5c 	bl	800260c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	429a      	cmp	r2, r3
 800475e:	d803      	bhi.n	8004768 <HAL_SPI_Transmit+0x204>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004766:	d102      	bne.n	800476e <HAL_SPI_Transmit+0x20a>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d102      	bne.n	8004774 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004772:	e026      	b.n	80047c2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1cd      	bne.n	800471a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fa54 	bl	8004c30 <SPI_EndRxTxTransaction>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2220      	movs	r2, #32
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10a      	bne.n	80047b2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479c:	2300      	movs	r3, #0
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	77fb      	strb	r3, [r7, #31]
 80047be:	e000      	b.n	80047c2 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08c      	sub	sp, #48	; 0x30
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047ea:	2301      	movs	r3, #1
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d101      	bne.n	8004802 <HAL_SPI_TransmitReceive+0x26>
 80047fe:	2302      	movs	r3, #2
 8004800:	e18a      	b.n	8004b18 <HAL_SPI_TransmitReceive+0x33c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800480a:	f7fd feff 	bl	800260c <HAL_GetTick>
 800480e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004820:	887b      	ldrh	r3, [r7, #2]
 8004822:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004828:	2b01      	cmp	r3, #1
 800482a:	d00f      	beq.n	800484c <HAL_SPI_TransmitReceive+0x70>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004832:	d107      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <HAL_SPI_TransmitReceive+0x68>
 800483c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004840:	2b04      	cmp	r3, #4
 8004842:	d003      	beq.n	800484c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004844:	2302      	movs	r3, #2
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800484a:	e15b      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_SPI_TransmitReceive+0x82>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <HAL_SPI_TransmitReceive+0x82>
 8004858:	887b      	ldrh	r3, [r7, #2]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d103      	bne.n	8004866 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004864:	e14e      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b04      	cmp	r3, #4
 8004870:	d003      	beq.n	800487a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2205      	movs	r2, #5
 8004876:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	887a      	ldrh	r2, [r7, #2]
 800488a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	887a      	ldrh	r2, [r7, #2]
 800489c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	887a      	ldrh	r2, [r7, #2]
 80048a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b40      	cmp	r3, #64	; 0x40
 80048bc:	d007      	beq.n	80048ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048d6:	d178      	bne.n	80049ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <HAL_SPI_TransmitReceive+0x10a>
 80048e0:	8b7b      	ldrh	r3, [r7, #26]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d166      	bne.n	80049b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	881a      	ldrh	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	1c9a      	adds	r2, r3, #2
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800490a:	e053      	b.n	80049b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b02      	cmp	r3, #2
 8004918:	d11b      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x176>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491e:	b29b      	uxth	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d016      	beq.n	8004952 <HAL_SPI_TransmitReceive+0x176>
 8004924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004926:	2b01      	cmp	r3, #1
 8004928:	d113      	bne.n	8004952 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	881a      	ldrh	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493a:	1c9a      	adds	r2, r3, #2
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b01      	cmp	r3, #1
 800495e:	d119      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x1b8>
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d014      	beq.n	8004994 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	b292      	uxth	r2, r2
 8004976:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497c:	1c9a      	adds	r2, r3, #2
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004990:	2301      	movs	r3, #1
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004994:	f7fd fe3a 	bl	800260c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d807      	bhi.n	80049b4 <HAL_SPI_TransmitReceive+0x1d8>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049aa:	d003      	beq.n	80049b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049b2:	e0a7      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1a6      	bne.n	800490c <HAL_SPI_TransmitReceive+0x130>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1a1      	bne.n	800490c <HAL_SPI_TransmitReceive+0x130>
 80049c8:	e07c      	b.n	8004ac4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <HAL_SPI_TransmitReceive+0x1fc>
 80049d2:	8b7b      	ldrh	r3, [r7, #26]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d16b      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	7812      	ldrb	r2, [r2, #0]
 80049e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	1c5a      	adds	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049fe:	e057      	b.n	8004ab0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d11c      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x26c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d017      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x26c>
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d114      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 0301 	and.w	r3, r3, #1
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d119      	bne.n	8004a8a <HAL_SPI_TransmitReceive+0x2ae>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d014      	beq.n	8004a8a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a86:	2301      	movs	r3, #1
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a8a:	f7fd fdbf 	bl	800260c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d803      	bhi.n	8004aa2 <HAL_SPI_TransmitReceive+0x2c6>
 8004a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d102      	bne.n	8004aa8 <HAL_SPI_TransmitReceive+0x2cc>
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d103      	bne.n	8004ab0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004aae:	e029      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1a2      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x224>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d19d      	bne.n	8004a00 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f8b1 	bl	8004c30 <SPI_EndRxTxTransaction>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d006      	beq.n	8004ae2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ae0:	e010      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aea:	2300      	movs	r3, #0
 8004aec:	617b      	str	r3, [r7, #20]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	617b      	str	r3, [r7, #20]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	617b      	str	r3, [r7, #20]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	e000      	b.n	8004b04 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004b02:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3730      	adds	r7, #48	; 0x30
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b30:	f7fd fd6c 	bl	800260c <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	1a9b      	subs	r3, r3, r2
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b40:	f7fd fd64 	bl	800260c <HAL_GetTick>
 8004b44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b46:	4b39      	ldr	r3, [pc, #228]	; (8004c2c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	015b      	lsls	r3, r3, #5
 8004b4c:	0d1b      	lsrs	r3, r3, #20
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	fb02 f303 	mul.w	r3, r2, r3
 8004b54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b56:	e054      	b.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d050      	beq.n	8004c02 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b60:	f7fd fd54 	bl	800260c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d902      	bls.n	8004b76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d13d      	bne.n	8004bf2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b8e:	d111      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	d004      	beq.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba2:	d107      	bne.n	8004bb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bbc:	d10f      	bne.n	8004bde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e017      	b.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d101      	bne.n	8004bfc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d19b      	bne.n	8004b58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3720      	adds	r7, #32
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000004 	.word	0x20000004

08004c30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff ff6a 	bl	8004b20 <SPI_WaitFlagStateUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e000      	b.n	8004c64 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e041      	b.n	8004d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fbd4 	bl	8001440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f000 fa70 	bl	8005190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d001      	beq.n	8004d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e03a      	b.n	8004d9a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a18      	ldr	r2, [pc, #96]	; (8004da4 <HAL_TIM_Base_Start_IT+0x98>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d00e      	beq.n	8004d64 <HAL_TIM_Base_Start_IT+0x58>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d009      	beq.n	8004d64 <HAL_TIM_Base_Start_IT+0x58>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a14      	ldr	r2, [pc, #80]	; (8004da8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d004      	beq.n	8004d64 <HAL_TIM_Base_Start_IT+0x58>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <HAL_TIM_Base_Start_IT+0xa0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d111      	bne.n	8004d88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d010      	beq.n	8004d98 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0201 	orr.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d86:	e007      	b.n	8004d98 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0201 	orr.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bc80      	pop	{r7}
 8004da2:	4770      	bx	lr
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800

08004db0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d122      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d11b      	bne.n	8004e0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f06f 0202 	mvn.w	r2, #2
 8004ddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f9b1 	bl	800515a <HAL_TIM_IC_CaptureCallback>
 8004df8:	e005      	b.n	8004e06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f9a4 	bl	8005148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 f9b3 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d122      	bne.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d11b      	bne.n	8004e60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0204 	mvn.w	r2, #4
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f987 	bl	800515a <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f97a 	bl	8005148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f989 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d122      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0208 	mvn.w	r2, #8
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f95d 	bl	800515a <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f950 	bl	8005148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f95f 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	2b10      	cmp	r3, #16
 8004ec0:	d122      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f003 0310 	and.w	r3, r3, #16
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d11b      	bne.n	8004f08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f06f 0210 	mvn.w	r2, #16
 8004ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2208      	movs	r2, #8
 8004ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d003      	beq.n	8004ef6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f933 	bl	800515a <HAL_TIM_IC_CaptureCallback>
 8004ef4:	e005      	b.n	8004f02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f926 	bl	8005148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f935 	bl	800516c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d10e      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d107      	bne.n	8004f34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0201 	mvn.w	r2, #1
 8004f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f7fb fea8 	bl	8000c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3e:	2b80      	cmp	r3, #128	; 0x80
 8004f40:	d10e      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f4c:	2b80      	cmp	r3, #128	; 0x80
 8004f4e:	d107      	bne.n	8004f60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa77 	bl	800544e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d10e      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d107      	bne.n	8004f8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f8f9 	bl	800517e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d10e      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0320 	and.w	r3, r3, #32
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d107      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0220 	mvn.w	r2, #32
 8004fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fa42 	bl	800543c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb8:	bf00      	nop
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_TIM_ConfigClockSource+0x18>
 8004fd4:	2302      	movs	r3, #2
 8004fd6:	e0b3      	b.n	8005140 <HAL_TIM_ConfigClockSource+0x180>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005010:	d03e      	beq.n	8005090 <HAL_TIM_ConfigClockSource+0xd0>
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005016:	f200 8087 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x168>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	f000 8085 	beq.w	800512c <HAL_TIM_ConfigClockSource+0x16c>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d87f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x168>
 8005028:	2b70      	cmp	r3, #112	; 0x70
 800502a:	d01a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0xa2>
 800502c:	2b70      	cmp	r3, #112	; 0x70
 800502e:	d87b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x168>
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d050      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x116>
 8005034:	2b60      	cmp	r3, #96	; 0x60
 8005036:	d877      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x168>
 8005038:	2b50      	cmp	r3, #80	; 0x50
 800503a:	d03c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0xf6>
 800503c:	2b50      	cmp	r3, #80	; 0x50
 800503e:	d873      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x168>
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d058      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x136>
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d86f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x168>
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d064      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x156>
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d86b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x168>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d060      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x156>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d867      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x168>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05c      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x156>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d05a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005060:	e062      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6899      	ldr	r1, [r3, #8]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f000 f966 	bl	8005342 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005084:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	609a      	str	r2, [r3, #8]
      break;
 800508e:	e04e      	b.n	800512e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f000 f94f 	bl	8005342 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b2:	609a      	str	r2, [r3, #8]
      break;
 80050b4:	e03b      	b.n	800512e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 f8c6 	bl	8005254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2150      	movs	r1, #80	; 0x50
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f91d 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 80050d4:	e02b      	b.n	800512e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 f8e4 	bl	80052b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2160      	movs	r1, #96	; 0x60
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f90d 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 80050f4:	e01b      	b.n	800512e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	461a      	mov	r2, r3
 8005104:	f000 f8a6 	bl	8005254 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f8fd 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8005114:	e00b      	b.n	800512e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 f8f4 	bl	800530e <TIM_ITRx_SetConfig>
        break;
 8005126:	e002      	b.n	800512e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800512c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr

0800516c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a29      	ldr	r2, [pc, #164]	; (8005248 <TIM_Base_SetConfig+0xb8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <TIM_Base_SetConfig+0x30>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ae:	d007      	beq.n	80051c0 <TIM_Base_SetConfig+0x30>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a26      	ldr	r2, [pc, #152]	; (800524c <TIM_Base_SetConfig+0xbc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_Base_SetConfig+0x30>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a25      	ldr	r2, [pc, #148]	; (8005250 <TIM_Base_SetConfig+0xc0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d108      	bne.n	80051d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4a1c      	ldr	r2, [pc, #112]	; (8005248 <TIM_Base_SetConfig+0xb8>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <TIM_Base_SetConfig+0x62>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e0:	d007      	beq.n	80051f2 <TIM_Base_SetConfig+0x62>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <TIM_Base_SetConfig+0xbc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_Base_SetConfig+0x62>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a18      	ldr	r2, [pc, #96]	; (8005250 <TIM_Base_SetConfig+0xc0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d108      	bne.n	8005204 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a07      	ldr	r2, [pc, #28]	; (8005248 <TIM_Base_SetConfig+0xb8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d103      	bne.n	8005238 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	615a      	str	r2, [r3, #20]
}
 800523e:	bf00      	nop
 8005240:	3714      	adds	r7, #20
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800

08005254 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a1b      	ldr	r3, [r3, #32]
 8005264:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0201 	bic.w	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f023 030a 	bic.w	r3, r3, #10
 8005290:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	4313      	orrs	r3, r2
 8005298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	621a      	str	r2, [r3, #32]
}
 80052a6:	bf00      	nop
 80052a8:	371c      	adds	r7, #28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f023 0210 	bic.w	r2, r3, #16
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	031b      	lsls	r3, r3, #12
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	4313      	orrs	r3, r2
 80052f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	621a      	str	r2, [r3, #32]
}
 8005304:	bf00      	nop
 8005306:	371c      	adds	r7, #28
 8005308:	46bd      	mov	sp, r7
 800530a:	bc80      	pop	{r7}
 800530c:	4770      	bx	lr

0800530e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	f043 0307 	orr.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005342:	b480      	push	{r7}
 8005344:	b087      	sub	sp, #28
 8005346:	af00      	add	r7, sp, #0
 8005348:	60f8      	str	r0, [r7, #12]
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	021a      	lsls	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	431a      	orrs	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	4313      	orrs	r3, r2
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4313      	orrs	r3, r2
 800536e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	609a      	str	r2, [r3, #8]
}
 8005376:	bf00      	nop
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	bc80      	pop	{r7}
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005394:	2302      	movs	r3, #2
 8005396:	e046      	b.n	8005426 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a16      	ldr	r2, [pc, #88]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e4:	d009      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a12      	ldr	r2, [pc, #72]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a10      	ldr	r2, [pc, #64]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d10c      	bne.n	8005414 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	4313      	orrs	r3, r2
 800540a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	bc80      	pop	{r7}
 800542e:	4770      	bx	lr
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800

0800543c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	bc80      	pop	{r7}
 800544c:	4770      	bx	lr

0800544e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e03f      	b.n	80054f2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7fc f81a 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2224      	movs	r2, #36	; 0x24
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fc85 	bl	8005db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691a      	ldr	r2, [r3, #16]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	695a      	ldr	r2, [r3, #20]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b08a      	sub	sp, #40	; 0x28
 80054fe:	af02      	add	r7, sp, #8
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b20      	cmp	r3, #32
 8005518:	d17c      	bne.n	8005614 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_UART_Transmit+0x2c>
 8005520:	88fb      	ldrh	r3, [r7, #6]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e075      	b.n	8005616 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005530:	2b01      	cmp	r3, #1
 8005532:	d101      	bne.n	8005538 <HAL_UART_Transmit+0x3e>
 8005534:	2302      	movs	r3, #2
 8005536:	e06e      	b.n	8005616 <HAL_UART_Transmit+0x11c>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2221      	movs	r2, #33	; 0x21
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800554e:	f7fd f85d 	bl	800260c <HAL_GetTick>
 8005552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	88fa      	ldrh	r2, [r7, #6]
 8005558:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	88fa      	ldrh	r2, [r7, #6]
 800555e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005568:	d108      	bne.n	800557c <HAL_UART_Transmit+0x82>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d104      	bne.n	800557c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e003      	b.n	8005584 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800558c:	e02a      	b.n	80055e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2200      	movs	r2, #0
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fa38 	bl	8005a0e <UART_WaitOnFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e036      	b.n	8005616 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	3302      	adds	r3, #2
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	e007      	b.n	80055d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1cf      	bne.n	800558e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	2140      	movs	r1, #64	; 0x40
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fa08 	bl	8005a0e <UART_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e006      	b.n	8005616 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800561e:	b580      	push	{r7, lr}
 8005620:	b084      	sub	sp, #16
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	4613      	mov	r3, r2
 800562a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b20      	cmp	r3, #32
 8005636:	d11d      	bne.n	8005674 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Receive_IT+0x26>
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e016      	b.n	8005676 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_UART_Receive_IT+0x38>
 8005652:	2302      	movs	r3, #2
 8005654:	e00f      	b.n	8005676 <HAL_UART_Receive_IT+0x58>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	461a      	mov	r2, r3
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fa19 	bl	8005aa2 <UART_Start_Receive_IT>
 8005670:	4603      	mov	r3, r0
 8005672:	e000      	b.n	8005676 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
	...

08005680 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08a      	sub	sp, #40	; 0x28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10d      	bne.n	80056d2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_UART_IRQHandler+0x52>
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fac9 	bl	8005c62 <UART_Receive_IT>
      return;
 80056d0:	e17b      	b.n	80059ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f000 80b1 	beq.w	800583c <HAL_UART_IRQHandler+0x1bc>
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d105      	bne.n	80056f0 <HAL_UART_IRQHandler+0x70>
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f000 80a6 	beq.w	800583c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_UART_IRQHandler+0x90>
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	f043 0201 	orr.w	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00a      	beq.n	8005730 <HAL_UART_IRQHandler+0xb0>
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	f043 0202 	orr.w	r2, r3, #2
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_UART_IRQHandler+0xd0>
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	f043 0204 	orr.w	r2, r3, #4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00f      	beq.n	800577a <HAL_UART_IRQHandler+0xfa>
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	f003 0320 	and.w	r3, r3, #32
 8005760:	2b00      	cmp	r3, #0
 8005762:	d104      	bne.n	800576e <HAL_UART_IRQHandler+0xee>
 8005764:	69fb      	ldr	r3, [r7, #28]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f043 0208 	orr.w	r2, r3, #8
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 811e 	beq.w	80059c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <HAL_UART_IRQHandler+0x11e>
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	f003 0320 	and.w	r3, r3, #32
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fa62 	bl	8005c62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bf14      	ite	ne
 80057ac:	2301      	movne	r3, #1
 80057ae:	2300      	moveq	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <HAL_UART_IRQHandler+0x146>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d031      	beq.n	800582a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f9a4 	bl	8005b14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d023      	beq.n	8005822 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d013      	beq.n	800581a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	4a76      	ldr	r2, [pc, #472]	; (80059d0 <HAL_UART_IRQHandler+0x350>)
 80057f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	4618      	mov	r0, r3
 8005800:	f7fd fddc 	bl	80033bc <HAL_DMA_Abort_IT>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d016      	beq.n	8005838 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005814:	4610      	mov	r0, r2
 8005816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005818:	e00e      	b.n	8005838 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8e3 	bl	80059e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005820:	e00a      	b.n	8005838 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8df 	bl	80059e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005828:	e006      	b.n	8005838 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8db 	bl	80059e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005836:	e0c3      	b.n	80059c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005838:	bf00      	nop
    return;
 800583a:	e0c1      	b.n	80059c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	2b01      	cmp	r3, #1
 8005842:	f040 80a1 	bne.w	8005988 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005848:	f003 0310 	and.w	r3, r3, #16
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 809b 	beq.w	8005988 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005852:	6a3b      	ldr	r3, [r7, #32]
 8005854:	f003 0310 	and.w	r3, r3, #16
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8095 	beq.w	8005988 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d04e      	beq.n	8005920 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800588c:	8a3b      	ldrh	r3, [r7, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8098 	beq.w	80059c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005898:	8a3a      	ldrh	r2, [r7, #16]
 800589a:	429a      	cmp	r2, r3
 800589c:	f080 8092 	bcs.w	80059c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8a3a      	ldrh	r2, [r7, #16]
 80058a4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d02b      	beq.n	8005908 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058be:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0201 	bic.w	r2, r2, #1
 80058ce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695a      	ldr	r2, [r3, #20]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058de:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f022 0210 	bic.w	r2, r2, #16
 80058fc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	4618      	mov	r0, r3
 8005904:	f7fd fd1f 	bl	8003346 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005910:	b29b      	uxth	r3, r3
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	b29b      	uxth	r3, r3
 8005916:	4619      	mov	r1, r3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f86d 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800591e:	e051      	b.n	80059c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005928:	b29b      	uxth	r3, r3
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005932:	b29b      	uxth	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d047      	beq.n	80059c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005938:	8a7b      	ldrh	r3, [r7, #18]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d044      	beq.n	80059c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68da      	ldr	r2, [r3, #12]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800594c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695a      	ldr	r2, [r3, #20]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0201 	bic.w	r2, r2, #1
 800595c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0210 	bic.w	r2, r2, #16
 800597a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800597c:	8a7b      	ldrh	r3, [r7, #18]
 800597e:	4619      	mov	r1, r3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f839 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005986:	e01f      	b.n	80059c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800598e:	2b00      	cmp	r3, #0
 8005990:	d008      	beq.n	80059a4 <HAL_UART_IRQHandler+0x324>
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8f9 	bl	8005b94 <UART_Transmit_IT>
    return;
 80059a2:	e012      	b.n	80059ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00d      	beq.n	80059ca <HAL_UART_IRQHandler+0x34a>
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d008      	beq.n	80059ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 f93a 	bl	8005c32 <UART_EndTransmit_IT>
    return;
 80059be:	e004      	b.n	80059ca <HAL_UART_IRQHandler+0x34a>
    return;
 80059c0:	bf00      	nop
 80059c2:	e002      	b.n	80059ca <HAL_UART_IRQHandler+0x34a>
      return;
 80059c4:	bf00      	nop
 80059c6:	e000      	b.n	80059ca <HAL_UART_IRQHandler+0x34a>
      return;
 80059c8:	bf00      	nop
  }
}
 80059ca:	3728      	adds	r7, #40	; 0x28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	08005b6d 	.word	0x08005b6d

080059d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	460b      	mov	r3, r1
 8005a02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	603b      	str	r3, [r7, #0]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a1e:	e02c      	b.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a26:	d028      	beq.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d007      	beq.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a2e:	f7fc fded 	bl	800260c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d21d      	bcs.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005a4c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	695a      	ldr	r2, [r3, #20]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0201 	bic.w	r2, r2, #1
 8005a5c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2220      	movs	r2, #32
 8005a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2220      	movs	r2, #32
 8005a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e00f      	b.n	8005a9a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	bf0c      	ite	eq
 8005a8a:	2301      	moveq	r3, #1
 8005a8c:	2300      	movne	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	461a      	mov	r2, r3
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d0c3      	beq.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}

08005aa2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	4613      	mov	r3, r2
 8005aae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	88fa      	ldrh	r2, [r7, #6]
 8005ac0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2222      	movs	r2, #34	; 0x22
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ae6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0220 	orr.w	r2, r2, #32
 8005b06:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68da      	ldr	r2, [r3, #12]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0210 	bic.w	r2, r2, #16
 8005b52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bc80      	pop	{r7}
 8005b6a:	4770      	bx	lr

08005b6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f7ff ff2d 	bl	80059e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b21      	cmp	r3, #33	; 0x21
 8005ba6:	d13e      	bne.n	8005c26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d114      	bne.n	8005bdc <UART_Transmit_IT+0x48>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d110      	bne.n	8005bdc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	1c9a      	adds	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	621a      	str	r2, [r3, #32]
 8005bda:	e008      	b.n	8005bee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	1c59      	adds	r1, r3, #1
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6211      	str	r1, [r2, #32]
 8005be6:	781a      	ldrb	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10f      	bne.n	8005c22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68da      	ldr	r2, [r3, #12]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	e000      	b.n	8005c28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c26:	2302      	movs	r3, #2
  }
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr

08005c32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7ff febe 	bl	80059d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b22      	cmp	r3, #34	; 0x22
 8005c74:	f040 8099 	bne.w	8005daa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c80:	d117      	bne.n	8005cb2 <UART_Receive_IT+0x50>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d113      	bne.n	8005cb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	1c9a      	adds	r2, r3, #2
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb0:	e026      	b.n	8005d00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc4:	d007      	beq.n	8005cd6 <UART_Receive_IT+0x74>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10a      	bne.n	8005ce4 <UART_Receive_IT+0x82>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	e008      	b.n	8005cf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf0:	b2da      	uxtb	r2, r3
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d148      	bne.n	8005da6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f022 0220 	bic.w	r2, r2, #32
 8005d22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695a      	ldr	r2, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2220      	movs	r2, #32
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d123      	bne.n	8005d9c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0210 	bic.w	r2, r2, #16
 8005d68:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b10      	cmp	r3, #16
 8005d76:	d10a      	bne.n	8005d8e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff fe2f 	bl	80059f8 <HAL_UARTEx_RxEventCallback>
 8005d9a:	e002      	b.n	8005da2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fa ff5f 	bl	8000c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	e002      	b.n	8005dac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005da6:	2300      	movs	r3, #0
 8005da8:	e000      	b.n	8005dac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005daa:	2302      	movs	r3, #2
  }
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3718      	adds	r7, #24
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005dee:	f023 030c 	bic.w	r3, r3, #12
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	68b9      	ldr	r1, [r7, #8]
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699a      	ldr	r2, [r3, #24]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a2c      	ldr	r2, [pc, #176]	; (8005ec8 <UART_SetConfig+0x114>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d103      	bne.n	8005e24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005e1c:	f7fe faec 	bl	80043f8 <HAL_RCC_GetPCLK2Freq>
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	e002      	b.n	8005e2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005e24:	f7fe fad4 	bl	80043d0 <HAL_RCC_GetPCLK1Freq>
 8005e28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	009a      	lsls	r2, r3, #2
 8005e34:	441a      	add	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e40:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <UART_SetConfig+0x118>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	095b      	lsrs	r3, r3, #5
 8005e48:	0119      	lsls	r1, r3, #4
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	009a      	lsls	r2, r3, #2
 8005e54:	441a      	add	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e60:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <UART_SetConfig+0x118>)
 8005e62:	fba3 0302 	umull	r0, r3, r3, r2
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	2064      	movs	r0, #100	; 0x64
 8005e6a:	fb00 f303 	mul.w	r3, r0, r3
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	3332      	adds	r3, #50	; 0x32
 8005e74:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <UART_SetConfig+0x118>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e80:	4419      	add	r1, r3
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4613      	mov	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	009a      	lsls	r2, r3, #2
 8005e8c:	441a      	add	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e98:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <UART_SetConfig+0x118>)
 8005e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	2064      	movs	r0, #100	; 0x64
 8005ea2:	fb00 f303 	mul.w	r3, r0, r3
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	011b      	lsls	r3, r3, #4
 8005eaa:	3332      	adds	r3, #50	; 0x32
 8005eac:	4a07      	ldr	r2, [pc, #28]	; (8005ecc <UART_SetConfig+0x118>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	095b      	lsrs	r3, r3, #5
 8005eb4:	f003 020f 	and.w	r2, r3, #15
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	440a      	add	r2, r1
 8005ebe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005ec0:	bf00      	nop
 8005ec2:	3710      	adds	r7, #16
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40013800 	.word	0x40013800
 8005ecc:	51eb851f 	.word	0x51eb851f

08005ed0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005ed4:	4904      	ldr	r1, [pc, #16]	; (8005ee8 <MX_FATFS_Init+0x18>)
 8005ed6:	4805      	ldr	r0, [pc, #20]	; (8005eec <MX_FATFS_Init+0x1c>)
 8005ed8:	f003 ff16 	bl	8009d08 <FATFS_LinkDriver>
 8005edc:	4603      	mov	r3, r0
 8005ede:	461a      	mov	r2, r3
 8005ee0:	4b03      	ldr	r3, [pc, #12]	; (8005ef0 <MX_FATFS_Init+0x20>)
 8005ee2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005ee4:	bf00      	nop
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	20002684 	.word	0x20002684
 8005eec:	20000084 	.word	0x20000084
 8005ef0:	20002680 	.word	0x20002680

08005ef4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005ef8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	4603      	mov	r3, r0
 8005f0a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_initialize(pdrv);
 8005f0c:	79fb      	ldrb	r3, [r7, #7]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fa fb78 	bl	8000604 <SD_disk_initialize>
 8005f14:	4603      	mov	r3, r0
 8005f16:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	4603      	mov	r3, r0
 8005f28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    // Stat = STA_NOINIT;
    // return Stat;
	return SD_disk_status(pdrv);
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa fc4f 	bl	80007d0 <SD_disk_status>
 8005f32:	4603      	mov	r3, r0
 8005f34:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3708      	adds	r7, #8
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b084      	sub	sp, #16
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    // return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8005f4e:	7bf8      	ldrb	r0, [r7, #15]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	68b9      	ldr	r1, [r7, #8]
 8005f56:	f7fa fc4f 	bl	80007f8 <SD_disk_read>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3710      	adds	r7, #16
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4603      	mov	r3, r0
 8005f74:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    // return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 8005f76:	7bf8      	ldrb	r0, [r7, #15]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	f7fa fca5 	bl	80008cc <SD_disk_write>
 8005f82:	4603      	mov	r3, r0
 8005f84:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b082      	sub	sp, #8
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	4603      	mov	r3, r0
 8005f96:	603a      	str	r2, [r7, #0]
 8005f98:	71fb      	strb	r3, [r7, #7]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    // DRESULT res = RES_ERROR;
    // return res;
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005f9e:	79fb      	ldrb	r3, [r7, #7]
 8005fa0:	79b9      	ldrb	r1, [r7, #6]
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fa fd15 	bl	80009d4 <SD_disk_ioctl>
 8005faa:	4603      	mov	r3, r0
 8005fac:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005fc2:	79fb      	ldrb	r3, [r7, #7]
 8005fc4:	4a08      	ldr	r2, [pc, #32]	; (8005fe8 <disk_status+0x30>)
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	79fa      	ldrb	r2, [r7, #7]
 8005fd0:	4905      	ldr	r1, [pc, #20]	; (8005fe8 <disk_status+0x30>)
 8005fd2:	440a      	add	r2, r1
 8005fd4:	7a12      	ldrb	r2, [r2, #8]
 8005fd6:	4610      	mov	r0, r2
 8005fd8:	4798      	blx	r3
 8005fda:	4603      	mov	r3, r0
 8005fdc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200028a8 	.word	0x200028a8

08005fec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	4a0d      	ldr	r2, [pc, #52]	; (8006034 <disk_initialize+0x48>)
 8005ffe:	5cd3      	ldrb	r3, [r2, r3]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d111      	bne.n	8006028 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	4a0b      	ldr	r2, [pc, #44]	; (8006034 <disk_initialize+0x48>)
 8006008:	2101      	movs	r1, #1
 800600a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	4a09      	ldr	r2, [pc, #36]	; (8006034 <disk_initialize+0x48>)
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	79fa      	ldrb	r2, [r7, #7]
 800601a:	4906      	ldr	r1, [pc, #24]	; (8006034 <disk_initialize+0x48>)
 800601c:	440a      	add	r2, r1
 800601e:	7a12      	ldrb	r2, [r2, #8]
 8006020:	4610      	mov	r0, r2
 8006022:	4798      	blx	r3
 8006024:	4603      	mov	r3, r0
 8006026:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006028:	7bfb      	ldrb	r3, [r7, #15]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3710      	adds	r7, #16
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	200028a8 	.word	0x200028a8

08006038 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006038:	b590      	push	{r4, r7, lr}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60b9      	str	r1, [r7, #8]
 8006040:	607a      	str	r2, [r7, #4]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	4a0a      	ldr	r2, [pc, #40]	; (8006074 <disk_read+0x3c>)
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	689c      	ldr	r4, [r3, #8]
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	4a07      	ldr	r2, [pc, #28]	; (8006074 <disk_read+0x3c>)
 8006058:	4413      	add	r3, r2
 800605a:	7a18      	ldrb	r0, [r3, #8]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	68b9      	ldr	r1, [r7, #8]
 8006062:	47a0      	blx	r4
 8006064:	4603      	mov	r3, r0
 8006066:	75fb      	strb	r3, [r7, #23]
  return res;
 8006068:	7dfb      	ldrb	r3, [r7, #23]
}
 800606a:	4618      	mov	r0, r3
 800606c:	371c      	adds	r7, #28
 800606e:	46bd      	mov	sp, r7
 8006070:	bd90      	pop	{r4, r7, pc}
 8006072:	bf00      	nop
 8006074:	200028a8 	.word	0x200028a8

08006078 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006078:	b590      	push	{r4, r7, lr}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	607a      	str	r2, [r7, #4]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006088:	7bfb      	ldrb	r3, [r7, #15]
 800608a:	4a0a      	ldr	r2, [pc, #40]	; (80060b4 <disk_write+0x3c>)
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	68dc      	ldr	r4, [r3, #12]
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	4a07      	ldr	r2, [pc, #28]	; (80060b4 <disk_write+0x3c>)
 8006098:	4413      	add	r3, r2
 800609a:	7a18      	ldrb	r0, [r3, #8]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	47a0      	blx	r4
 80060a4:	4603      	mov	r3, r0
 80060a6:	75fb      	strb	r3, [r7, #23]
  return res;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd90      	pop	{r4, r7, pc}
 80060b2:	bf00      	nop
 80060b4:	200028a8 	.word	0x200028a8

080060b8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	603a      	str	r2, [r7, #0]
 80060c2:	71fb      	strb	r3, [r7, #7]
 80060c4:	460b      	mov	r3, r1
 80060c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <disk_ioctl+0x38>)
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	79fa      	ldrb	r2, [r7, #7]
 80060d6:	4906      	ldr	r1, [pc, #24]	; (80060f0 <disk_ioctl+0x38>)
 80060d8:	440a      	add	r2, r1
 80060da:	7a10      	ldrb	r0, [r2, #8]
 80060dc:	79b9      	ldrb	r1, [r7, #6]
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	4798      	blx	r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
  return res;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	200028a8 	.word	0x200028a8

080060f4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8006108:	e007      	b.n	800611a <mem_cpy+0x26>
		*d++ = *s++;
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	1c53      	adds	r3, r2, #1
 800610e:	613b      	str	r3, [r7, #16]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	1c59      	adds	r1, r3, #1
 8006114:	6179      	str	r1, [r7, #20]
 8006116:	7812      	ldrb	r2, [r2, #0]
 8006118:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	1e5a      	subs	r2, r3, #1
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f2      	bne.n	800610a <mem_cpy+0x16>
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8006140:	e005      	b.n	800614e <mem_set+0x1e>
		*d++ = (BYTE)val;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	617a      	str	r2, [r7, #20]
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	1e5a      	subs	r2, r3, #1
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f4      	bne.n	8006142 <mem_set+0x12>
}
 8006158:	bf00      	nop
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr

08006164 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006164:	b480      	push	{r7}
 8006166:	b089      	sub	sp, #36	; 0x24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 800617c:	bf00      	nop
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	1e5a      	subs	r2, r3, #1
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00d      	beq.n	80061a4 <mem_cmp+0x40>
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	61fa      	str	r2, [r7, #28]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	4619      	mov	r1, r3
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	1c5a      	adds	r2, r3, #1
 8006196:	61ba      	str	r2, [r7, #24]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	1acb      	subs	r3, r1, r3
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d0ec      	beq.n	800617e <mem_cmp+0x1a>
	return r;
 80061a4:	697b      	ldr	r3, [r7, #20]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3724      	adds	r7, #36	; 0x24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr

080061b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80061ba:	e002      	b.n	80061c2 <chk_chr+0x12>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	3301      	adds	r3, #1
 80061c0:	607b      	str	r3, [r7, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d005      	beq.n	80061d6 <chk_chr+0x26>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d1f2      	bne.n	80061bc <chk_chr+0xc>
	return *str;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	781b      	ldrb	r3, [r3, #0]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	bc80      	pop	{r7}
 80061e2:	4770      	bx	lr

080061e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80061ee:	2300      	movs	r3, #0
 80061f0:	60bb      	str	r3, [r7, #8]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	e03b      	b.n	8006270 <chk_lock+0x8c>
		if (Files[i].fs) {	/* Existing entry */
 80061f8:	4931      	ldr	r1, [pc, #196]	; (80062c0 <chk_lock+0xdc>)
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	4613      	mov	r3, r2
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d02c      	beq.n	8006266 <chk_lock+0x82>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800620c:	492c      	ldr	r1, [pc, #176]	; (80062c0 <chk_lock+0xdc>)
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4613      	mov	r3, r2
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d120      	bne.n	800626a <chk_lock+0x86>
				Files[i].clu == dp->sclust &&
 8006228:	4925      	ldr	r1, [pc, #148]	; (80062c0 <chk_lock+0xdc>)
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4613      	mov	r3, r2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	3304      	adds	r3, #4
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006240:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8006242:	429a      	cmp	r2, r3
 8006244:	d111      	bne.n	800626a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006246:	491e      	ldr	r1, [pc, #120]	; (80062c0 <chk_lock+0xdc>)
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4613      	mov	r3, r2
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	4413      	add	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	440b      	add	r3, r1
 8006254:	3308      	adds	r3, #8
 8006256:	881a      	ldrh	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625e:	88db      	ldrh	r3, [r3, #6]
				Files[i].clu == dp->sclust &&
 8006260:	429a      	cmp	r2, r3
 8006262:	d102      	bne.n	800626a <chk_lock+0x86>
				Files[i].idx == dp->index) break;
 8006264:	e007      	b.n	8006276 <chk_lock+0x92>
		} else {			/* Blank entry */
			be = 1;
 8006266:	2301      	movs	r3, #1
 8006268:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3301      	adds	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b01      	cmp	r3, #1
 8006274:	d9c0      	bls.n	80061f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b02      	cmp	r3, #2
 800627a:	d109      	bne.n	8006290 <chk_lock+0xac>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <chk_lock+0xa4>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d101      	bne.n	800628c <chk_lock+0xa8>
 8006288:	2300      	movs	r3, #0
 800628a:	e013      	b.n	80062b4 <chk_lock+0xd0>
 800628c:	2312      	movs	r3, #18
 800628e:	e011      	b.n	80062b4 <chk_lock+0xd0>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10b      	bne.n	80062ae <chk_lock+0xca>
 8006296:	490a      	ldr	r1, [pc, #40]	; (80062c0 <chk_lock+0xdc>)
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4613      	mov	r3, r2
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	440b      	add	r3, r1
 80062a4:	330a      	adds	r3, #10
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ac:	d101      	bne.n	80062b2 <chk_lock+0xce>
 80062ae:	2310      	movs	r3, #16
 80062b0:	e000      	b.n	80062b4 <chk_lock+0xd0>
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bc80      	pop	{r7}
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20002690 	.word	0x20002690

080062c4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
 80062ce:	e002      	b.n	80062d6 <enq_lock+0x12>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3301      	adds	r3, #1
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d809      	bhi.n	80062f0 <enq_lock+0x2c>
 80062dc:	490a      	ldr	r1, [pc, #40]	; (8006308 <enq_lock+0x44>)
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1ef      	bne.n	80062d0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	bf14      	ite	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	2300      	moveq	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	20002690 	.word	0x20002690

0800630c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	e02e      	b.n	800637a <inc_lock+0x6e>
		if (Files[i].fs == dp->fs &&
 800631c:	4958      	ldr	r1, [pc, #352]	; (8006480 <inc_lock+0x174>)
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4613      	mov	r3, r2
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d11d      	bne.n	8006374 <inc_lock+0x68>
			Files[i].clu == dp->sclust &&
 8006338:	4951      	ldr	r1, [pc, #324]	; (8006480 <inc_lock+0x174>)
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4613      	mov	r3, r2
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	4413      	add	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	440b      	add	r3, r1
 8006346:	3304      	adds	r3, #4
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006350:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->fs &&
 8006352:	429a      	cmp	r2, r3
 8006354:	d10e      	bne.n	8006374 <inc_lock+0x68>
			Files[i].idx == dp->index) break;
 8006356:	494a      	ldr	r1, [pc, #296]	; (8006480 <inc_lock+0x174>)
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	4613      	mov	r3, r2
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	3308      	adds	r3, #8
 8006366:	881a      	ldrh	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800636e:	88db      	ldrh	r3, [r3, #6]
			Files[i].clu == dp->sclust &&
 8006370:	429a      	cmp	r2, r3
 8006372:	d006      	beq.n	8006382 <inc_lock+0x76>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	3301      	adds	r3, #1
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d9cd      	bls.n	800631c <inc_lock+0x10>
 8006380:	e000      	b.n	8006384 <inc_lock+0x78>
			Files[i].idx == dp->index) break;
 8006382:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b02      	cmp	r3, #2
 8006388:	d148      	bne.n	800641c <inc_lock+0x110>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e002      	b.n	8006396 <inc_lock+0x8a>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3301      	adds	r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d809      	bhi.n	80063b0 <inc_lock+0xa4>
 800639c:	4938      	ldr	r1, [pc, #224]	; (8006480 <inc_lock+0x174>)
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4613      	mov	r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1ef      	bne.n	8006390 <inc_lock+0x84>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d101      	bne.n	80063ba <inc_lock+0xae>
 80063b6:	2300      	movs	r3, #0
 80063b8:	e05d      	b.n	8006476 <inc_lock+0x16a>
		Files[i].fs = dp->fs;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063c0:	6819      	ldr	r1, [r3, #0]
 80063c2:	482f      	ldr	r0, [pc, #188]	; (8006480 <inc_lock+0x174>)
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	4613      	mov	r3, r2
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4403      	add	r3, r0
 80063d0:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063d8:	6899      	ldr	r1, [r3, #8]
 80063da:	4829      	ldr	r0, [pc, #164]	; (8006480 <inc_lock+0x174>)
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	4613      	mov	r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4403      	add	r3, r0
 80063e8:	3304      	adds	r3, #4
 80063ea:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80063f2:	88d8      	ldrh	r0, [r3, #6]
 80063f4:	4922      	ldr	r1, [pc, #136]	; (8006480 <inc_lock+0x174>)
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4613      	mov	r3, r2
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	3308      	adds	r3, #8
 8006404:	4602      	mov	r2, r0
 8006406:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8006408:	491d      	ldr	r1, [pc, #116]	; (8006480 <inc_lock+0x174>)
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4613      	mov	r3, r2
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	4413      	add	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	330a      	adds	r3, #10
 8006418:	2200      	movs	r2, #0
 800641a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <inc_lock+0x130>
 8006422:	4917      	ldr	r1, [pc, #92]	; (8006480 <inc_lock+0x174>)
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4613      	mov	r3, r2
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	330a      	adds	r3, #10
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d001      	beq.n	800643c <inc_lock+0x130>
 8006438:	2300      	movs	r3, #0
 800643a:	e01c      	b.n	8006476 <inc_lock+0x16a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <inc_lock+0x14e>
 8006442:	490f      	ldr	r1, [pc, #60]	; (8006480 <inc_lock+0x174>)
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4613      	mov	r3, r2
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	330a      	adds	r3, #10
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	b299      	uxth	r1, r3
 8006458:	e001      	b.n	800645e <inc_lock+0x152>
 800645a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800645e:	4808      	ldr	r0, [pc, #32]	; (8006480 <inc_lock+0x174>)
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4613      	mov	r3, r2
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4403      	add	r3, r0
 800646c:	330a      	adds	r3, #10
 800646e:	460a      	mov	r2, r1
 8006470:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3301      	adds	r3, #1
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	bc80      	pop	{r7}
 800647e:	4770      	bx	lr
 8006480:	20002690 	.word	0x20002690

08006484 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	3b01      	subs	r3, #1
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d82e      	bhi.n	80064f6 <dec_lock+0x72>
		n = Files[i].ctr;
 8006498:	491b      	ldr	r1, [pc, #108]	; (8006508 <dec_lock+0x84>)
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4613      	mov	r3, r2
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	440b      	add	r3, r1
 80064a6:	330a      	adds	r3, #10
 80064a8:	881b      	ldrh	r3, [r3, #0]
 80064aa:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80064ac:	89fb      	ldrh	r3, [r7, #14]
 80064ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b2:	d101      	bne.n	80064b8 <dec_lock+0x34>
 80064b4:	2300      	movs	r3, #0
 80064b6:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 80064b8:	89fb      	ldrh	r3, [r7, #14]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <dec_lock+0x40>
 80064be:	89fb      	ldrh	r3, [r7, #14]
 80064c0:	3b01      	subs	r3, #1
 80064c2:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80064c4:	4910      	ldr	r1, [pc, #64]	; (8006508 <dec_lock+0x84>)
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	4613      	mov	r3, r2
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	330a      	adds	r3, #10
 80064d4:	89fa      	ldrh	r2, [r7, #14]
 80064d6:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80064d8:	89fb      	ldrh	r3, [r7, #14]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d108      	bne.n	80064f0 <dec_lock+0x6c>
 80064de:	490a      	ldr	r1, [pc, #40]	; (8006508 <dec_lock+0x84>)
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	737b      	strb	r3, [r7, #13]
 80064f4:	e001      	b.n	80064fa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80064f6:	2302      	movs	r3, #2
 80064f8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80064fa:	7b7b      	ldrb	r3, [r7, #13]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20002690 	.word	0x20002690

0800650c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006514:	2300      	movs	r3, #0
 8006516:	60fb      	str	r3, [r7, #12]
 8006518:	e016      	b.n	8006548 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800651a:	4910      	ldr	r1, [pc, #64]	; (800655c <clear_lock+0x50>)
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4613      	mov	r3, r2
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	429a      	cmp	r2, r3
 800652e:	d108      	bne.n	8006542 <clear_lock+0x36>
 8006530:	490a      	ldr	r1, [pc, #40]	; (800655c <clear_lock+0x50>)
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	4613      	mov	r3, r2
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	2200      	movs	r2, #0
 8006540:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3301      	adds	r3, #1
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d9e5      	bls.n	800651a <clear_lock+0xe>
	}
}
 800654e:	bf00      	nop
 8006550:	bf00      	nop
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	bc80      	pop	{r7}
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	20002690 	.word	0x20002690

08006560 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006572:	791b      	ldrb	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d040      	beq.n	80065fa <sync_window+0x9a>
		wsect = fs->winsect;	/* Current sector number */
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006588:	7858      	ldrb	r0, [r3, #1]
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	2301      	movs	r3, #1
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	f7ff fd72 	bl	8006078 <disk_write>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <sync_window+0x40>
			res = FR_DISK_ERR;
 800659a:	2301      	movs	r3, #1
 800659c:	73fb      	strb	r3, [r7, #15]
 800659e:	e02c      	b.n	80065fa <sync_window+0x9a>
		} else {
			fs->wflag = 0;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065a6:	2200      	movs	r2, #0
 80065a8:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	1ad2      	subs	r2, r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d21b      	bcs.n	80065fa <sync_window+0x9a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c8:	78db      	ldrb	r3, [r3, #3]
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	e012      	b.n	80065f4 <sync_window+0x94>
					wsect += fs->fsize;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e2:	7858      	ldrb	r0, [r3, #1]
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	2301      	movs	r3, #1
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	f7ff fd45 	bl	8006078 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d8e9      	bhi.n	80065ce <sync_window+0x6e>
				}
			}
		}
	}
	return res;
 80065fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3718      	adds	r7, #24
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	429a      	cmp	r2, r3
 800661e:	d01e      	beq.n	800665e <move_window+0x5a>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ff9d 	bl	8006560 <sync_window>
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d116      	bne.n	800665e <move_window+0x5a>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006636:	7858      	ldrb	r0, [r3, #1]
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	2301      	movs	r3, #1
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	f7ff fcfb 	bl	8006038 <disk_read>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d004      	beq.n	8006652 <move_window+0x4e>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006648:	f04f 33ff 	mov.w	r3, #4294967295
 800664c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800664e:	2301      	movs	r3, #1
 8006650:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006658:	461a      	mov	r2, r3
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
	}
	return res;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff ff75 	bl	8006560 <sync_window>
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b00      	cmp	r3, #0
 800667e:	f040 80ad 	bne.w	80067dc <sync_fs+0x174>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b03      	cmp	r3, #3
 800668c:	f040 8098 	bne.w	80067c0 <sync_fs+0x158>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006696:	795b      	ldrb	r3, [r3, #5]
 8006698:	2b01      	cmp	r3, #1
 800669a:	f040 8091 	bne.w	80067c0 <sync_fs+0x158>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a6:	895b      	ldrh	r3, [r3, #10]
 80066a8:	461a      	mov	r2, r3
 80066aa:	2100      	movs	r1, #0
 80066ac:	f7ff fd40 	bl	8006130 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2255      	movs	r2, #85	; 0x55
 80066b4:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	22aa      	movs	r2, #170	; 0xaa
 80066bc:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2252      	movs	r2, #82	; 0x52
 80066c4:	701a      	strb	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2252      	movs	r2, #82	; 0x52
 80066ca:	705a      	strb	r2, [r3, #1]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2261      	movs	r2, #97	; 0x61
 80066d0:	709a      	strb	r2, [r3, #2]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2241      	movs	r2, #65	; 0x41
 80066d6:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2272      	movs	r2, #114	; 0x72
 80066dc:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2272      	movs	r2, #114	; 0x72
 80066e4:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2241      	movs	r2, #65	; 0x41
 80066ec:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2261      	movs	r2, #97	; 0x61
 80066f4:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	b2da      	uxtb	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	b29b      	uxth	r3, r3
 8006712:	0a1b      	lsrs	r3, r3, #8
 8006714:	b29b      	uxth	r3, r3
 8006716:	b2da      	uxtb	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	0c1b      	lsrs	r3, r3, #16
 8006728:	b2da      	uxtb	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006736:	691b      	ldr	r3, [r3, #16]
 8006738:	0e1b      	lsrs	r3, r3, #24
 800673a:	b2da      	uxtb	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	b2da      	uxtb	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	b29b      	uxth	r3, r3
 800675c:	0a1b      	lsrs	r3, r3, #8
 800675e:	b29b      	uxth	r3, r3
 8006760:	b2da      	uxtb	r2, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	0c1b      	lsrs	r3, r3, #16
 8006772:	b2da      	uxtb	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	0e1b      	lsrs	r3, r3, #24
 8006784:	b2da      	uxtb	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	3301      	adds	r3, #1
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800679c:	62d3      	str	r3, [r2, #44]	; 0x2c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067a4:	7858      	ldrb	r0, [r3, #1]
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b0:	2301      	movs	r3, #1
 80067b2:	f7ff fc61 	bl	8006078 <disk_write>
			fs->fsi_flag = 0;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067bc:	2200      	movs	r2, #0
 80067be:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067c6:	785b      	ldrb	r3, [r3, #1]
 80067c8:	2200      	movs	r2, #0
 80067ca:	2100      	movs	r1, #0
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fc73 	bl	80060b8 <disk_ioctl>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <sync_fs+0x174>
			res = FR_DISK_ERR;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80067e6:	b480      	push	{r7}
 80067e8:	b083      	sub	sp, #12
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	3b02      	subs	r3, #2
 80067f4:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	3b02      	subs	r3, #2
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	429a      	cmp	r2, r3
 8006804:	d301      	bcc.n	800680a <clust2sect+0x24>
 8006806:	2300      	movs	r3, #0
 8006808:	e00c      	b.n	8006824 <clust2sect+0x3e>
	return clst * fs->csize + fs->database;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006810:	789b      	ldrb	r3, [r3, #2]
 8006812:	461a      	mov	r2, r3
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	fb03 f202 	mul.w	r2, r3, r2
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006822:	4413      	add	r3, r2
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b086      	sub	sp, #24
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d906      	bls.n	800684c <get_fat+0x1e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	429a      	cmp	r2, r3
 800684a:	d302      	bcc.n	8006852 <get_fat+0x24>
		val = 1;	/* Internal error */
 800684c:	2301      	movs	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	e0e4      	b.n	8006a1c <get_fat+0x1ee>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006852:	f04f 33ff 	mov.w	r3, #4294967295
 8006856:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b03      	cmp	r3, #3
 8006862:	f000 8098 	beq.w	8006996 <get_fat+0x168>
 8006866:	2b03      	cmp	r3, #3
 8006868:	f300 80ce 	bgt.w	8006a08 <get_fat+0x1da>
 800686c:	2b01      	cmp	r3, #1
 800686e:	d002      	beq.n	8006876 <get_fat+0x48>
 8006870:	2b02      	cmp	r3, #2
 8006872:	d05f      	beq.n	8006934 <get_fat+0x106>
 8006874:	e0c8      	b.n	8006a08 <get_fat+0x1da>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	085b      	lsrs	r3, r3, #1
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	4413      	add	r3, r2
 8006882:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006892:	895b      	ldrh	r3, [r3, #10]
 8006894:	4619      	mov	r1, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	fbb3 f3f1 	udiv	r3, r3, r1
 800689c:	4413      	add	r3, r2
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff feaf 	bl	8006604 <move_window>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 80b0 	bne.w	8006a0e <get_fat+0x1e0>
			wc = fs->win.d8[bc++ % SS(fs)];
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	60fa      	str	r2, [r7, #12]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068ba:	8952      	ldrh	r2, [r2, #10]
 80068bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80068c0:	fb01 f202 	mul.w	r2, r1, r2
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	5cd3      	ldrb	r3, [r2, r3]
 80068ca:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068d2:	6a1a      	ldr	r2, [r3, #32]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068da:	895b      	ldrh	r3, [r3, #10]
 80068dc:	4619      	mov	r1, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80068e4:	4413      	add	r3, r2
 80068e6:	4619      	mov	r1, r3
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7ff fe8b 	bl	8006604 <move_window>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f040 808e 	bne.w	8006a12 <get_fat+0x1e4>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fc:	895b      	ldrh	r3, [r3, #10]
 80068fe:	461a      	mov	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	fbb3 f1f2 	udiv	r1, r3, r2
 8006906:	fb01 f202 	mul.w	r2, r1, r2
 800690a:	1a9b      	subs	r3, r3, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	5cd3      	ldrb	r3, [r2, r3]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	461a      	mov	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	4313      	orrs	r3, r2
 8006918:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <get_fat+0xfc>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	091b      	lsrs	r3, r3, #4
 8006928:	e002      	b.n	8006930 <get_fat+0x102>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006930:	617b      	str	r3, [r7, #20]
			break;
 8006932:	e073      	b.n	8006a1c <get_fat+0x1ee>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006942:	895b      	ldrh	r3, [r3, #10]
 8006944:	085b      	lsrs	r3, r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	4619      	mov	r1, r3
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006950:	4413      	add	r3, r2
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff fe55 	bl	8006604 <move_window>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	d15a      	bne.n	8006a16 <get_fat+0x1e8>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800696a:	8952      	ldrh	r2, [r2, #10]
 800696c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006970:	fb01 f202 	mul.w	r2, r1, r2
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	4413      	add	r3, r2
 800697a:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	3301      	adds	r3, #1
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	b21a      	sxth	r2, r3
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b21b      	sxth	r3, r3
 800698c:	4313      	orrs	r3, r2
 800698e:	b21b      	sxth	r3, r3
 8006990:	b29b      	uxth	r3, r3
 8006992:	617b      	str	r3, [r7, #20]
			break;
 8006994:	e042      	b.n	8006a1c <get_fat+0x1ee>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699c:	6a1a      	ldr	r2, [r3, #32]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069a4:	895b      	ldrh	r3, [r3, #10]
 80069a6:	089b      	lsrs	r3, r3, #2
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	4619      	mov	r1, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80069b2:	4413      	add	r3, r2
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff fe24 	bl	8006604 <move_window>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d12b      	bne.n	8006a1a <get_fat+0x1ec>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069cc:	8952      	ldrh	r2, [r2, #10]
 80069ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80069d2:	fb01 f202 	mul.w	r2, r1, r2
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	3303      	adds	r3, #3
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	061a      	lsls	r2, r3, #24
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	3302      	adds	r3, #2
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	041b      	lsls	r3, r3, #16
 80069ee:	4313      	orrs	r3, r2
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	3201      	adds	r2, #1
 80069f4:	7812      	ldrb	r2, [r2, #0]
 80069f6:	0212      	lsls	r2, r2, #8
 80069f8:	4313      	orrs	r3, r2
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	7812      	ldrb	r2, [r2, #0]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006a04:	617b      	str	r3, [r7, #20]
			break;
 8006a06:	e009      	b.n	8006a1c <get_fat+0x1ee>

		default:
			val = 1;	/* Internal error */
 8006a08:	2301      	movs	r3, #1
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	e006      	b.n	8006a1c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a0e:	bf00      	nop
 8006a10:	e004      	b.n	8006a1c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006a12:	bf00      	nop
 8006a14:	e002      	b.n	8006a1c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a16:	bf00      	nop
 8006a18:	e000      	b.n	8006a1c <get_fat+0x1ee>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a1a:	bf00      	nop
		}
	}

	return val;
 8006a1c:	697b      	ldr	r3, [r7, #20]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3718      	adds	r7, #24
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b088      	sub	sp, #32
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d906      	bls.n	8006a46 <put_fat+0x20>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d302      	bcc.n	8006a4c <put_fat+0x26>
		res = FR_INT_ERR;
 8006a46:	2302      	movs	r3, #2
 8006a48:	77fb      	strb	r3, [r7, #31]
 8006a4a:	e13a      	b.n	8006cc2 <put_fat+0x29c>

	} else {
		switch (fs->fs_type) {
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	f000 80d0 	beq.w	8006bfa <put_fat+0x1d4>
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	f300 8127 	bgt.w	8006cae <put_fat+0x288>
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d003      	beq.n	8006a6c <put_fat+0x46>
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	f000 808f 	beq.w	8006b88 <put_fat+0x162>
 8006a6a:	e120      	b.n	8006cae <put_fat+0x288>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	617b      	str	r3, [r7, #20]
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4413      	add	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a80:	6a1a      	ldr	r2, [r3, #32]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a88:	895b      	ldrh	r3, [r3, #10]
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a92:	4413      	add	r3, r2
 8006a94:	4619      	mov	r1, r3
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f7ff fdb4 	bl	8006604 <move_window>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006aa0:	7ffb      	ldrb	r3, [r7, #31]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 8106 	bne.w	8006cb4 <put_fat+0x28e>
			p = &fs->win.d8[bc++ % SS(fs)];
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	617a      	str	r2, [r7, #20]
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ab4:	8952      	ldrh	r2, [r2, #10]
 8006ab6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aba:	fb01 f202 	mul.w	r2, r1, r2
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00d      	beq.n	8006aec <put_fat+0xc6>
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b25b      	sxtb	r3, r3
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	b25a      	sxtb	r2, r3
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	b25b      	sxtb	r3, r3
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	b25b      	sxtb	r3, r3
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	e001      	b.n	8006af0 <put_fat+0xca>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006afa:	2201      	movs	r2, #1
 8006afc:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b0c:	895b      	ldrh	r3, [r3, #10]
 8006b0e:	4619      	mov	r1, r3
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b16:	4413      	add	r3, r2
 8006b18:	4619      	mov	r1, r3
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff fd72 	bl	8006604 <move_window>
 8006b20:	4603      	mov	r3, r0
 8006b22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b24:	7ffb      	ldrb	r3, [r7, #31]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f040 80c6 	bne.w	8006cb8 <put_fat+0x292>
			p = &fs->win.d8[bc % SS(fs)];
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b32:	895b      	ldrh	r3, [r3, #10]
 8006b34:	461a      	mov	r2, r3
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b3c:	fb01 f202 	mul.w	r2, r1, r2
 8006b40:	1a9b      	subs	r3, r3, r2
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4413      	add	r3, r2
 8006b46:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <put_fat+0x134>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	e00e      	b.n	8006b78 <put_fat+0x152>
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	b25b      	sxtb	r3, r3
 8006b60:	f023 030f 	bic.w	r3, r3, #15
 8006b64:	b25a      	sxtb	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0a1b      	lsrs	r3, r3, #8
 8006b6a:	b25b      	sxtb	r3, r3
 8006b6c:	f003 030f 	and.w	r3, r3, #15
 8006b70:	b25b      	sxtb	r3, r3
 8006b72:	4313      	orrs	r3, r2
 8006b74:	b25b      	sxtb	r3, r3
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b82:	2201      	movs	r2, #1
 8006b84:	711a      	strb	r2, [r3, #4]
			break;
 8006b86:	e09c      	b.n	8006cc2 <put_fat+0x29c>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b96:	895b      	ldrh	r3, [r3, #10]
 8006b98:	085b      	lsrs	r3, r3, #1
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ba4:	4413      	add	r3, r2
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff fd2b 	bl	8006604 <move_window>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006bb2:	7ffb      	ldrb	r3, [r7, #31]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 8081 	bne.w	8006cbc <put_fat+0x296>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	005b      	lsls	r3, r3, #1
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bc4:	8952      	ldrh	r2, [r2, #10]
 8006bc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bca:	fb01 f202 	mul.w	r2, r1, r2
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	3301      	adds	r3, #1
 8006bea:	b2d2      	uxtb	r2, r2
 8006bec:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	711a      	strb	r2, [r3, #4]
			break;
 8006bf8:	e063      	b.n	8006cc2 <put_fat+0x29c>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c00:	6a1a      	ldr	r2, [r3, #32]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c08:	895b      	ldrh	r3, [r3, #10]
 8006c0a:	089b      	lsrs	r3, r3, #2
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	4619      	mov	r1, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c16:	4413      	add	r3, r2
 8006c18:	4619      	mov	r1, r3
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff fcf2 	bl	8006604 <move_window>
 8006c20:	4603      	mov	r3, r0
 8006c22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006c24:	7ffb      	ldrb	r3, [r7, #31]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d14a      	bne.n	8006cc0 <put_fat+0x29a>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c34:	8952      	ldrh	r2, [r2, #10]
 8006c36:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c3a:	fb01 f202 	mul.w	r2, r1, r2
 8006c3e:	1a9b      	subs	r3, r3, r2
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4413      	add	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	3303      	adds	r3, #3
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	061a      	lsls	r2, r3, #24
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	3302      	adds	r3, #2
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	041b      	lsls	r3, r3, #16
 8006c56:	4313      	orrs	r3, r2
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	3201      	adds	r2, #1
 8006c5c:	7812      	ldrb	r2, [r2, #0]
 8006c5e:	0212      	lsls	r2, r2, #8
 8006c60:	4313      	orrs	r3, r2
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	7812      	ldrb	r2, [r2, #0]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	b2da      	uxtb	r2, r3
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	3301      	adds	r3, #1
 8006c86:	b2d2      	uxtb	r2, r2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	0c1a      	lsrs	r2, r3, #16
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	3302      	adds	r3, #2
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	0e1a      	lsrs	r2, r3, #24
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	3303      	adds	r3, #3
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca8:	2201      	movs	r2, #1
 8006caa:	711a      	strb	r2, [r3, #4]
			break;
 8006cac:	e009      	b.n	8006cc2 <put_fat+0x29c>

		default :
			res = FR_INT_ERR;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	77fb      	strb	r3, [r7, #31]
 8006cb2:	e006      	b.n	8006cc2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8006cb4:	bf00      	nop
 8006cb6:	e004      	b.n	8006cc2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8006cb8:	bf00      	nop
 8006cba:	e002      	b.n	8006cc2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <put_fat+0x29c>
			if (res != FR_OK) break;
 8006cc0:	bf00      	nop
		}
	}

	return res;
 8006cc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d906      	bls.n	8006cea <remove_chain+0x1e>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <remove_chain+0x24>
		res = FR_INT_ERR;
 8006cea:	2302      	movs	r3, #2
 8006cec:	73fb      	strb	r3, [r7, #15]
 8006cee:	e049      	b.n	8006d84 <remove_chain+0xb8>

	} else {
		res = FR_OK;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006cf4:	e03b      	b.n	8006d6e <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fd98 	bl	800682e <get_fat>
 8006cfe:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d03b      	beq.n	8006d7e <remove_chain+0xb2>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d102      	bne.n	8006d12 <remove_chain+0x46>
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	73fb      	strb	r3, [r7, #15]
 8006d10:	e038      	b.n	8006d84 <remove_chain+0xb8>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d18:	d102      	bne.n	8006d20 <remove_chain+0x54>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
 8006d1e:	e031      	b.n	8006d84 <remove_chain+0xb8>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006d20:	2200      	movs	r2, #0
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff fe7e 	bl	8006a26 <put_fat>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006d2e:	7bfb      	ldrb	r3, [r7, #15]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d126      	bne.n	8006d82 <remove_chain+0xb6>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d013      	beq.n	8006d6a <remove_chain+0x9e>
				fs->free_clust++;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d52:	6113      	str	r3, [r2, #16]
				fs->fsi_flag |= 1;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d5a:	795b      	ldrb	r3, [r3, #5]
 8006d5c:	f043 0301 	orr.w	r3, r3, #1
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d68:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d3bc      	bcc.n	8006cf6 <remove_chain+0x2a>
 8006d7c:	e002      	b.n	8006d84 <remove_chain+0xb8>
			if (nxt == 0) break;				/* Empty cluster? */
 8006d7e:	bf00      	nop
 8006d80:	e000      	b.n	8006d84 <remove_chain+0xb8>
			if (res != FR_OK) break;
 8006d82:	bf00      	nop
		}
	}

	return res;
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b086      	sub	sp, #24
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d111      	bne.n	8006dc2 <create_chain+0x34>
		scl = fs->last_clust;			/* Get suggested start point */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d006      	beq.n	8006dbc <create_chain+0x2e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d31d      	bcc.n	8006df8 <create_chain+0x6a>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	613b      	str	r3, [r7, #16]
 8006dc0:	e01a      	b.n	8006df8 <create_chain+0x6a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f7ff fd32 	bl	800682e <get_fat>
 8006dca:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d801      	bhi.n	8006dd6 <create_chain+0x48>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e07f      	b.n	8006ed6 <create_chain+0x148>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d101      	bne.n	8006de2 <create_chain+0x54>
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	e079      	b.n	8006ed6 <create_chain+0x148>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d201      	bcs.n	8006df4 <create_chain+0x66>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	e070      	b.n	8006ed6 <create_chain+0x148>
		scl = clst;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d307      	bcc.n	8006e20 <create_chain+0x92>
			ncl = 2;
 8006e10:	2302      	movs	r3, #2
 8006e12:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d901      	bls.n	8006e20 <create_chain+0x92>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e05a      	b.n	8006ed6 <create_chain+0x148>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8006e20:	6979      	ldr	r1, [r7, #20]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff fd03 	bl	800682e <get_fat>
 8006e28:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00e      	beq.n	8006e4e <create_chain+0xc0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d002      	beq.n	8006e3e <create_chain+0xb0>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d101      	bne.n	8006e42 <create_chain+0xb4>
			return cs;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	e049      	b.n	8006ed6 <create_chain+0x148>
		if (ncl == scl) return 0;		/* No free cluster */
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d1d8      	bne.n	8006dfc <create_chain+0x6e>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e043      	b.n	8006ed6 <create_chain+0x148>
		if (cs == 0) break;				/* Found a free cluster */
 8006e4e:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8006e50:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8006e54:	6979      	ldr	r1, [r7, #20]
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff fde5 	bl	8006a26 <put_fat>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d109      	bne.n	8006e7a <create_chain+0xec>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d006      	beq.n	8006e7a <create_chain+0xec>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	6839      	ldr	r1, [r7, #0]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff fdd8 	bl	8006a26 <put_fat>
 8006e76:	4603      	mov	r3, r0
 8006e78:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d121      	bne.n	8006ec4 <create_chain+0x136>
		fs->last_clust = ncl;			/* Update FSINFO */
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e86:	461a      	mov	r2, r3
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	60d3      	str	r3, [r2, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e98:	d01c      	beq.n	8006ed4 <create_chain+0x146>
			fs->free_clust--;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006eaa:	6113      	str	r3, [r2, #16]
			fs->fsi_flag |= 1;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eb2:	795b      	ldrb	r3, [r3, #5]
 8006eb4:	f043 0301 	orr.w	r3, r3, #1
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ec0:	715a      	strb	r2, [r3, #5]
 8006ec2:	e007      	b.n	8006ed4 <create_chain+0x146>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d102      	bne.n	8006ed0 <create_chain+0x142>
 8006eca:	f04f 33ff 	mov.w	r3, #4294967295
 8006ece:	e000      	b.n	8006ed2 <create_chain+0x144>
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8006ed4:	697b      	ldr	r3, [r7, #20]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b087      	sub	sp, #28
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f00:	895b      	ldrh	r3, [r3, #10]
 8006f02:	461a      	mov	r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f16:	7892      	ldrb	r2, [r2, #2]
 8006f18:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f1c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1d1a      	adds	r2, r3, #4
 8006f22:	613a      	str	r2, [r7, #16]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <clmt_clust+0x54>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e010      	b.n	8006f54 <clmt_clust+0x76>
		if (cl < ncl) break;	/* In this fragment? */
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d307      	bcc.n	8006f4a <clmt_clust+0x6c>
		cl -= ncl; tbl++;		/* Next fragment */
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	3304      	adds	r3, #4
 8006f46:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006f48:	e7e9      	b.n	8006f1e <clmt_clust+0x40>
		if (cl < ncl) break;	/* In this fragment? */
 8006f4a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	4413      	add	r3, r2
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr

08006f5e <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b086      	sub	sp, #24
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
 8006f66:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f72:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d009      	beq.n	8006f98 <dir_sdi+0x3a>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d301      	bcc.n	8006f9c <dir_sdi+0x3e>
		return FR_INT_ERR;
 8006f98:	2302      	movs	r3, #2
 8006f9a:	e0aa      	b.n	80070f2 <dir_sdi+0x194>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d110      	bne.n	8006fc4 <dir_sdi+0x66>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b03      	cmp	r3, #3
 8006fb2:	d107      	bne.n	8006fc4 <dir_sdi+0x66>
		clst = dp->fs->dirbase;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc2:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d115      	bne.n	8006ff6 <dir_sdi+0x98>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd6:	891b      	ldrh	r3, [r3, #8]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d301      	bcc.n	8006fe4 <dir_sdi+0x86>
			return FR_INT_ERR;
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e086      	b.n	80070f2 <dir_sdi+0x194>
		sect = dp->fs->dirbase;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	613b      	str	r3, [r7, #16]
 8006ff4:	e043      	b.n	800707e <dir_sdi+0x120>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007002:	895b      	ldrh	r3, [r3, #10]
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	b29b      	uxth	r3, r3
 8007008:	461a      	mov	r2, r3
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007016:	789b      	ldrb	r3, [r3, #2]
 8007018:	fb02 f303 	mul.w	r3, r2, r3
 800701c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800701e:	e021      	b.n	8007064 <dir_sdi+0x106>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	4618      	mov	r0, r3
 800702c:	f7ff fbff 	bl	800682e <get_fat>
 8007030:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007038:	d101      	bne.n	800703e <dir_sdi+0xe0>
 800703a:	2301      	movs	r3, #1
 800703c:	e059      	b.n	80070f2 <dir_sdi+0x194>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d909      	bls.n	8007058 <dir_sdi+0xfa>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	429a      	cmp	r2, r3
 8007056:	d301      	bcc.n	800705c <dir_sdi+0xfe>
				return FR_INT_ERR;
 8007058:	2302      	movs	r3, #2
 800705a:	e04a      	b.n	80070f2 <dir_sdi+0x194>
			idx -= ic;
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8007064:	683a      	ldr	r2, [r7, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	429a      	cmp	r2, r3
 800706a:	d2d9      	bcs.n	8007020 <dir_sdi+0xc2>
		}
		sect = clust2sect(dp->fs, clst);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	6979      	ldr	r1, [r7, #20]
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff fbb5 	bl	80067e6 <clust2sect>
 800707c:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007084:	461a      	mov	r2, r3
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	60d3      	str	r3, [r2, #12]
	if (!sect) return FR_INT_ERR;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <dir_sdi+0x136>
 8007090:	2302      	movs	r3, #2
 8007092:	e02e      	b.n	80070f2 <dir_sdi+0x194>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070a0:	895b      	ldrh	r3, [r3, #10]
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	4413      	add	r3, r2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070b8:	6113      	str	r3, [r2, #16]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4618      	mov	r0, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070d0:	895b      	ldrh	r3, [r3, #10]
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	fbb3 f1f2 	udiv	r1, r3, r2
 80070de:	fb01 f202 	mul.w	r2, r1, r2
 80070e2:	1a9b      	subs	r3, r3, r2
 80070e4:	015b      	lsls	r3, r3, #5
 80070e6:	4403      	add	r3, r0
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80070ee:	6153      	str	r3, [r2, #20]

	return FR_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80070fa:	b590      	push	{r4, r7, lr}
 80070fc:	b087      	sub	sp, #28
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800710a:	88db      	ldrh	r3, [r3, #6]
 800710c:	3301      	adds	r3, #1
 800710e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	b29b      	uxth	r3, r3
 8007114:	2b00      	cmp	r3, #0
 8007116:	d005      	beq.n	8007124 <dir_next+0x2a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d101      	bne.n	8007128 <dir_next+0x2e>
		return FR_NO_FILE;
 8007124:	2304      	movs	r3, #4
 8007126:	e12e      	b.n	8007386 <dir_next+0x28c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007134:	895b      	ldrh	r3, [r3, #10]
 8007136:	095b      	lsrs	r3, r3, #5
 8007138:	b29b      	uxth	r3, r3
 800713a:	461a      	mov	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007142:	fb01 f202 	mul.w	r2, r1, r2
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	f040 80fa 	bne.w	8007342 <dir_next+0x248>
		dp->sect++;					/* Next sector */
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	3301      	adds	r3, #1
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800715e:	6113      	str	r3, [r2, #16]

		if (!dp->clust) {		/* Static table */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10d      	bne.n	8007188 <dir_next+0x8e>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007178:	891b      	ldrh	r3, [r3, #8]
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4293      	cmp	r3, r2
 8007180:	f0c0 80df 	bcc.w	8007342 <dir_next+0x248>
				return FR_NO_FILE;
 8007184:	2304      	movs	r3, #4
 8007186:	e0fe      	b.n	8007386 <dir_next+0x28c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007194:	895b      	ldrh	r3, [r3, #10]
 8007196:	095b      	lsrs	r3, r3, #5
 8007198:	b29b      	uxth	r3, r3
 800719a:	461a      	mov	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	fbb3 f3f2 	udiv	r3, r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071a8:	6812      	ldr	r2, [r2, #0]
 80071aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071ae:	7892      	ldrb	r2, [r2, #2]
 80071b0:	3a01      	subs	r2, #1
 80071b2:	4013      	ands	r3, r2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f040 80c4 	bne.w	8007342 <dir_next+0x248>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	4619      	mov	r1, r3
 80071cc:	4610      	mov	r0, r2
 80071ce:	f7ff fb2e 	bl	800682e <get_fat>
 80071d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d801      	bhi.n	80071de <dir_next+0xe4>
 80071da:	2302      	movs	r3, #2
 80071dc:	e0d3      	b.n	8007386 <dir_next+0x28c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e4:	d101      	bne.n	80071ea <dir_next+0xf0>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e0cd      	b.n	8007386 <dir_next+0x28c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f0c0 808e 	bcc.w	800731c <dir_next+0x222>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <dir_next+0x110>
 8007206:	2304      	movs	r3, #4
 8007208:	e0bd      	b.n	8007386 <dir_next+0x28c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	4619      	mov	r1, r3
 800721c:	4610      	mov	r0, r2
 800721e:	f7ff fdb6 	bl	8006d8e <create_chain>
 8007222:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d101      	bne.n	800722e <dir_next+0x134>
 800722a:	2307      	movs	r3, #7
 800722c:	e0ab      	b.n	8007386 <dir_next+0x28c>
					if (clst == 1) return FR_INT_ERR;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d101      	bne.n	8007238 <dir_next+0x13e>
 8007234:	2302      	movs	r3, #2
 8007236:	e0a6      	b.n	8007386 <dir_next+0x28c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d101      	bne.n	8007244 <dir_next+0x14a>
 8007240:	2301      	movs	r3, #1
 8007242:	e0a0      	b.n	8007386 <dir_next+0x28c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4618      	mov	r0, r3
 800724e:	f7ff f987 	bl	8006560 <sync_window>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <dir_next+0x162>
 8007258:	2301      	movs	r3, #1
 800725a:	e094      	b.n	8007386 <dir_next+0x28c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007272:	895b      	ldrh	r3, [r3, #10]
 8007274:	461a      	mov	r2, r3
 8007276:	2100      	movs	r1, #0
 8007278:	f7fe ff5a 	bl	8006130 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728a:	681c      	ldr	r4, [r3, #0]
 800728c:	6979      	ldr	r1, [r7, #20]
 800728e:	4610      	mov	r0, r2
 8007290:	f7ff faa9 	bl	80067e6 <clust2sect>
 8007294:	4603      	mov	r3, r0
 8007296:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 800729a:	62d3      	str	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800729c:	2300      	movs	r3, #0
 800729e:	613b      	str	r3, [r7, #16]
 80072a0:	e021      	b.n	80072e6 <dir_next+0x1ec>
						dp->fs->wflag = 1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ae:	2201      	movs	r2, #1
 80072b0:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f7ff f950 	bl	8006560 <sync_window>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d001      	beq.n	80072ca <dir_next+0x1d0>
 80072c6:	2301      	movs	r3, #1
 80072c8:	e05d      	b.n	8007386 <dir_next+0x28c>
						dp->fs->winsect++;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80072d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80072d8:	3201      	adds	r2, #1
 80072da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3301      	adds	r3, #1
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072f2:	789b      	ldrb	r3, [r3, #2]
 80072f4:	461a      	mov	r2, r3
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d3d2      	bcc.n	80072a2 <dir_next+0x1a8>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007308:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1acb      	subs	r3, r1, r3
 8007316:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800731a:	62d3      	str	r3, [r2, #44]	; 0x2c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007322:	461a      	mov	r2, r3
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	60d3      	str	r3, [r2, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6979      	ldr	r1, [r7, #20]
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fa57 	bl	80067e6 <clust2sect>
 8007338:	4602      	mov	r2, r0
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007340:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	b29a      	uxth	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800734c:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4618      	mov	r0, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007364:	895b      	ldrh	r3, [r3, #10]
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	b29b      	uxth	r3, r3
 800736a:	461a      	mov	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007372:	fb01 f202 	mul.w	r2, r1, r2
 8007376:	1a9b      	subs	r3, r3, r2
 8007378:	015b      	lsls	r3, r3, #5
 800737a:	4403      	add	r3, r0
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007382:	6153      	str	r3, [r2, #20]

	return FR_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	bd90      	pop	{r4, r7, pc}

0800738e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8007398:	2100      	movs	r1, #0
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fddf 	bl	8006f5e <dir_sdi>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d135      	bne.n	8007416 <dir_alloc+0x88>
		n = 0;
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	4619      	mov	r1, r3
 80073c0:	4610      	mov	r0, r2
 80073c2:	f7ff f91f 	bl	8006604 <move_window>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d121      	bne.n	8007414 <dir_alloc+0x86>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	2be5      	cmp	r3, #229	; 0xe5
 80073dc:	d006      	beq.n	80073ec <dir_alloc+0x5e>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073e4:	695b      	ldr	r3, [r3, #20]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d107      	bne.n	80073fc <dir_alloc+0x6e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3301      	adds	r3, #1
 80073f0:	60bb      	str	r3, [r7, #8]
 80073f2:	68ba      	ldr	r2, [r7, #8]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d102      	bne.n	8007400 <dir_alloc+0x72>
 80073fa:	e00c      	b.n	8007416 <dir_alloc+0x88>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80073fc:	2300      	movs	r3, #0
 80073fe:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8007400:	2101      	movs	r1, #1
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff fe79 	bl	80070fa <dir_next>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800740c:	7bfb      	ldrb	r3, [r7, #15]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0cd      	beq.n	80073ae <dir_alloc+0x20>
 8007412:	e000      	b.n	8007416 <dir_alloc+0x88>
			if (res != FR_OK) break;
 8007414:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b04      	cmp	r3, #4
 800741a:	d101      	bne.n	8007420 <dir_alloc+0x92>
 800741c:	2307      	movs	r3, #7
 800741e:	73fb      	strb	r3, [r7, #15]
	return res;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800742a:	b480      	push	{r7}
 800742c:	b085      	sub	sp, #20
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	331b      	adds	r3, #27
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	b21a      	sxth	r2, r3
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	331a      	adds	r3, #26
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	b21b      	sxth	r3, r3
 8007446:	4313      	orrs	r3, r2
 8007448:	b21b      	sxth	r3, r3
 800744a:	b29b      	uxth	r3, r3
 800744c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d10f      	bne.n	800747a <ld_clust+0x50>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	3315      	adds	r3, #21
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	b21a      	sxth	r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	3314      	adds	r3, #20
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	b21b      	sxth	r3, r3
 800746c:	4313      	orrs	r3, r2
 800746e:	b21b      	sxth	r3, r3
 8007470:	b29b      	uxth	r3, r3
 8007472:	041b      	lsls	r3, r3, #16
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

	return cl;
 800747a:	68fb      	ldr	r3, [r7, #12]
}
 800747c:	4618      	mov	r0, r3
 800747e:	3714      	adds	r7, #20
 8007480:	46bd      	mov	sp, r7
 8007482:	bc80      	pop	{r7}
 8007484:	4770      	bx	lr

08007486 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8007486:	b480      	push	{r7}
 8007488:	b083      	sub	sp, #12
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	331a      	adds	r3, #26
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	0a1b      	lsrs	r3, r3, #8
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	331b      	adds	r3, #27
 80074a6:	b2d2      	uxtb	r2, r2
 80074a8:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	0c1a      	lsrs	r2, r3, #16
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3314      	adds	r3, #20
 80074b2:	b2d2      	uxtb	r2, r2
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	0c1b      	lsrs	r3, r3, #16
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	0a1b      	lsrs	r3, r3, #8
 80074be:	b29a      	uxth	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	3315      	adds	r3, #21
 80074c4:	b2d2      	uxtb	r2, r2
 80074c6:	701a      	strb	r2, [r3, #0]
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bc80      	pop	{r7}
 80074d0:	4770      	bx	lr
	...

080074d4 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e6:	1e5a      	subs	r2, r3, #1
 80074e8:	4613      	mov	r3, r2
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 80074f4:	2300      	movs	r3, #0
 80074f6:	613b      	str	r3, [r7, #16]
 80074f8:	2301      	movs	r3, #1
 80074fa:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 80074fc:	4a2b      	ldr	r2, [pc, #172]	; (80075ac <cmp_lfn+0xd8>)
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	4413      	add	r3, r2
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	4413      	add	r3, r2
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	b21a      	sxth	r2, r3
 8007510:	4926      	ldr	r1, [pc, #152]	; (80075ac <cmp_lfn+0xd8>)
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	440b      	add	r3, r1
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	4619      	mov	r1, r3
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	440b      	add	r3, r1
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	b21b      	sxth	r3, r3
 8007522:	4313      	orrs	r3, r2
 8007524:	b21b      	sxth	r3, r3
 8007526:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8007528:	89fb      	ldrh	r3, [r7, #14]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d019      	beq.n	8007562 <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 800752e:	89bb      	ldrh	r3, [r7, #12]
 8007530:	4618      	mov	r0, r3
 8007532:	f002 fc33 	bl	8009d9c <ff_wtoupper>
 8007536:	4603      	mov	r3, r0
 8007538:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	2bfe      	cmp	r3, #254	; 0xfe
 800753e:	d80e      	bhi.n	800755e <cmp_lfn+0x8a>
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	617a      	str	r2, [r7, #20]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	4413      	add	r3, r2
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f002 fc24 	bl	8009d9c <ff_wtoupper>
 8007554:	4603      	mov	r3, r0
 8007556:	461a      	mov	r2, r3
 8007558:	89fb      	ldrh	r3, [r7, #14]
 800755a:	4293      	cmp	r3, r2
 800755c:	d008      	beq.n	8007570 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 800755e:	2300      	movs	r3, #0
 8007560:	e01f      	b.n	80075a2 <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8007562:	89bb      	ldrh	r3, [r7, #12]
 8007564:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007568:	4293      	cmp	r3, r2
 800756a:	d001      	beq.n	8007570 <cmp_lfn+0x9c>
 800756c:	2300      	movs	r3, #0
 800756e:	e018      	b.n	80075a2 <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	3301      	adds	r3, #1
 8007574:	613b      	str	r3, [r7, #16]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	2b0c      	cmp	r3, #12
 800757a:	d9bf      	bls.n	80074fc <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <cmp_lfn+0xcc>
 8007588:	89fb      	ldrh	r3, [r7, #14]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d008      	beq.n	80075a0 <cmp_lfn+0xcc>
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	005b      	lsls	r3, r3, #1
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	4413      	add	r3, r2
 8007596:	881b      	ldrh	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <cmp_lfn+0xcc>
		return 0;
 800759c:	2300      	movs	r3, #0
 800759e:	e000      	b.n	80075a2 <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 80075a0:	2301      	movs	r3, #1
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3718      	adds	r7, #24
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	0800aa74 	.word	0x0800aa74

080075b0 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4611      	mov	r1, r2
 80075bc:	461a      	mov	r2, r3
 80075be:	460b      	mov	r3, r1
 80075c0:	71fb      	strb	r3, [r7, #7]
 80075c2:	4613      	mov	r3, r2
 80075c4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	330d      	adds	r3, #13
 80075ca:	79ba      	ldrb	r2, [r7, #6]
 80075cc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	330b      	adds	r3, #11
 80075d2:	220f      	movs	r2, #15
 80075d4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	330c      	adds	r3, #12
 80075da:	2200      	movs	r2, #0
 80075dc:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	331a      	adds	r3, #26
 80075e2:	2200      	movs	r2, #0
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	331b      	adds	r3, #27
 80075ea:	2200      	movs	r2, #0
 80075ec:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 80075ee:	79fb      	ldrb	r3, [r7, #7]
 80075f0:	1e5a      	subs	r2, r3, #1
 80075f2:	4613      	mov	r3, r2
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4413      	add	r3, r2
 80075fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	82fb      	strh	r3, [r7, #22]
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8007606:	8afb      	ldrh	r3, [r7, #22]
 8007608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800760c:	4293      	cmp	r3, r2
 800760e:	d007      	beq.n	8007620 <fit_lfn+0x70>
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	1c5a      	adds	r2, r3, #1
 8007614:	61fa      	str	r2, [r7, #28]
 8007616:	005b      	lsls	r3, r3, #1
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8007620:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <fit_lfn+0xe4>)
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	4413      	add	r3, r2
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4413      	add	r3, r2
 800762e:	8afa      	ldrh	r2, [r7, #22]
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	701a      	strb	r2, [r3, #0]
 8007634:	8afb      	ldrh	r3, [r7, #22]
 8007636:	0a1b      	lsrs	r3, r3, #8
 8007638:	b299      	uxth	r1, r3
 800763a:	4a16      	ldr	r2, [pc, #88]	; (8007694 <fit_lfn+0xe4>)
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	4413      	add	r3, r2
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	4413      	add	r3, r2
 8007648:	b2ca      	uxtb	r2, r1
 800764a:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 800764c:	8afb      	ldrh	r3, [r7, #22]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d102      	bne.n	8007658 <fit_lfn+0xa8>
 8007652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007656:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	3301      	adds	r3, #1
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b0c      	cmp	r3, #12
 8007662:	d9d0      	bls.n	8007606 <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8007664:	8afb      	ldrh	r3, [r7, #22]
 8007666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800766a:	4293      	cmp	r3, r2
 800766c:	d006      	beq.n	800767c <fit_lfn+0xcc>
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	4413      	add	r3, r2
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d103      	bne.n	8007684 <fit_lfn+0xd4>
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007682:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	79fa      	ldrb	r2, [r7, #7]
 8007688:	701a      	strb	r2, [r3, #0]
}
 800768a:	bf00      	nop
 800768c:	3724      	adds	r7, #36	; 0x24
 800768e:	46bd      	mov	sp, r7
 8007690:	bc80      	pop	{r7}
 8007692:	4770      	bx	lr
 8007694:	0800aa74 	.word	0x0800aa74

08007698 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08c      	sub	sp, #48	; 0x30
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80076a6:	220b      	movs	r2, #11
 80076a8:	68b9      	ldr	r1, [r7, #8]
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7fe fd22 	bl	80060f4 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	d92b      	bls.n	800770e <gen_numname+0x76>
		sr = seq;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80076ba:	e022      	b.n	8007702 <gen_numname+0x6a>
			wc = *lfn++;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	1c9a      	adds	r2, r3, #2
 80076c0:	607a      	str	r2, [r7, #4]
 80076c2:	881b      	ldrh	r3, [r3, #0]
 80076c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80076c6:	2300      	movs	r3, #0
 80076c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80076ca:	e017      	b.n	80076fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	005a      	lsls	r2, r3, #1
 80076d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076d2:	f003 0301 	and.w	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80076da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80076dc:	085b      	lsrs	r3, r3, #1
 80076de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d005      	beq.n	80076f6 <gen_numname+0x5e>
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80076f0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80076f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	3301      	adds	r3, #1
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	2b0f      	cmp	r3, #15
 8007700:	d9e4      	bls.n	80076cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	881b      	ldrh	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1d8      	bne.n	80076bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800770e:	2307      	movs	r3, #7
 8007710:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	b2db      	uxtb	r3, r3
 800771c:	3330      	adds	r3, #48	; 0x30
 800771e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007726:	2b39      	cmp	r3, #57	; 0x39
 8007728:	d904      	bls.n	8007734 <gen_numname+0x9c>
 800772a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800772e:	3307      	adds	r3, #7
 8007730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007736:	1e5a      	subs	r2, r3, #1
 8007738:	62ba      	str	r2, [r7, #40]	; 0x28
 800773a:	3330      	adds	r3, #48	; 0x30
 800773c:	443b      	add	r3, r7
 800773e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007742:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	091b      	lsrs	r3, r3, #4
 800774a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1df      	bne.n	8007712 <gen_numname+0x7a>
	ns[i] = '~';
 8007752:	f107 0214 	add.w	r2, r7, #20
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	4413      	add	r3, r2
 800775a:	227e      	movs	r2, #126	; 0x7e
 800775c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	; 0x24
 8007762:	e002      	b.n	800776a <gen_numname+0xd2>
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	3301      	adds	r3, #1
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
 800776a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	429a      	cmp	r2, r3
 8007770:	d205      	bcs.n	800777e <gen_numname+0xe6>
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	4413      	add	r3, r2
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b20      	cmp	r3, #32
 800777c:	d1f2      	bne.n	8007764 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800777e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007780:	2b07      	cmp	r3, #7
 8007782:	d807      	bhi.n	8007794 <gen_numname+0xfc>
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	62ba      	str	r2, [r7, #40]	; 0x28
 800778a:	3330      	adds	r3, #48	; 0x30
 800778c:	443b      	add	r3, r7
 800778e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007792:	e000      	b.n	8007796 <gen_numname+0xfe>
 8007794:	2120      	movs	r1, #32
 8007796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007798:	1c5a      	adds	r2, r3, #1
 800779a:	627a      	str	r2, [r7, #36]	; 0x24
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	460a      	mov	r2, r1
 80077a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	2b07      	cmp	r3, #7
 80077a8:	d9e9      	bls.n	800777e <gen_numname+0xe6>
}
 80077aa:	bf00      	nop
 80077ac:	bf00      	nop
 80077ae:	3730      	adds	r7, #48	; 0x30
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80077c0:	230b      	movs	r3, #11
 80077c2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 80077c4:	7bfb      	ldrb	r3, [r7, #15]
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	0852      	lsrs	r2, r2, #1
 80077ca:	01db      	lsls	r3, r3, #7
 80077cc:	4313      	orrs	r3, r2
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	1c59      	adds	r1, r3, #1
 80077d4:	6079      	str	r1, [r7, #4]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4413      	add	r3, r2
 80077da:	73fb      	strb	r3, [r7, #15]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	3b01      	subs	r3, #1
 80077e0:	60bb      	str	r3, [r7, #8]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d1ed      	bne.n	80077c4 <sum_sfn+0x10>
	return sum;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80077fc:	2100      	movs	r1, #0
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff fbad 	bl	8006f5e <dir_sdi>
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <dir_find+0x1e>
 800780e:	7dfb      	ldrb	r3, [r7, #23]
 8007810:	e0b8      	b.n	8007984 <dir_find+0x190>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007812:	23ff      	movs	r3, #255	; 0xff
 8007814:	753b      	strb	r3, [r7, #20]
 8007816:	7d3b      	ldrb	r3, [r7, #20]
 8007818:	757b      	strb	r3, [r7, #21]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007824:	849a      	strh	r2, [r3, #36]	; 0x24
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	4619      	mov	r1, r3
 8007838:	4610      	mov	r0, r2
 800783a:	f7fe fee3 	bl	8006604 <move_window>
 800783e:	4603      	mov	r3, r0
 8007840:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007842:	7dfb      	ldrb	r3, [r7, #23]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f040 8097 	bne.w	8007978 <dir_find+0x184>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800785a:	7dbb      	ldrb	r3, [r7, #22]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d102      	bne.n	8007866 <dir_find+0x72>
 8007860:	2304      	movs	r3, #4
 8007862:	75fb      	strb	r3, [r7, #23]
 8007864:	e08d      	b.n	8007982 <dir_find+0x18e>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	330b      	adds	r3, #11
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007870:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007872:	7dbb      	ldrb	r3, [r7, #22]
 8007874:	2be5      	cmp	r3, #229	; 0xe5
 8007876:	d007      	beq.n	8007888 <dir_find+0x94>
 8007878:	7bfb      	ldrb	r3, [r7, #15]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00b      	beq.n	800789a <dir_find+0xa6>
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	2b0f      	cmp	r3, #15
 8007886:	d008      	beq.n	800789a <dir_find+0xa6>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007888:	23ff      	movs	r3, #255	; 0xff
 800788a:	757b      	strb	r3, [r7, #21]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007896:	849a      	strh	r2, [r3, #36]	; 0x24
 8007898:	e063      	b.n	8007962 <dir_find+0x16e>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800789a:	7bfb      	ldrb	r3, [r7, #15]
 800789c:	2b0f      	cmp	r3, #15
 800789e:	d137      	bne.n	8007910 <dir_find+0x11c>
				if (dp->lfn) {
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d05a      	beq.n	8007962 <dir_find+0x16e>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80078ac:	7dbb      	ldrb	r3, [r7, #22]
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d010      	beq.n	80078d8 <dir_find+0xe4>
						sum = dir[LDIR_Chksum];
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	7b5b      	ldrb	r3, [r3, #13]
 80078ba:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 80078bc:	7dbb      	ldrb	r3, [r7, #22]
 80078be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c2:	75bb      	strb	r3, [r7, #22]
 80078c4:	7dbb      	ldrb	r3, [r7, #22]
 80078c6:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ce:	88da      	ldrh	r2, [r3, #6]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078d6:	849a      	strh	r2, [r3, #36]	; 0x24
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 80078d8:	7dba      	ldrb	r2, [r7, #22]
 80078da:	7d7b      	ldrb	r3, [r7, #21]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d114      	bne.n	800790a <dir_find+0x116>
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	330d      	adds	r3, #13
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	7d3a      	ldrb	r2, [r7, #20]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d10e      	bne.n	800790a <dir_find+0x116>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078f2:	6a1b      	ldr	r3, [r3, #32]
 80078f4:	6939      	ldr	r1, [r7, #16]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7ff fdec 	bl	80074d4 <cmp_lfn>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d003      	beq.n	800790a <dir_find+0x116>
 8007902:	7d7b      	ldrb	r3, [r7, #21]
 8007904:	3b01      	subs	r3, #1
 8007906:	b2db      	uxtb	r3, r3
 8007908:	e000      	b.n	800790c <dir_find+0x118>
 800790a:	23ff      	movs	r3, #255	; 0xff
 800790c:	757b      	strb	r3, [r7, #21]
 800790e:	e028      	b.n	8007962 <dir_find+0x16e>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8007910:	7d7b      	ldrb	r3, [r7, #21]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d107      	bne.n	8007926 <dir_find+0x132>
 8007916:	6938      	ldr	r0, [r7, #16]
 8007918:	f7ff ff4c 	bl	80077b4 <sum_sfn>
 800791c:	4603      	mov	r3, r0
 800791e:	461a      	mov	r2, r3
 8007920:	7d3b      	ldrb	r3, [r7, #20]
 8007922:	4293      	cmp	r3, r2
 8007924:	d02a      	beq.n	800797c <dir_find+0x188>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	330b      	adds	r3, #11
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	f003 0301 	and.w	r3, r3, #1
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10b      	bne.n	8007952 <dir_find+0x15e>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	220b      	movs	r2, #11
 8007944:	4619      	mov	r1, r3
 8007946:	6938      	ldr	r0, [r7, #16]
 8007948:	f7fe fc0c 	bl	8006164 <mem_cmp>
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d016      	beq.n	8007980 <dir_find+0x18c>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8007952:	23ff      	movs	r3, #255	; 0xff
 8007954:	757b      	strb	r3, [r7, #21]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800795c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007960:	849a      	strh	r2, [r3, #36]	; 0x24
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8007962:	2100      	movs	r1, #0
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7ff fbc8 	bl	80070fa <dir_next>
 800796a:	4603      	mov	r3, r0
 800796c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	2b00      	cmp	r3, #0
 8007972:	f43f af58 	beq.w	8007826 <dir_find+0x32>
 8007976:	e004      	b.n	8007982 <dir_find+0x18e>
		if (res != FR_OK) break;
 8007978:	bf00      	nop
 800797a:	e002      	b.n	8007982 <dir_find+0x18e>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 800797c:	bf00      	nop
 800797e:	e000      	b.n	8007982 <dir_find+0x18e>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8007980:	bf00      	nop

	return res;
 8007982:	7dfb      	ldrb	r3, [r7, #23]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08c      	sub	sp, #48	; 0x30
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800799a:	699b      	ldr	r3, [r3, #24]
 800799c:	623b      	str	r3, [r7, #32]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 80079a8:	f107 030c 	add.w	r3, r7, #12
 80079ac:	220c      	movs	r2, #12
 80079ae:	6a39      	ldr	r1, [r7, #32]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fe fb9f 	bl	80060f4 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d03b      	beq.n	8007a38 <dir_register+0xac>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 80079c0:	6a3b      	ldr	r3, [r7, #32]
 80079c2:	330b      	adds	r3, #11
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079ce:	461a      	mov	r2, r3
 80079d0:	2300      	movs	r3, #0
 80079d2:	6213      	str	r3, [r2, #32]
		for (n = 1; n < 100; n++) {
 80079d4:	2301      	movs	r3, #1
 80079d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80079d8:	e013      	b.n	8007a02 <dir_register+0x76>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 80079da:	f107 010c 	add.w	r1, r7, #12
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	6a38      	ldr	r0, [r7, #32]
 80079e4:	f7ff fe58 	bl	8007698 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7ff ff03 	bl	80077f4 <dir_find>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80079f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d106      	bne.n	8007a0a <dir_register+0x7e>
		for (n = 1; n < 100; n++) {
 80079fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fe:	3301      	adds	r3, #1
 8007a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a04:	2b63      	cmp	r3, #99	; 0x63
 8007a06:	d9e8      	bls.n	80079da <dir_register+0x4e>
 8007a08:	e000      	b.n	8007a0c <dir_register+0x80>
			if (res != FR_OK) break;
 8007a0a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	2b64      	cmp	r3, #100	; 0x64
 8007a10:	d101      	bne.n	8007a16 <dir_register+0x8a>
 8007a12:	2307      	movs	r3, #7
 8007a14:	e0d8      	b.n	8007bc8 <dir_register+0x23c>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d002      	beq.n	8007a24 <dir_register+0x98>
 8007a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a22:	e0d1      	b.n	8007bc8 <dir_register+0x23c>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	330b      	adds	r3, #11
 8007a28:	7dfa      	ldrb	r2, [r7, #23]
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a32:	461a      	mov	r2, r3
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	6213      	str	r3, [r2, #32]
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 8007a38:	7dfb      	ldrb	r3, [r7, #23]
 8007a3a:	f003 0302 	and.w	r3, r3, #2
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d014      	beq.n	8007a6c <dir_register+0xe0>
		for (n = 0; lfn[n]; n++) ;
 8007a42:	2300      	movs	r3, #0
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a46:	e002      	b.n	8007a4e <dir_register+0xc2>
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	005b      	lsls	r3, r3, #1
 8007a52:	69fa      	ldr	r2, [r7, #28]
 8007a54:	4413      	add	r3, r2
 8007a56:	881b      	ldrh	r3, [r3, #0]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d1f5      	bne.n	8007a48 <dir_register+0xbc>
		nent = (n + 25) / 13;
 8007a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5e:	3319      	adds	r3, #25
 8007a60:	4a5b      	ldr	r2, [pc, #364]	; (8007bd0 <dir_register+0x244>)
 8007a62:	fba2 2303 	umull	r2, r3, r2, r3
 8007a66:	089b      	lsrs	r3, r3, #2
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6a:	e001      	b.n	8007a70 <dir_register+0xe4>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff fc8b 	bl	800738e <dir_alloc>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d15b      	bne.n	8007b3e <dir_register+0x1b2>
 8007a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d055      	beq.n	8007b3e <dir_register+0x1b2>
		res = dir_sdi(dp, dp->index - nent);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a98:	88db      	ldrh	r3, [r3, #6]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fa5b 	bl	8006f5e <dir_sdi>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d143      	bne.n	8007b3e <dir_register+0x1b2>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abc:	699b      	ldr	r3, [r3, #24]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7ff fe78 	bl	80077b4 <sum_sfn>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	4619      	mov	r1, r3
 8007ada:	4610      	mov	r0, r2
 8007adc:	f7fe fd92 	bl	8006604 <move_window>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8007ae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d126      	bne.n	8007b3c <dir_register+0x1b0>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007af4:	6a18      	ldr	r0, [r3, #32]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007afc:	6959      	ldr	r1, [r3, #20]
 8007afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	7efb      	ldrb	r3, [r7, #27]
 8007b04:	f7ff fd54 	bl	80075b0 <fit_lfn>
				dp->fs->wflag = 1;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b14:	2201      	movs	r2, #1
 8007b16:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8007b18:	2100      	movs	r1, #0
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff faed 	bl	80070fa <dir_next>
 8007b20:	4603      	mov	r3, r0
 8007b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d107      	bne.n	8007b3e <dir_register+0x1b2>
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	3b01      	subs	r3, #1
 8007b32:	627b      	str	r3, [r7, #36]	; 0x24
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1c6      	bne.n	8007ac8 <dir_register+0x13c>
 8007b3a:	e000      	b.n	8007b3e <dir_register+0x1b2>
				if (res != FR_OK) break;
 8007b3c:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8007b3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d13e      	bne.n	8007bc4 <dir_register+0x238>
		res = move_window(dp->fs, dp->sect);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	4619      	mov	r1, r3
 8007b58:	4610      	mov	r0, r2
 8007b5a:	f7fe fd53 	bl	8006604 <move_window>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d12b      	bne.n	8007bc4 <dir_register+0x238>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b72:	695b      	ldr	r3, [r3, #20]
 8007b74:	2220      	movs	r2, #32
 8007b76:	2100      	movs	r1, #0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe fad9 	bl	8006130 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b84:	6958      	ldr	r0, [r3, #20]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8c:	699b      	ldr	r3, [r3, #24]
 8007b8e:	220b      	movs	r2, #11
 8007b90:	4619      	mov	r1, r3
 8007b92:	f7fe faaf 	bl	80060f4 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	330b      	adds	r3, #11
 8007ba0:	781a      	ldrb	r2, [r3, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	330c      	adds	r3, #12
 8007bac:	f002 0218 	and.w	r2, r2, #24
 8007bb0:	b2d2      	uxtb	r2, r2
 8007bb2:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8007bc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3730      	adds	r7, #48	; 0x30
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	4ec4ec4f 	.word	0x4ec4ec4f

08007bd4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08a      	sub	sp, #40	; 0x28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	613b      	str	r3, [r7, #16]
 8007be4:	e002      	b.n	8007bec <create_name+0x18>
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	3301      	adds	r3, #1
 8007bea:	613b      	str	r3, [r7, #16]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	2b2f      	cmp	r3, #47	; 0x2f
 8007bf2:	d0f8      	beq.n	8007be6 <create_name+0x12>
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b5c      	cmp	r3, #92	; 0x5c
 8007bfa:	d0f4      	beq.n	8007be6 <create_name+0x12>
	lfn = dp->lfn;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c02:	6a1b      	ldr	r3, [r3, #32]
 8007c04:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	61ba      	str	r2, [r7, #24]
 8007c14:	693a      	ldr	r2, [r7, #16]
 8007c16:	4413      	add	r3, r2
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8007c1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c1e:	2b1f      	cmp	r3, #31
 8007c20:	d92f      	bls.n	8007c82 <create_name+0xae>
 8007c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c24:	2b2f      	cmp	r3, #47	; 0x2f
 8007c26:	d02c      	beq.n	8007c82 <create_name+0xae>
 8007c28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c2a:	2b5c      	cmp	r3, #92	; 0x5c
 8007c2c:	d029      	beq.n	8007c82 <create_name+0xae>
		if (di >= _MAX_LFN)				/* Reject too long name */
 8007c2e:	697b      	ldr	r3, [r7, #20]
 8007c30:	2bfe      	cmp	r3, #254	; 0xfe
 8007c32:	d901      	bls.n	8007c38 <create_name+0x64>
			return FR_INVALID_NAME;
 8007c34:	2306      	movs	r3, #6
 8007c36:	e186      	b.n	8007f46 <create_name+0x372>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007c3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c40:	2101      	movs	r1, #1
 8007c42:	4618      	mov	r0, r3
 8007c44:	f002 f870 	bl	8009d28 <ff_convert>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <create_name+0x82>
 8007c52:	2306      	movs	r3, #6
 8007c54:	e177      	b.n	8007f46 <create_name+0x372>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 8007c56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c58:	2b7f      	cmp	r3, #127	; 0x7f
 8007c5a:	d809      	bhi.n	8007c70 <create_name+0x9c>
 8007c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c5e:	4619      	mov	r1, r3
 8007c60:	488e      	ldr	r0, [pc, #568]	; (8007e9c <create_name+0x2c8>)
 8007c62:	f7fe faa5 	bl	80061b0 <chk_chr>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <create_name+0x9c>
			return FR_INVALID_NAME;
 8007c6c:	2306      	movs	r3, #6
 8007c6e:	e16a      	b.n	8007f46 <create_name+0x372>
		lfn[di++] = w;					/* Store the Unicode character */
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	1c5a      	adds	r2, r3, #1
 8007c74:	617a      	str	r2, [r7, #20]
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007c7e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007c80:	e7c5      	b.n	8007c0e <create_name+0x3a>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	441a      	add	r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8007c8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c8e:	2b1f      	cmp	r3, #31
 8007c90:	d801      	bhi.n	8007c96 <create_name+0xc2>
 8007c92:	2304      	movs	r3, #4
 8007c94:	e000      	b.n	8007c98 <create_name+0xc4>
 8007c96:	2300      	movs	r3, #0
 8007c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8007c9c:	e011      	b.n	8007cc2 <create_name+0xee>
		w = lfn[di - 1];
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	4413      	add	r3, r2
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007cb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cb2:	2b20      	cmp	r3, #32
 8007cb4:	d002      	beq.n	8007cbc <create_name+0xe8>
 8007cb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cba:	d106      	bne.n	8007cca <create_name+0xf6>
		di--;
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1ea      	bne.n	8007c9e <create_name+0xca>
 8007cc8:	e000      	b.n	8007ccc <create_name+0xf8>
		if (w != ' ' && w != '.') break;
 8007cca:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <create_name+0x102>
 8007cd2:	2306      	movs	r3, #6
 8007cd4:	e137      	b.n	8007f46 <create_name+0x372>

	lfn[di] = 0;						/* LFN is created */
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4413      	add	r3, r2
 8007cde:	2200      	movs	r2, #0
 8007ce0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	220b      	movs	r2, #11
 8007cec:	2120      	movs	r1, #32
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fa1e 	bl	8006130 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	61bb      	str	r3, [r7, #24]
 8007cf8:	e002      	b.n	8007d00 <create_name+0x12c>
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	3301      	adds	r3, #1
 8007cfe:	61bb      	str	r3, [r7, #24]
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	2b20      	cmp	r3, #32
 8007d0c:	d0f5      	beq.n	8007cfa <create_name+0x126>
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	4413      	add	r3, r2
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	2b2e      	cmp	r3, #46	; 0x2e
 8007d1a:	d0ee      	beq.n	8007cfa <create_name+0x126>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d009      	beq.n	8007d36 <create_name+0x162>
 8007d22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d26:	f043 0303 	orr.w	r3, r3, #3
 8007d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007d2e:	e002      	b.n	8007d36 <create_name+0x162>
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d009      	beq.n	8007d50 <create_name+0x17c>
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007d42:	3b01      	subs	r3, #1
 8007d44:	005b      	lsls	r3, r3, #1
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d4e:	d1ef      	bne.n	8007d30 <create_name+0x15c>

	b = i = 0; ni = 8;
 8007d50:	2300      	movs	r3, #0
 8007d52:	623b      	str	r3, [r7, #32]
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d5a:	2308      	movs	r3, #8
 8007d5c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	61ba      	str	r2, [r7, #24]
 8007d64:	005b      	lsls	r3, r3, #1
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	4413      	add	r3, r2
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8091 	beq.w	8007e98 <create_name+0x2c4>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007d76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d78:	2b20      	cmp	r3, #32
 8007d7a:	d006      	beq.n	8007d8a <create_name+0x1b6>
 8007d7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007d80:	d10a      	bne.n	8007d98 <create_name+0x1c4>
 8007d82:	69ba      	ldr	r2, [r7, #24]
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d006      	beq.n	8007d98 <create_name+0x1c4>
			cf |= NS_LOSS | NS_LFN; continue;
 8007d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d8e:	f043 0303 	orr.w	r3, r3, #3
 8007d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007d96:	e07e      	b.n	8007e96 <create_name+0x2c2>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007d98:	6a3a      	ldr	r2, [r7, #32]
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d203      	bcs.n	8007da8 <create_name+0x1d4>
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d123      	bne.n	8007df0 <create_name+0x21c>
			if (ni == 11) {				/* Long extension */
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	2b0b      	cmp	r3, #11
 8007dac:	d106      	bne.n	8007dbc <create_name+0x1e8>
				cf |= NS_LOSS | NS_LFN; break;
 8007dae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007db2:	f043 0303 	orr.w	r3, r3, #3
 8007db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007dba:	e076      	b.n	8007eaa <create_name+0x2d6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d005      	beq.n	8007dd0 <create_name+0x1fc>
 8007dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007dc8:	f043 0303 	orr.w	r3, r3, #3
 8007dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d867      	bhi.n	8007ea8 <create_name+0x2d4>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	61bb      	str	r3, [r7, #24]
 8007ddc:	2308      	movs	r3, #8
 8007dde:	623b      	str	r3, [r7, #32]
 8007de0:	230b      	movs	r3, #11
 8007de2:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007dee:	e052      	b.n	8007e96 <create_name+0x2c2>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df2:	2b7f      	cmp	r3, #127	; 0x7f
 8007df4:	d914      	bls.n	8007e20 <create_name+0x24c>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007df6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f001 ff94 	bl	8009d28 <ff_convert>
 8007e00:	4603      	mov	r3, r0
 8007e02:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007e04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d004      	beq.n	8007e14 <create_name+0x240>
 8007e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e0c:	3b80      	subs	r3, #128	; 0x80
 8007e0e:	4a24      	ldr	r2, [pc, #144]	; (8007ea0 <create_name+0x2cc>)
 8007e10:	5cd3      	ldrb	r3, [r2, r3]
 8007e12:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e18:	f043 0302 	orr.w	r3, r3, #2
 8007e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007e20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d007      	beq.n	8007e36 <create_name+0x262>
 8007e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e28:	4619      	mov	r1, r3
 8007e2a:	481e      	ldr	r0, [pc, #120]	; (8007ea4 <create_name+0x2d0>)
 8007e2c:	f7fe f9c0 	bl	80061b0 <chk_chr>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <create_name+0x274>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007e36:	235f      	movs	r3, #95	; 0x5f
 8007e38:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e3e:	f043 0303 	orr.w	r3, r3, #3
 8007e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e46:	e01b      	b.n	8007e80 <create_name+0x2ac>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007e48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d909      	bls.n	8007e62 <create_name+0x28e>
 8007e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e50:	2b5a      	cmp	r3, #90	; 0x5a
 8007e52:	d806      	bhi.n	8007e62 <create_name+0x28e>
					b |= 2;
 8007e54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e58:	f043 0302 	orr.w	r3, r3, #2
 8007e5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e60:	e00e      	b.n	8007e80 <create_name+0x2ac>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007e62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e64:	2b60      	cmp	r3, #96	; 0x60
 8007e66:	d90b      	bls.n	8007e80 <create_name+0x2ac>
 8007e68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e6a:	2b7a      	cmp	r3, #122	; 0x7a
 8007e6c:	d808      	bhi.n	8007e80 <create_name+0x2ac>
						b |= 1; w -= 0x20;
 8007e6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e72:	f043 0301 	orr.w	r3, r3, #1
 8007e76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e7c:	3b20      	subs	r3, #32
 8007e7e:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	6a3b      	ldr	r3, [r7, #32]
 8007e8a:	1c59      	adds	r1, r3, #1
 8007e8c:	6239      	str	r1, [r7, #32]
 8007e8e:	4413      	add	r3, r2
 8007e90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007e92:	b2d2      	uxtb	r2, r2
 8007e94:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 8007e96:	e762      	b.n	8007d5e <create_name+0x18a>
		if (!w) break;					/* Break on end of the LFN */
 8007e98:	bf00      	nop
 8007e9a:	e006      	b.n	8007eaa <create_name+0x2d6>
 8007e9c:	0800a994 	.word	0x0800a994
 8007ea0:	0800a9f4 	.word	0x0800a9f4
 8007ea4:	0800a9a0 	.word	0x0800a9a0
			if (si > di) break;			/* No extension */
 8007ea8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2be5      	cmp	r3, #229	; 0xe5
 8007eb6:	d105      	bne.n	8007ec4 <create_name+0x2f0>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	2205      	movs	r2, #5
 8007ec2:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d104      	bne.n	8007ed4 <create_name+0x300>
 8007eca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 8007ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ed8:	f003 030c 	and.w	r3, r3, #12
 8007edc:	2b0c      	cmp	r3, #12
 8007ede:	d005      	beq.n	8007eec <create_name+0x318>
 8007ee0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ee4:	f003 0303 	and.w	r3, r3, #3
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d105      	bne.n	8007ef8 <create_name+0x324>
		cf |= NS_LFN;
 8007eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ef0:	f043 0302 	orr.w	r3, r3, #2
 8007ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d117      	bne.n	8007f34 <create_name+0x360>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007f04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f08:	f003 0303 	and.w	r3, r3, #3
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d105      	bne.n	8007f1c <create_name+0x348>
 8007f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f14:	f043 0310 	orr.w	r3, r3, #16
 8007f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f20:	f003 030c 	and.w	r3, r3, #12
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d105      	bne.n	8007f34 <create_name+0x360>
 8007f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007f2c:	f043 0308 	orr.w	r3, r3, #8
 8007f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	330b      	adds	r3, #11
 8007f3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007f42:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007f44:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3728      	adds	r7, #40	; 0x28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop

08007f50 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b2f      	cmp	r3, #47	; 0x2f
 8007f60:	d003      	beq.n	8007f6a <follow_path+0x1a>
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b5c      	cmp	r3, #92	; 0x5c
 8007f68:	d102      	bne.n	8007f70 <follow_path+0x20>
		path++;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f76:	461a      	mov	r2, r3
 8007f78:	2300      	movs	r3, #0
 8007f7a:	6093      	str	r3, [r2, #8]
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b1f      	cmp	r3, #31
 8007f82:	d80c      	bhi.n	8007f9e <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8007f84:	2100      	movs	r1, #0
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f7fe ffe9 	bl	8006f5e <dir_sdi>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f96:	461a      	mov	r2, r3
 8007f98:	2300      	movs	r3, #0
 8007f9a:	6153      	str	r3, [r2, #20]
 8007f9c:	e049      	b.n	8008032 <follow_path+0xe2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007f9e:	463b      	mov	r3, r7
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff fe16 	bl	8007bd4 <create_name>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d13a      	bne.n	8008028 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff fc1e 	bl	80077f4 <dir_find>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	7adb      	ldrb	r3, [r3, #11]
 8007fc6:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <follow_path+0x94>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d12b      	bne.n	800802c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	f003 0304 	and.w	r3, r3, #4
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d126      	bne.n	800802c <follow_path+0xdc>
 8007fde:	2305      	movs	r3, #5
 8007fe0:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8007fe2:	e023      	b.n	800802c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	f003 0304 	and.w	r3, r3, #4
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d120      	bne.n	8008030 <follow_path+0xe0>
			dir = dp->dir;						/* Follow the sub-directory */
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff4:	695b      	ldr	r3, [r3, #20]
 8007ff6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	330b      	adds	r3, #11
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	f003 0310 	and.w	r3, r3, #16
 8008002:	2b00      	cmp	r3, #0
 8008004:	d102      	bne.n	800800c <follow_path+0xbc>
				res = FR_NO_PATH; break;
 8008006:	2305      	movs	r3, #5
 8008008:	73fb      	strb	r3, [r7, #15]
 800800a:	e012      	b.n	8008032 <follow_path+0xe2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68b9      	ldr	r1, [r7, #8]
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff fa07 	bl	800742a <ld_clust>
 800801c:	4602      	mov	r2, r0
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008024:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008026:	e7ba      	b.n	8007f9e <follow_path+0x4e>
			if (res != FR_OK) break;
 8008028:	bf00      	nop
 800802a:	e002      	b.n	8008032 <follow_path+0xe2>
				break;
 800802c:	bf00      	nop
 800802e:	e000      	b.n	8008032 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008030:	bf00      	nop
		}
	}

	return res;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008044:	f04f 33ff 	mov.w	r3, #4294967295
 8008048:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d031      	beq.n	80080b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e002      	b.n	8008060 <get_ldnumber+0x24>
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	3301      	adds	r3, #1
 800805e:	617b      	str	r3, [r7, #20]
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b1f      	cmp	r3, #31
 8008066:	d903      	bls.n	8008070 <get_ldnumber+0x34>
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	2b3a      	cmp	r3, #58	; 0x3a
 800806e:	d1f4      	bne.n	800805a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	2b3a      	cmp	r3, #58	; 0x3a
 8008076:	d11c      	bne.n	80080b2 <get_ldnumber+0x76>
			tp = *path;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	60fa      	str	r2, [r7, #12]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	3b30      	subs	r3, #48	; 0x30
 8008088:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2b09      	cmp	r3, #9
 800808e:	d80e      	bhi.n	80080ae <get_ldnumber+0x72>
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	429a      	cmp	r2, r3
 8008096:	d10a      	bne.n	80080ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d107      	bne.n	80080ae <get_ldnumber+0x72>
					vol = (int)i;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	3301      	adds	r3, #1
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	e002      	b.n	80080b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80080b2:	2300      	movs	r3, #0
 80080b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80080b6:	693b      	ldr	r3, [r7, #16]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	bc80      	pop	{r7}
 80080c0:	4770      	bx	lr
	...

080080c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080d4:	2200      	movs	r2, #0
 80080d6:	711a      	strb	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080de:	461a      	mov	r2, r3
 80080e0:	f04f 33ff 	mov.w	r3, #4294967295
 80080e4:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80080e6:	6839      	ldr	r1, [r7, #0]
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f7fe fa8b 	bl	8006604 <move_window>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d001      	beq.n	80080f8 <check_fs+0x34>
		return 3;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e04a      	b.n	800818e <check_fs+0xca>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080fe:	3301      	adds	r3, #1
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	b21a      	sxth	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800810c:	b21b      	sxth	r3, r3
 800810e:	4313      	orrs	r3, r2
 8008110:	b21b      	sxth	r3, r3
 8008112:	4a21      	ldr	r2, [pc, #132]	; (8008198 <check_fs+0xd4>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d001      	beq.n	800811c <check_fs+0x58>
		return 2;
 8008118:	2302      	movs	r3, #2
 800811a:	e038      	b.n	800818e <check_fs+0xca>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3336      	adds	r3, #54	; 0x36
 8008120:	3303      	adds	r3, #3
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	061a      	lsls	r2, r3, #24
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3336      	adds	r3, #54	; 0x36
 800812a:	3302      	adds	r3, #2
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	041b      	lsls	r3, r3, #16
 8008130:	4313      	orrs	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	3236      	adds	r2, #54	; 0x36
 8008136:	3201      	adds	r2, #1
 8008138:	7812      	ldrb	r2, [r2, #0]
 800813a:	0212      	lsls	r2, r2, #8
 800813c:	4313      	orrs	r3, r2
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008144:	4313      	orrs	r3, r2
 8008146:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800814a:	4a14      	ldr	r2, [pc, #80]	; (800819c <check_fs+0xd8>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d101      	bne.n	8008154 <check_fs+0x90>
		return 0;
 8008150:	2300      	movs	r3, #0
 8008152:	e01c      	b.n	800818e <check_fs+0xca>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3352      	adds	r3, #82	; 0x52
 8008158:	3303      	adds	r3, #3
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	061a      	lsls	r2, r3, #24
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3352      	adds	r3, #82	; 0x52
 8008162:	3302      	adds	r3, #2
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	041b      	lsls	r3, r3, #16
 8008168:	4313      	orrs	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	3252      	adds	r2, #82	; 0x52
 800816e:	3201      	adds	r2, #1
 8008170:	7812      	ldrb	r2, [r2, #0]
 8008172:	0212      	lsls	r2, r2, #8
 8008174:	4313      	orrs	r3, r2
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800817c:	4313      	orrs	r3, r2
 800817e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008182:	4a06      	ldr	r2, [pc, #24]	; (800819c <check_fs+0xd8>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d101      	bne.n	800818c <check_fs+0xc8>
		return 0;
 8008188:	2300      	movs	r3, #0
 800818a:	e000      	b.n	800818e <check_fs+0xca>

	return 1;
 800818c:	2301      	movs	r3, #1
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	ffffaa55 	.word	0xffffaa55
 800819c:	00544146 	.word	0x00544146

080081a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b096      	sub	sp, #88	; 0x58
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	4613      	mov	r3, r2
 80081ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80081b4:	68b8      	ldr	r0, [r7, #8]
 80081b6:	f7ff ff41 	bl	800803c <get_ldnumber>
 80081ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80081bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081be:	2b00      	cmp	r3, #0
 80081c0:	da01      	bge.n	80081c6 <find_volume+0x26>
 80081c2:	230b      	movs	r3, #11
 80081c4:	e311      	b.n	80087ea <find_volume+0x64a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80081c6:	4a98      	ldr	r2, [pc, #608]	; (8008428 <find_volume+0x288>)
 80081c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <find_volume+0x3a>
 80081d6:	230c      	movs	r3, #12
 80081d8:	e307      	b.n	80087ea <find_volume+0x64a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081de:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80081e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01c      	beq.n	8008226 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80081ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7fd fedf 	bl	8005fb8 <disk_status>
 80081fa:	4603      	mov	r3, r0
 80081fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10c      	bne.n	8008226 <find_volume+0x86>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d007      	beq.n	8008222 <find_volume+0x82>
 8008212:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800821e:	230a      	movs	r3, #10
 8008220:	e2e3      	b.n	80087ea <find_volume+0x64a>
			return FR_OK;				/* The file system object is valid */
 8008222:	2300      	movs	r3, #0
 8008224:	e2e1      	b.n	80087ea <find_volume+0x64a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008232:	b2da      	uxtb	r2, r3
 8008234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008236:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800823a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008242:	785b      	ldrb	r3, [r3, #1]
 8008244:	4618      	mov	r0, r3
 8008246:	f7fd fed1 	bl	8005fec <disk_initialize>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8008250:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <find_volume+0xc0>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800825c:	2303      	movs	r3, #3
 800825e:	e2c4      	b.n	80087ea <find_volume+0x64a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8008260:	79fb      	ldrb	r3, [r7, #7]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d007      	beq.n	8008276 <find_volume+0xd6>
 8008266:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800826a:	f003 0304 	and.w	r3, r3, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <find_volume+0xd6>
		return FR_WRITE_PROTECTED;
 8008272:	230a      	movs	r3, #10
 8008274:	e2b9      	b.n	80087ea <find_volume+0x64a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800827c:	7858      	ldrb	r0, [r3, #1]
 800827e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008284:	330a      	adds	r3, #10
 8008286:	461a      	mov	r2, r3
 8008288:	2102      	movs	r1, #2
 800828a:	f7fd ff15 	bl	80060b8 <disk_ioctl>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10d      	bne.n	80082b0 <find_volume+0x110>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800829a:	895b      	ldrh	r3, [r3, #10]
 800829c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a0:	d306      	bcc.n	80082b0 <find_volume+0x110>
 80082a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082a8:	895b      	ldrh	r3, [r3, #10]
 80082aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ae:	d901      	bls.n	80082b4 <find_volume+0x114>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e29a      	b.n	80087ea <find_volume+0x64a>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 80082b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082bc:	f7ff ff02 	bl	80080c4 <check_fs>
 80082c0:	4603      	mov	r3, r0
 80082c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 80082c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d153      	bne.n	8008376 <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80082ce:	2300      	movs	r3, #0
 80082d0:	643b      	str	r3, [r7, #64]	; 0x40
 80082d2:	e028      	b.n	8008326 <find_volume+0x186>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 80082d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082d8:	011b      	lsls	r3, r3, #4
 80082da:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80082de:	4413      	add	r3, r2
 80082e0:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	3304      	adds	r3, #4
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d012      	beq.n	8008312 <find_volume+0x172>
 80082ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ee:	330b      	adds	r3, #11
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	061a      	lsls	r2, r3, #24
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	330a      	adds	r3, #10
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	4313      	orrs	r3, r2
 80082fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008300:	3209      	adds	r2, #9
 8008302:	7812      	ldrb	r2, [r2, #0]
 8008304:	0212      	lsls	r2, r2, #8
 8008306:	4313      	orrs	r3, r2
 8008308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800830a:	3208      	adds	r2, #8
 800830c:	7812      	ldrb	r2, [r2, #0]
 800830e:	431a      	orrs	r2, r3
 8008310:	e000      	b.n	8008314 <find_volume+0x174>
 8008312:	2200      	movs	r2, #0
 8008314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	3358      	adds	r3, #88	; 0x58
 800831a:	443b      	add	r3, r7
 800831c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8008320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008322:	3301      	adds	r3, #1
 8008324:	643b      	str	r3, [r7, #64]	; 0x40
 8008326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008328:	2b03      	cmp	r3, #3
 800832a:	d9d3      	bls.n	80082d4 <find_volume+0x134>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800832c:	2300      	movs	r3, #0
 800832e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d002      	beq.n	800833c <find_volume+0x19c>
 8008336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008338:	3b01      	subs	r3, #1
 800833a:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800833c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	3358      	adds	r3, #88	; 0x58
 8008342:	443b      	add	r3, r7
 8008344:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008348:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800834a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800834c:	2b00      	cmp	r3, #0
 800834e:	d005      	beq.n	800835c <find_volume+0x1bc>
 8008350:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008352:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008354:	f7ff feb6 	bl	80080c4 <check_fs>
 8008358:	4603      	mov	r3, r0
 800835a:	e000      	b.n	800835e <find_volume+0x1be>
 800835c:	2302      	movs	r3, #2
 800835e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8008362:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008366:	2b00      	cmp	r3, #0
 8008368:	d005      	beq.n	8008376 <find_volume+0x1d6>
 800836a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800836c:	3301      	adds	r3, #1
 800836e:	643b      	str	r3, [r7, #64]	; 0x40
 8008370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008372:	2b03      	cmp	r3, #3
 8008374:	d9e2      	bls.n	800833c <find_volume+0x19c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800837a:	2b03      	cmp	r3, #3
 800837c:	d101      	bne.n	8008382 <find_volume+0x1e2>
 800837e:	2301      	movs	r3, #1
 8008380:	e233      	b.n	80087ea <find_volume+0x64a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8008382:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008386:	2b00      	cmp	r3, #0
 8008388:	d001      	beq.n	800838e <find_volume+0x1ee>
 800838a:	230d      	movs	r3, #13
 800838c:	e22d      	b.n	80087ea <find_volume+0x64a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800838e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008390:	7b1b      	ldrb	r3, [r3, #12]
 8008392:	021b      	lsls	r3, r3, #8
 8008394:	b21a      	sxth	r2, r3
 8008396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008398:	7adb      	ldrb	r3, [r3, #11]
 800839a:	b21b      	sxth	r3, r3
 800839c:	4313      	orrs	r3, r2
 800839e:	b21a      	sxth	r2, r3
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a6:	895b      	ldrh	r3, [r3, #10]
 80083a8:	b21b      	sxth	r3, r3
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d001      	beq.n	80083b2 <find_volume+0x212>
		return FR_NO_FILESYSTEM;
 80083ae:	230d      	movs	r3, #13
 80083b0:	e21b      	b.n	80087ea <find_volume+0x64a>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80083b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b4:	7ddb      	ldrb	r3, [r3, #23]
 80083b6:	021b      	lsls	r3, r3, #8
 80083b8:	b21a      	sxth	r2, r3
 80083ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083bc:	7d9b      	ldrb	r3, [r3, #22]
 80083be:	b21b      	sxth	r3, r3
 80083c0:	4313      	orrs	r3, r2
 80083c2:	b21b      	sxth	r3, r3
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80083c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d112      	bne.n	80083f4 <find_volume+0x254>
 80083ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80083d4:	061a      	lsls	r2, r3, #24
 80083d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80083dc:	041b      	lsls	r3, r3, #16
 80083de:	4313      	orrs	r3, r2
 80083e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e2:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80083e6:	0212      	lsls	r2, r2, #8
 80083e8:	4313      	orrs	r3, r2
 80083ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ec:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80083f0:	4313      	orrs	r3, r2
 80083f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 80083f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fa:	461a      	mov	r2, r3
 80083fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083fe:	6193      	str	r3, [r2, #24]

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	7c1a      	ldrb	r2, [r3, #16]
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840a:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008412:	78db      	ldrb	r3, [r3, #3]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d009      	beq.n	800842c <find_volume+0x28c>
 8008418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841e:	78db      	ldrb	r3, [r3, #3]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d003      	beq.n	800842c <find_volume+0x28c>
		return FR_NO_FILESYSTEM;
 8008424:	230d      	movs	r3, #13
 8008426:	e1e0      	b.n	80087ea <find_volume+0x64a>
 8008428:	20002688 	.word	0x20002688
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008432:	78db      	ldrb	r3, [r3, #3]
 8008434:	461a      	mov	r2, r3
 8008436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008438:	fb02 f303 	mul.w	r3, r2, r3
 800843c:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	7b5a      	ldrb	r2, [r3, #13]
 8008442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008448:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008450:	789b      	ldrb	r3, [r3, #2]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00c      	beq.n	8008470 <find_volume+0x2d0>
 8008456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008458:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800845c:	789b      	ldrb	r3, [r3, #2]
 800845e:	461a      	mov	r2, r3
 8008460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008466:	789b      	ldrb	r3, [r3, #2]
 8008468:	3b01      	subs	r3, #1
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <find_volume+0x2d4>
		return FR_NO_FILESYSTEM;
 8008470:	230d      	movs	r3, #13
 8008472:	e1ba      	b.n	80087ea <find_volume+0x64a>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8008474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008476:	7c9b      	ldrb	r3, [r3, #18]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	b21a      	sxth	r2, r3
 800847c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847e:	7c5b      	ldrb	r3, [r3, #17]
 8008480:	b21b      	sxth	r3, r3
 8008482:	4313      	orrs	r3, r2
 8008484:	b21b      	sxth	r3, r3
 8008486:	b29a      	uxth	r2, r3
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800848e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8008490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008496:	891b      	ldrh	r3, [r3, #8]
 8008498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800849a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800849e:	8952      	ldrh	r2, [r2, #10]
 80084a0:	0952      	lsrs	r2, r2, #5
 80084a2:	b292      	uxth	r2, r2
 80084a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80084a8:	fb01 f202 	mul.w	r2, r1, r2
 80084ac:	1a9b      	subs	r3, r3, r2
 80084ae:	b29b      	uxth	r3, r3
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d001      	beq.n	80084b8 <find_volume+0x318>
		return FR_NO_FILESYSTEM;
 80084b4:	230d      	movs	r3, #13
 80084b6:	e198      	b.n	80087ea <find_volume+0x64a>

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 80084b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ba:	7d1b      	ldrb	r3, [r3, #20]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	b21a      	sxth	r2, r3
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	7cdb      	ldrb	r3, [r3, #19]
 80084c4:	b21b      	sxth	r3, r3
 80084c6:	4313      	orrs	r3, r2
 80084c8:	b21b      	sxth	r3, r3
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 80084ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d112      	bne.n	80084fa <find_volume+0x35a>
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80084da:	061a      	lsls	r2, r3, #24
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80084e2:	041b      	lsls	r3, r3, #16
 80084e4:	4313      	orrs	r3, r2
 80084e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084e8:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 80084ec:	0212      	lsls	r2, r2, #8
 80084ee:	4313      	orrs	r3, r2
 80084f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 80084fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084fc:	7bdb      	ldrb	r3, [r3, #15]
 80084fe:	021b      	lsls	r3, r3, #8
 8008500:	b21a      	sxth	r2, r3
 8008502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008504:	7b9b      	ldrb	r3, [r3, #14]
 8008506:	b21b      	sxth	r3, r3
 8008508:	4313      	orrs	r3, r2
 800850a:	b21b      	sxth	r3, r3
 800850c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800850e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <find_volume+0x378>
 8008514:	230d      	movs	r3, #13
 8008516:	e168      	b.n	80087ea <find_volume+0x64a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8008518:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800851a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800851c:	4413      	add	r3, r2
 800851e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008520:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008524:	8911      	ldrh	r1, [r2, #8]
 8008526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008528:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800852c:	8952      	ldrh	r2, [r2, #10]
 800852e:	0952      	lsrs	r2, r2, #5
 8008530:	b292      	uxth	r2, r2
 8008532:	fbb1 f2f2 	udiv	r2, r1, r2
 8008536:	b292      	uxth	r2, r2
 8008538:	4413      	add	r3, r2
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800853c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800853e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008540:	429a      	cmp	r2, r3
 8008542:	d201      	bcs.n	8008548 <find_volume+0x3a8>
 8008544:	230d      	movs	r3, #13
 8008546:	e150      	b.n	80087ea <find_volume+0x64a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8008548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800854a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008550:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008554:	7892      	ldrb	r2, [r2, #2]
 8008556:	fbb3 f3f2 	udiv	r3, r3, r2
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <find_volume+0x3c6>
 8008562:	230d      	movs	r3, #13
 8008564:	e141      	b.n	80087ea <find_volume+0x64a>
	fmt = FS_FAT12;
 8008566:	2301      	movs	r3, #1
 8008568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008572:	4293      	cmp	r3, r2
 8008574:	d902      	bls.n	800857c <find_volume+0x3dc>
 8008576:	2302      	movs	r3, #2
 8008578:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008582:	4293      	cmp	r3, r2
 8008584:	d902      	bls.n	800858c <find_volume+0x3ec>
 8008586:	2303      	movs	r3, #3
 8008588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	3302      	adds	r3, #2
 8008590:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008592:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008596:	6153      	str	r3, [r2, #20]
	fs->volbase = bsect;								/* Volume start sector */
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800859e:	461a      	mov	r2, r3
 80085a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a2:	61d3      	str	r3, [r2, #28]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80085a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a8:	4413      	add	r3, r2
 80085aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085b0:	6213      	str	r3, [r2, #32]
	fs->database = bsect + sysect;						/* Data start sector */
 80085b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	4413      	add	r3, r2
 80085b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80085be:	6293      	str	r3, [r2, #40]	; 0x28
	if (fmt == FS_FAT32) {
 80085c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d124      	bne.n	8008612 <find_volume+0x472>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80085ce:	891b      	ldrh	r3, [r3, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <find_volume+0x438>
 80085d4:	230d      	movs	r3, #13
 80085d6:	e108      	b.n	80087ea <find_volume+0x64a>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 80085d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085da:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80085de:	061a      	lsls	r2, r3, #24
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80085e6:	041b      	lsls	r3, r3, #16
 80085e8:	4313      	orrs	r3, r2
 80085ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085ec:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80085f0:	0212      	lsls	r2, r2, #8
 80085f2:	4313      	orrs	r3, r2
 80085f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085f6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80085fa:	4313      	orrs	r3, r2
 80085fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008602:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8008604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	647b      	str	r3, [r7, #68]	; 0x44
 8008610:	e02b      	b.n	800866a <find_volume+0x4ca>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8008612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008618:	891b      	ldrh	r3, [r3, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <find_volume+0x482>
 800861e:	230d      	movs	r3, #13
 8008620:	e0e3      	b.n	80087ea <find_volume+0x64a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008628:	6a1a      	ldr	r2, [r3, #32]
 800862a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862c:	4413      	add	r3, r2
 800862e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008630:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008634:	6253      	str	r3, [r2, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008636:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800863a:	2b02      	cmp	r3, #2
 800863c:	d105      	bne.n	800864a <find_volume+0x4aa>
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	e00e      	b.n	8008668 <find_volume+0x4c8>
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008650:	695a      	ldr	r2, [r3, #20]
 8008652:	4613      	mov	r3, r2
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	4413      	add	r3, r2
 8008658:	085a      	lsrs	r2, r3, #1
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8008668:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008670:	699a      	ldr	r2, [r3, #24]
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008678:	895b      	ldrh	r3, [r3, #10]
 800867a:	4619      	mov	r1, r3
 800867c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800867e:	440b      	add	r3, r1
 8008680:	3b01      	subs	r3, #1
 8008682:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008684:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8008688:	8949      	ldrh	r1, [r1, #10]
 800868a:	fbb3 f3f1 	udiv	r3, r3, r1
 800868e:	429a      	cmp	r2, r3
 8008690:	d201      	bcs.n	8008696 <find_volume+0x4f6>
		return FR_NO_FILESYSTEM;
 8008692:	230d      	movs	r3, #13
 8008694:	e0a9      	b.n	80087ea <find_volume+0x64a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8008696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800869c:	461a      	mov	r2, r3
 800869e:	f04f 33ff 	mov.w	r3, #4294967295
 80086a2:	6113      	str	r3, [r2, #16]
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086aa:	691b      	ldr	r3, [r3, #16]
 80086ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80086b2:	60d3      	str	r3, [r2, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086ba:	2280      	movs	r2, #128	; 0x80
 80086bc:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80086be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d17a      	bne.n	80087bc <find_volume+0x61c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80086cc:	021b      	lsls	r3, r3, #8
 80086ce:	b21a      	sxth	r2, r3
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086d6:	b21b      	sxth	r3, r3
 80086d8:	4313      	orrs	r3, r2
 80086da:	b21b      	sxth	r3, r3
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d16d      	bne.n	80087bc <find_volume+0x61c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80086e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086e2:	3301      	adds	r3, #1
 80086e4:	4619      	mov	r1, r3
 80086e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086e8:	f7fd ff8c 	bl	8006604 <move_window>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d164      	bne.n	80087bc <find_volume+0x61c>
	{
		fs->fsi_flag = 0;
 80086f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80086f8:	2200      	movs	r2, #0
 80086fa:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80086fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fe:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	b21a      	sxth	r2, r3
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800870c:	b21b      	sxth	r3, r3
 800870e:	4313      	orrs	r3, r2
 8008710:	b21b      	sxth	r3, r3
 8008712:	4a38      	ldr	r2, [pc, #224]	; (80087f4 <find_volume+0x654>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d151      	bne.n	80087bc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	78db      	ldrb	r3, [r3, #3]
 800871c:	061a      	lsls	r2, r3, #24
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	789b      	ldrb	r3, [r3, #2]
 8008722:	041b      	lsls	r3, r3, #16
 8008724:	4313      	orrs	r3, r2
 8008726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008728:	7852      	ldrb	r2, [r2, #1]
 800872a:	0212      	lsls	r2, r2, #8
 800872c:	4313      	orrs	r3, r2
 800872e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008730:	7812      	ldrb	r2, [r2, #0]
 8008732:	4313      	orrs	r3, r2
 8008734:	4a30      	ldr	r2, [pc, #192]	; (80087f8 <find_volume+0x658>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d140      	bne.n	80087bc <find_volume+0x61c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8008740:	061a      	lsls	r2, r3, #24
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8008748:	041b      	lsls	r3, r3, #16
 800874a:	4313      	orrs	r3, r2
 800874c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800874e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8008752:	0212      	lsls	r2, r2, #8
 8008754:	4313      	orrs	r3, r2
 8008756:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008758:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800875c:	4313      	orrs	r3, r2
 800875e:	4a27      	ldr	r2, [pc, #156]	; (80087fc <find_volume+0x65c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d12b      	bne.n	80087bc <find_volume+0x61c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800876a:	061a      	lsls	r2, r3, #24
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8008772:	041b      	lsls	r3, r3, #16
 8008774:	4313      	orrs	r3, r2
 8008776:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008778:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800877c:	0212      	lsls	r2, r2, #8
 800877e:	4313      	orrs	r3, r2
 8008780:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008782:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8008786:	4313      	orrs	r3, r2
 8008788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800878a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800878e:	6113      	str	r3, [r2, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8008796:	061a      	lsls	r2, r3, #24
 8008798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879a:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800879e:	041b      	lsls	r3, r3, #16
 80087a0:	4313      	orrs	r3, r2
 80087a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087a4:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 80087a8:	0212      	lsls	r2, r2, #8
 80087aa:	4313      	orrs	r3, r2
 80087ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ae:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 80087b2:	4313      	orrs	r3, r2
 80087b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80087ba:	60d3      	str	r3, [r2, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80087bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087c2:	461a      	mov	r2, r3
 80087c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087c8:	7013      	strb	r3, [r2, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80087ca:	4b0d      	ldr	r3, [pc, #52]	; (8008800 <find_volume+0x660>)
 80087cc:	881b      	ldrh	r3, [r3, #0]
 80087ce:	3301      	adds	r3, #1
 80087d0:	b29a      	uxth	r2, r3
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <find_volume+0x660>)
 80087d4:	801a      	strh	r2, [r3, #0]
 80087d6:	4b0a      	ldr	r3, [pc, #40]	; (8008800 <find_volume+0x660>)
 80087d8:	881a      	ldrh	r2, [r3, #0]
 80087da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087e0:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80087e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80087e4:	f7fd fe92 	bl	800650c <clear_lock>
#endif

	return FR_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3758      	adds	r7, #88	; 0x58
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	ffffaa55 	.word	0xffffaa55
 80087f8:	41615252 	.word	0x41615252
 80087fc:	61417272 	.word	0x61417272
 8008800:	2000268c 	.word	0x2000268c

08008804 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d02a      	beq.n	800886c <validate+0x68>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d024      	beq.n	800886c <validate+0x68>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01b      	beq.n	800886c <validate+0x68>
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008840:	88da      	ldrh	r2, [r3, #6]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008848:	889b      	ldrh	r3, [r3, #4]
 800884a:	429a      	cmp	r2, r3
 800884c:	d10e      	bne.n	800886c <validate+0x68>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	4618      	mov	r0, r3
 800885e:	f7fd fbab 	bl	8005fb8 <disk_status>
 8008862:	4603      	mov	r3, r0
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <validate+0x6c>
		return FR_INVALID_OBJECT;
 800886c:	2309      	movs	r3, #9
 800886e:	e000      	b.n	8008872 <validate+0x6e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	4613      	mov	r3, r2
 8008888:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800888e:	f107 0310 	add.w	r3, r7, #16
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff fbd2 	bl	800803c <get_ldnumber>
 8008898:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	2b00      	cmp	r3, #0
 800889e:	da01      	bge.n	80088a4 <f_mount+0x28>
 80088a0:	230b      	movs	r3, #11
 80088a2:	e02f      	b.n	8008904 <f_mount+0x88>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <f_mount+0x90>)
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d007      	beq.n	80088c4 <f_mount+0x48>
#if _FS_LOCK
		clear_lock(cfs);
 80088b4:	69b8      	ldr	r0, [r7, #24]
 80088b6:	f7fd fe29 	bl	800650c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088c0:	2200      	movs	r2, #0
 80088c2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d004      	beq.n	80088d4 <f_mount+0x58>
		fs->fs_type = 0;				/* Clear new fs object */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088d0:	2200      	movs	r2, #0
 80088d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	490d      	ldr	r1, [pc, #52]	; (800890c <f_mount+0x90>)
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <f_mount+0x6e>
 80088e4:	79fb      	ldrb	r3, [r7, #7]
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d001      	beq.n	80088ee <f_mount+0x72>
 80088ea:	2300      	movs	r3, #0
 80088ec:	e00a      	b.n	8008904 <f_mount+0x88>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80088ee:	f107 0108 	add.w	r1, r7, #8
 80088f2:	f107 030c 	add.w	r3, r7, #12
 80088f6:	2200      	movs	r2, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7ff fc51 	bl	80081a0 <find_volume>
 80088fe:	4603      	mov	r3, r0
 8008900:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008902:	7dfb      	ldrb	r3, [r7, #23]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3720      	adds	r7, #32
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20002688 	.word	0x20002688

08008910 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800891e:	f843 0c4c 	str.w	r0, [r3, #-76]
 8008922:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008926:	f843 1c50 	str.w	r1, [r3, #-80]
 800892a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800892e:	f803 2c51 	strb.w	r2, [r3, #-81]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8008932:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008936:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <f_open+0x32>
 800893e:	2309      	movs	r3, #9
 8008940:	e2f7      	b.n	8008f32 <f_open+0x622>
	fp->fs = 0;			/* Clear file object */
 8008942:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008946:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800894a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800894e:	461a      	mov	r2, r3
 8008950:	2300      	movs	r3, #0
 8008952:	6013      	str	r3, [r2, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8008954:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008958:	461a      	mov	r2, r3
 800895a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800895e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008962:	f003 031f 	and.w	r3, r3, #31
 8008966:	f802 3c51 	strb.w	r3, [r2, #-81]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800896a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800896e:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008972:	f023 0301 	bic.w	r3, r3, #1
 8008976:	b2da      	uxtb	r2, r3
 8008978:	f107 0118 	add.w	r1, r7, #24
 800897c:	3910      	subs	r1, #16
 800897e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008982:	3b18      	subs	r3, #24
 8008984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff fc09 	bl	80081a0 <find_volume>
 800898e:	4603      	mov	r3, r0
 8008990:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008994:	f102 0217 	add.w	r2, r2, #23
 8008998:	7013      	strb	r3, [r2, #0]
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800899a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800899e:	f103 0317 	add.w	r3, r3, #23
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f040 82bf 	bne.w	8008f28 <f_open+0x618>
		INIT_BUF(dj);
 80089aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089ae:	461a      	mov	r2, r3
 80089b0:	f107 0318 	add.w	r3, r7, #24
 80089b4:	3b04      	subs	r3, #4
 80089b6:	f8c2 3fe0 	str.w	r3, [r2, #4064]	; 0xfe0
 80089ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089be:	461a      	mov	r2, r3
 80089c0:	4bd4      	ldr	r3, [pc, #848]	; (8008d14 <f_open+0x404>)
 80089c2:	f8c2 3fe8 	str.w	r3, [r2, #4072]	; 0xfe8
		res = follow_path(&dj, path);	/* Follow the file path */
 80089c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089ca:	f853 2c50 	ldr.w	r2, [r3, #-80]
 80089ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80089d2:	3b18      	subs	r3, #24
 80089d4:	4611      	mov	r1, r2
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7ff faba 	bl	8007f50 <follow_path>
 80089dc:	4603      	mov	r3, r0
 80089de:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80089e2:	f102 0217 	add.w	r2, r2, #23
 80089e6:	7013      	strb	r3, [r2, #0]
		dir = dj.dir;
 80089e8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80089ec:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 80089f0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80089f4:	f102 0210 	add.w	r2, r2, #16
 80089f8:	6013      	str	r3, [r2, #0]
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80089fa:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80089fe:	f103 0317 	add.w	r3, r3, #23
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d126      	bne.n	8008a56 <f_open+0x146>
			if (!dir)	/* Default directory itself */
 8008a08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a0c:	f103 0310 	add.w	r3, r3, #16
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d106      	bne.n	8008a24 <f_open+0x114>
				res = FR_INVALID_NAME;
 8008a16:	2306      	movs	r3, #6
 8008a18:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a1c:	f102 0217 	add.w	r2, r2, #23
 8008a20:	7013      	strb	r3, [r2, #0]
 8008a22:	e018      	b.n	8008a56 <f_open+0x146>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a28:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008a2c:	f023 0301 	bic.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	bf14      	ite	ne
 8008a34:	2301      	movne	r3, #1
 8008a36:	2300      	moveq	r3, #0
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a40:	3b18      	subs	r3, #24
 8008a42:	4611      	mov	r1, r2
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fd fbcd 	bl	80061e4 <chk_lock>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008a50:	f102 0217 	add.w	r2, r2, #23
 8008a54:	7013      	strb	r3, [r2, #0]
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008a56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008a5a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008a5e:	f003 031c 	and.w	r3, r3, #28
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 813c 	beq.w	8008ce0 <f_open+0x3d0>
			if (res != FR_OK) {					/* No file, create new */
 8008a68:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a6c:	f103 0317 	add.w	r3, r3, #23
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d02e      	beq.n	8008ad4 <f_open+0x1c4>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8008a76:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008a7a:	f103 0317 	add.w	r3, r3, #23
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d112      	bne.n	8008aaa <f_open+0x19a>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008a84:	f7fd fc1e 	bl	80062c4 <enq_lock>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d007      	beq.n	8008a9e <f_open+0x18e>
 8008a8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008a92:	3b18      	subs	r3, #24
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe ff79 	bl	800798c <dir_register>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	e000      	b.n	8008aa0 <f_open+0x190>
 8008a9e:	2312      	movs	r3, #18
 8008aa0:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008aa4:	f102 0217 	add.w	r2, r2, #23
 8008aa8:	7013      	strb	r3, [r2, #0]
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008aaa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008aae:	461a      	mov	r2, r3
 8008ab0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ab4:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008ab8:	f043 0308 	orr.w	r3, r3, #8
 8008abc:	f802 3c51 	strb.w	r3, [r2, #-81]
				dir = dj.dir;					/* New entry */
 8008ac0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ac4:	f8d3 3fdc 	ldr.w	r3, [r3, #4060]	; 0xfdc
 8008ac8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008acc:	f102 0210 	add.w	r2, r2, #16
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	e01f      	b.n	8008b14 <f_open+0x204>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008ad4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ad8:	f103 0310 	add.w	r3, r3, #16
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	330b      	adds	r3, #11
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	f003 0311 	and.w	r3, r3, #17
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d006      	beq.n	8008af8 <f_open+0x1e8>
					res = FR_DENIED;
 8008aea:	2307      	movs	r3, #7
 8008aec:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008af0:	f102 0217 	add.w	r2, r2, #23
 8008af4:	7013      	strb	r3, [r2, #0]
 8008af6:	e00d      	b.n	8008b14 <f_open+0x204>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 8008af8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008afc:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008b00:	f003 0304 	and.w	r3, r3, #4
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d005      	beq.n	8008b14 <f_open+0x204>
						res = FR_EXIST;
 8008b08:	2308      	movs	r3, #8
 8008b0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b0e:	f102 0217 	add.w	r2, r2, #23
 8008b12:	7013      	strb	r3, [r2, #0]
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008b14:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b18:	f103 0317 	add.w	r3, r3, #23
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f040 8113 	bne.w	8008d4a <f_open+0x43a>
 8008b24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008b28:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008b2c:	f003 0308 	and.w	r3, r3, #8
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f000 810a 	beq.w	8008d4a <f_open+0x43a>
				dw = GET_FATTIME();				/* Created time */
 8008b36:	f7fd f9dd 	bl	8005ef4 <get_fattime>
 8008b3a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b3e:	f103 030c 	add.w	r3, r3, #12
 8008b42:	6018      	str	r0, [r3, #0]
				ST_DWORD(dir + DIR_CrtTime, dw);
 8008b44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b48:	f103 0310 	add.w	r3, r3, #16
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	330e      	adds	r3, #14
 8008b50:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008b54:	f102 020c 	add.w	r2, r2, #12
 8008b58:	6812      	ldr	r2, [r2, #0]
 8008b5a:	b2d2      	uxtb	r2, r2
 8008b5c:	701a      	strb	r2, [r3, #0]
 8008b5e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b62:	f103 030c 	add.w	r3, r3, #12
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	0a1b      	lsrs	r3, r3, #8
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b72:	f103 0310 	add.w	r3, r3, #16
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	330f      	adds	r3, #15
 8008b7a:	b2d2      	uxtb	r2, r2
 8008b7c:	701a      	strb	r2, [r3, #0]
 8008b7e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b82:	f103 030c 	add.w	r3, r3, #12
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	0c1a      	lsrs	r2, r3, #16
 8008b8a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b8e:	f103 0310 	add.w	r3, r3, #16
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3310      	adds	r3, #16
 8008b96:	b2d2      	uxtb	r2, r2
 8008b98:	701a      	strb	r2, [r3, #0]
 8008b9a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008b9e:	f103 030c 	add.w	r3, r3, #12
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	0e1a      	lsrs	r2, r3, #24
 8008ba6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008baa:	f103 0310 	add.w	r3, r3, #16
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3311      	adds	r3, #17
 8008bb2:	b2d2      	uxtb	r2, r2
 8008bb4:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8008bb6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bba:	f103 0310 	add.w	r3, r3, #16
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	330b      	adds	r3, #11
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8008bc6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bca:	f103 0310 	add.w	r3, r3, #16
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	331c      	adds	r3, #28
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bda:	f103 0310 	add.w	r3, r3, #16
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	331d      	adds	r3, #29
 8008be2:	2200      	movs	r2, #0
 8008be4:	701a      	strb	r2, [r3, #0]
 8008be6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bea:	f103 0310 	add.w	r3, r3, #16
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	331e      	adds	r3, #30
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008bfa:	f103 0310 	add.w	r3, r3, #16
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	331f      	adds	r3, #31
 8008c02:	2200      	movs	r2, #0
 8008c04:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8008c06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c0a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008c0e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c12:	f102 0210 	add.w	r2, r2, #16
 8008c16:	6811      	ldr	r1, [r2, #0]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7fe fc06 	bl	800742a <ld_clust>
 8008c1e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c22:	f103 0308 	add.w	r3, r3, #8
 8008c26:	6018      	str	r0, [r3, #0]
				st_clust(dir, 0);				/* cluster = 0 */
 8008c28:	2100      	movs	r1, #0
 8008c2a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c2e:	f103 0310 	add.w	r3, r3, #16
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	f7fe fc27 	bl	8007486 <st_clust>
				dj.fs->wflag = 1;
 8008c38:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c3c:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c44:	2201      	movs	r2, #1
 8008c46:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8008c48:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c4c:	f103 0308 	add.w	r3, r3, #8
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d079      	beq.n	8008d4a <f_open+0x43a>
					dw = dj.fs->winsect;
 8008c56:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c5a:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c68:	f102 020c 	add.w	r2, r2, #12
 8008c6c:	6013      	str	r3, [r2, #0]
					res = remove_chain(dj.fs, cl);
 8008c6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c72:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008c76:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c7a:	f102 0208 	add.w	r2, r2, #8
 8008c7e:	6811      	ldr	r1, [r2, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fe f823 	bl	8006ccc <remove_chain>
 8008c86:	4603      	mov	r3, r0
 8008c88:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008c8c:	f102 0217 	add.w	r2, r2, #23
 8008c90:	7013      	strb	r3, [r2, #0]
					if (res == FR_OK) {
 8008c92:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008c96:	f103 0317 	add.w	r3, r3, #23
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d154      	bne.n	8008d4a <f_open+0x43a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8008ca0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ca4:	f8d3 2fc8 	ldr.w	r2, [r3, #4040]	; 0xfc8
 8008ca8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008cac:	f103 0308 	add.w	r3, r3, #8
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3b01      	subs	r3, #1
 8008cb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cb8:	60d3      	str	r3, [r2, #12]
						res = move_window(dj.fs, dw);
 8008cba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008cbe:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008cc2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008cc6:	f102 020c 	add.w	r2, r2, #12
 8008cca:	6811      	ldr	r1, [r2, #0]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fd fc99 	bl	8006604 <move_window>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008cd8:	f102 0217 	add.w	r2, r2, #23
 8008cdc:	7013      	strb	r3, [r2, #0]
 8008cde:	e034      	b.n	8008d4a <f_open+0x43a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8008ce0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008ce4:	f103 0317 	add.w	r3, r3, #23
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d12d      	bne.n	8008d4a <f_open+0x43a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8008cee:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008cf2:	f103 0310 	add.w	r3, r3, #16
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	330b      	adds	r3, #11
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d009      	beq.n	8008d18 <f_open+0x408>
					res = FR_NO_FILE;
 8008d04:	2304      	movs	r3, #4
 8008d06:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d0a:	f102 0217 	add.w	r2, r2, #23
 8008d0e:	7013      	strb	r3, [r2, #0]
 8008d10:	e01b      	b.n	8008d4a <f_open+0x43a>
 8008d12:	bf00      	nop
 8008d14:	200026a8 	.word	0x200026a8
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8008d18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d1c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d010      	beq.n	8008d4a <f_open+0x43a>
 8008d28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d2c:	f103 0310 	add.w	r3, r3, #16
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	330b      	adds	r3, #11
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	f003 0301 	and.w	r3, r3, #1
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <f_open+0x43a>
						res = FR_DENIED;
 8008d3e:	2307      	movs	r3, #7
 8008d40:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008d44:	f102 0217 	add.w	r2, r2, #23
 8008d48:	7013      	strb	r3, [r2, #0]
				}
			}
		}
		if (res == FR_OK) {
 8008d4a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008d4e:	f103 0317 	add.w	r3, r3, #23
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d157      	bne.n	8008e08 <f_open+0x4f8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008d58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d5c:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008d60:	f003 0308 	and.w	r3, r3, #8
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <f_open+0x46e>
				mode |= FA__WRITTEN;
 8008d68:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d72:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008d76:	f043 0320 	orr.w	r3, r3, #32
 8008d7a:	f802 3c51 	strb.w	r3, [r2, #-81]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8008d7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d82:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008d90:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008d94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d98:	61d3      	str	r3, [r2, #28]
			fp->dir_ptr = dir;
 8008d9a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008d9e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da6:	461a      	mov	r2, r3
 8008da8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008dac:	f103 0310 	add.w	r3, r3, #16
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6213      	str	r3, [r2, #32]
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008db4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008db8:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008dbc:	f023 0301 	bic.w	r3, r3, #1
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	bf14      	ite	ne
 8008dc4:	2301      	movne	r3, #1
 8008dc6:	2300      	moveq	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008dd0:	3b18      	subs	r3, #24
 8008dd2:	4611      	mov	r1, r2
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7fd fa99 	bl	800630c <inc_lock>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008de0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de8:	629a      	str	r2, [r3, #40]	; 0x28
			if (!fp->lockid) res = FR_INT_ERR;
 8008dea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008dee:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008df2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d105      	bne.n	8008e08 <f_open+0x4f8>
 8008dfc:	2302      	movs	r3, #2
 8008dfe:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e02:	f102 0217 	add.w	r2, r2, #23
 8008e06:	7013      	strb	r3, [r2, #0]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8008e08:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e0c:	f103 0317 	add.w	r3, r3, #23
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f040 8088 	bne.w	8008f28 <f_open+0x618>
			fp->flag = mode;					/* File access mode */
 8008e18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e1c:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e24:	461a      	mov	r2, r3
 8008e26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e2a:	f813 3c51 	ldrb.w	r3, [r3, #-81]
 8008e2e:	7193      	strb	r3, [r2, #6]
			fp->err = 0;						/* Clear error flag */
 8008e30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e34:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8008e40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e44:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008e48:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e4c:	f102 0210 	add.w	r2, r2, #16
 8008e50:	6811      	ldr	r1, [r2, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe fae9 	bl	800742a <ld_clust>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008e5e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e66:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8008e68:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e6c:	f103 0310 	add.w	r3, r3, #16
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	331f      	adds	r3, #31
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	061a      	lsls	r2, r3, #24
 8008e78:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008e7c:	f103 0310 	add.w	r3, r3, #16
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	331e      	adds	r3, #30
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	041b      	lsls	r3, r3, #16
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008e8e:	f102 0210 	add.w	r2, r2, #16
 8008e92:	6812      	ldr	r2, [r2, #0]
 8008e94:	321d      	adds	r2, #29
 8008e96:	7812      	ldrb	r2, [r2, #0]
 8008e98:	0212      	lsls	r2, r2, #8
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8008ea0:	f102 0210 	add.w	r2, r2, #16
 8008ea4:	6812      	ldr	r2, [r2, #0]
 8008ea6:	321c      	adds	r2, #28
 8008ea8:	7812      	ldrb	r2, [r2, #0]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008eb0:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008eb4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008eb8:	60d3      	str	r3, [r2, #12]
			fp->fptr = 0;						/* File pointer */
 8008eba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ebe:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	2300      	movs	r3, #0
 8008eca:	6093      	str	r3, [r2, #8]
			fp->dsect = 0;
 8008ecc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ed0:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ed8:	461a      	mov	r2, r3
 8008eda:	2300      	movs	r3, #0
 8008edc:	6193      	str	r3, [r2, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 8008ede:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ee2:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008eea:	461a      	mov	r2, r3
 8008eec:	2300      	movs	r3, #0
 8008eee:	6253      	str	r3, [r2, #36]	; 0x24
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8008ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008ef4:	f8d3 3fc8 	ldr.w	r3, [r3, #4040]	; 0xfc8
 8008ef8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008efc:	f852 2c4c 	ldr.w	r2, [r2, #-76]
 8008f00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f04:	6013      	str	r3, [r2, #0]
			fp->id = fp->fs->id;
 8008f06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f0a:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f18:	88da      	ldrh	r2, [r3, #6]
 8008f1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008f1e:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 8008f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f26:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8008f28:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8008f2c:	f103 0317 	add.w	r3, r3, #23
 8008f30:	781b      	ldrb	r3, [r3, #0]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop

08008f40 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
 8008f4c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	2200      	movs	r2, #0
 8008f56:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f7ff fc53 	bl	8008804 <validate>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8008f62:	7dfb      	ldrb	r3, [r7, #23]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d001      	beq.n	8008f6c <f_write+0x2c>
 8008f68:	7dfb      	ldrb	r3, [r7, #23]
 8008f6a:	e21e      	b.n	80093aa <f_write+0x46a>
	if (fp->err)							/* Check error */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f72:	79db      	ldrb	r3, [r3, #7]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d004      	beq.n	8008f82 <f_write+0x42>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f7e:	79db      	ldrb	r3, [r3, #7]
 8008f80:	e213      	b.n	80093aa <f_write+0x46a>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f88:	799b      	ldrb	r3, [r3, #6]
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <f_write+0x56>
		LEAVE_FF(fp->fs, FR_DENIED);
 8008f92:	2307      	movs	r3, #7
 8008f94:	e209      	b.n	80093aa <f_write+0x46a>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	441a      	add	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	f080 81d9 	bcs.w	8009362 <f_write+0x422>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8008fb4:	e1d5      	b.n	8009362 <f_write+0x422>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fc4:	6812      	ldr	r2, [r2, #0]
 8008fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fca:	8952      	ldrh	r2, [r2, #10]
 8008fcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fd0:	fb01 f202 	mul.w	r2, r1, r2
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f040 8169 	bne.w	80092ae <f_write+0x36e>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008fea:	6812      	ldr	r2, [r2, #0]
 8008fec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ff0:	8952      	ldrh	r2, [r2, #10]
 8008ff2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009004:	789b      	ldrb	r3, [r3, #2]
 8009006:	3b01      	subs	r3, #1
 8009008:	b2db      	uxtb	r3, r3
 800900a:	4013      	ands	r3, r2
 800900c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800900e:	7dbb      	ldrb	r3, [r7, #22]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d15f      	bne.n	80090d4 <f_write+0x194>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d111      	bne.n	8009044 <f_write+0x104>
					clst = fp->sclust;		/* Follow from the origin */
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	d126      	bne.n	800907e <f_write+0x13e>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f7fd fea7 	bl	8006d8e <create_chain>
 8009040:	6278      	str	r0, [r7, #36]	; 0x24
 8009042:	e01c      	b.n	800907e <f_write+0x13e>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	d009      	beq.n	8009064 <f_write+0x124>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	4619      	mov	r1, r3
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f7fd ff3f 	bl	8006ede <clmt_clust>
 8009060:	6278      	str	r0, [r7, #36]	; 0x24
 8009062:	e00c      	b.n	800907e <f_write+0x13e>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009072:	695b      	ldr	r3, [r3, #20]
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f7fd fe89 	bl	8006d8e <create_chain>
 800907c:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	f000 8173 	beq.w	800936c <f_write+0x42c>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8009086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009088:	2b01      	cmp	r3, #1
 800908a:	d106      	bne.n	800909a <f_write+0x15a>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009092:	2202      	movs	r2, #2
 8009094:	71da      	strb	r2, [r3, #7]
 8009096:	2302      	movs	r3, #2
 8009098:	e187      	b.n	80093aa <f_write+0x46a>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800909a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a0:	d106      	bne.n	80090b0 <f_write+0x170>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090a8:	2201      	movs	r2, #1
 80090aa:	71da      	strb	r2, [r3, #7]
 80090ac:	2301      	movs	r3, #1
 80090ae:	e17c      	b.n	80093aa <f_write+0x46a>
				fp->clust = clst;			/* Update current cluster */
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090b6:	461a      	mov	r2, r3
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	6153      	str	r3, [r2, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d105      	bne.n	80090d4 <f_write+0x194>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ce:	461a      	mov	r2, r3
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	6113      	str	r3, [r2, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090da:	799b      	ldrb	r3, [r3, #6]
 80090dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d023      	beq.n	800912c <f_write+0x1ec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090f0:	7858      	ldrb	r0, [r3, #1]
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80090fa:	699a      	ldr	r2, [r3, #24]
 80090fc:	2301      	movs	r3, #1
 80090fe:	f7fc ffbb 	bl	8006078 <disk_write>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d006      	beq.n	8009116 <f_write+0x1d6>
					ABORT(fp->fs, FR_DISK_ERR);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800910e:	2201      	movs	r2, #1
 8009110:	71da      	strb	r2, [r3, #7]
 8009112:	2301      	movs	r3, #1
 8009114:	e149      	b.n	80093aa <f_write+0x46a>
				fp->flag &= ~FA__DIRTY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800911c:	799b      	ldrb	r3, [r3, #6]
 800911e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009122:	b2da      	uxtb	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800912a:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	f7fd fb51 	bl	80067e6 <clust2sect>
 8009144:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d106      	bne.n	800915a <f_write+0x21a>
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009152:	2202      	movs	r2, #2
 8009154:	71da      	strb	r2, [r3, #7]
 8009156:	2302      	movs	r3, #2
 8009158:	e127      	b.n	80093aa <f_write+0x46a>
			sect += csect;
 800915a:	7dbb      	ldrb	r3, [r7, #22]
 800915c:	693a      	ldr	r2, [r7, #16]
 800915e:	4413      	add	r3, r2
 8009160:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800916e:	895b      	ldrh	r3, [r3, #10]
 8009170:	461a      	mov	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	fbb3 f3f2 	udiv	r3, r3, r2
 8009178:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d069      	beq.n	8009254 <f_write+0x314>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8009180:	7dba      	ldrb	r2, [r7, #22]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	4413      	add	r3, r2
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800918c:	6812      	ldr	r2, [r2, #0]
 800918e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009192:	7892      	ldrb	r2, [r2, #2]
 8009194:	4293      	cmp	r3, r2
 8009196:	d90a      	bls.n	80091ae <f_write+0x26e>
					cc = fp->fs->csize - csect;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091a4:	789b      	ldrb	r3, [r3, #2]
 80091a6:	461a      	mov	r2, r3
 80091a8:	7dbb      	ldrb	r3, [r7, #22]
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091ba:	7858      	ldrb	r0, [r3, #1]
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	69b9      	ldr	r1, [r7, #24]
 80091c2:	f7fc ff59 	bl	8006078 <disk_write>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d006      	beq.n	80091da <f_write+0x29a>
					ABORT(fp->fs, FR_DISK_ERR);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091d2:	2201      	movs	r2, #1
 80091d4:	71da      	strb	r2, [r3, #7]
 80091d6:	2301      	movs	r3, #1
 80091d8:	e0e7      	b.n	80093aa <f_write+0x46a>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091e0:	699a      	ldr	r2, [r3, #24]
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d926      	bls.n	800923a <f_write+0x2fa>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091f4:	699a      	ldr	r2, [r3, #24]
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009200:	6812      	ldr	r2, [r2, #0]
 8009202:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009206:	8952      	ldrh	r2, [r2, #10]
 8009208:	fb02 f303 	mul.w	r3, r2, r3
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	18d1      	adds	r1, r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800921c:	895b      	ldrh	r3, [r3, #10]
 800921e:	461a      	mov	r2, r3
 8009220:	f7fc ff68 	bl	80060f4 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800922a:	799b      	ldrb	r3, [r3, #6]
 800922c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009230:	b2da      	uxtb	r2, r3
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009238:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009246:	895b      	ldrh	r3, [r3, #10]
 8009248:	461a      	mov	r2, r3
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	fb02 f303 	mul.w	r3, r2, r3
 8009250:	623b      	str	r3, [r7, #32]
				continue;
 8009252:	e06e      	b.n	8009332 <f_write+0x3f2>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	693a      	ldr	r2, [r7, #16]
 800925e:	429a      	cmp	r2, r3
 8009260:	d01f      	beq.n	80092a2 <f_write+0x362>
				if (fp->fptr < fp->fsize &&
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009268:	689a      	ldr	r2, [r3, #8]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	429a      	cmp	r2, r3
 8009274:	d215      	bcs.n	80092a2 <f_write+0x362>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009282:	7858      	ldrb	r0, [r3, #1]
 8009284:	68f9      	ldr	r1, [r7, #12]
 8009286:	2301      	movs	r3, #1
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	f7fc fed5 	bl	8006038 <disk_read>
 800928e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8009290:	2b00      	cmp	r3, #0
 8009292:	d006      	beq.n	80092a2 <f_write+0x362>
						ABORT(fp->fs, FR_DISK_ERR);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929a:	2201      	movs	r2, #1
 800929c:	71da      	strb	r2, [r3, #7]
 800929e:	2301      	movs	r3, #1
 80092a0:	e083      	b.n	80093aa <f_write+0x46a>
			}
#endif
			fp->dsect = sect;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092a8:	461a      	mov	r2, r3
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	6193      	str	r3, [r2, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092ba:	895b      	ldrh	r3, [r3, #10]
 80092bc:	4618      	mov	r0, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	68fa      	ldr	r2, [r7, #12]
 80092c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092cc:	6812      	ldr	r2, [r2, #0]
 80092ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092d2:	8952      	ldrh	r2, [r2, #10]
 80092d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80092d8:	fb01 f202 	mul.w	r2, r1, r2
 80092dc:	1a9b      	subs	r3, r3, r2
 80092de:	1ac3      	subs	r3, r0, r3
 80092e0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 80092e2:	6a3a      	ldr	r2, [r7, #32]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d901      	bls.n	80092ee <f_write+0x3ae>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	68fa      	ldr	r2, [r7, #12]
 80092f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80092fc:	6812      	ldr	r2, [r2, #0]
 80092fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009302:	8952      	ldrh	r2, [r2, #10]
 8009304:	fbb3 f1f2 	udiv	r1, r3, r2
 8009308:	fb01 f202 	mul.w	r2, r1, r2
 800930c:	1a9b      	subs	r3, r3, r2
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4413      	add	r3, r2
 8009312:	6a3a      	ldr	r2, [r7, #32]
 8009314:	69b9      	ldr	r1, [r7, #24]
 8009316:	4618      	mov	r0, r3
 8009318:	f7fc feec 	bl	80060f4 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009322:	799b      	ldrb	r3, [r3, #6]
 8009324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009328:	b2da      	uxtb	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009330:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8009332:	69ba      	ldr	r2, [r7, #24]
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	4413      	add	r3, r2
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009340:	689a      	ldr	r2, [r3, #8]
 8009342:	6a3b      	ldr	r3, [r7, #32]
 8009344:	4413      	add	r3, r2
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800934c:	6093      	str	r3, [r2, #8]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	441a      	add	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f47f ae26 	bne.w	8008fb6 <f_write+0x76>
 800936a:	e000      	b.n	800936e <f_write+0x42e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800936c:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009374:	689a      	ldr	r2, [r3, #8]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	429a      	cmp	r2, r3
 8009380:	d907      	bls.n	8009392 <f_write+0x452>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009388:	689b      	ldr	r3, [r3, #8]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009390:	60d3      	str	r3, [r2, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009398:	799b      	ldrb	r3, [r3, #6]
 800939a:	f043 0320 	orr.w	r3, r3, #32
 800939e:	b2da      	uxtb	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093a6:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3728      	adds	r7, #40	; 0x28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80093b2:	b580      	push	{r7, lr}
 80093b4:	b086      	sub	sp, #24
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff fa22 	bl	8008804 <validate>
 80093c0:	4603      	mov	r3, r0
 80093c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f040 80bc 	bne.w	8009544 <f_sync+0x192>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093d2:	799b      	ldrb	r3, [r3, #6]
 80093d4:	f003 0320 	and.w	r3, r3, #32
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 80b3 	beq.w	8009544 <f_sync+0x192>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093e4:	799b      	ldrb	r3, [r3, #6]
 80093e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d01e      	beq.n	800942c <f_sync+0x7a>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093fa:	7858      	ldrb	r0, [r3, #1]
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	2301      	movs	r3, #1
 8009408:	f7fc fe36 	bl	8006078 <disk_write>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <f_sync+0x64>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8009412:	2301      	movs	r3, #1
 8009414:	e097      	b.n	8009546 <f_sync+0x194>
				fp->flag &= ~FA__DIRTY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800941c:	799b      	ldrb	r3, [r3, #6]
 800941e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009422:	b2da      	uxtb	r2, r3
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800942a:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	4619      	mov	r1, r3
 800943e:	4610      	mov	r0, r2
 8009440:	f7fd f8e0 	bl	8006604 <move_window>
 8009444:	4603      	mov	r3, r0
 8009446:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8009448:	7dfb      	ldrb	r3, [r7, #23]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d17a      	bne.n	8009544 <f_sync+0x192>
				dir = fp->dir_ptr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	330b      	adds	r3, #11
 800945c:	781a      	ldrb	r2, [r3, #0]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	330b      	adds	r3, #11
 8009462:	f042 0220 	orr.w	r2, r2, #32
 8009466:	b2d2      	uxtb	r2, r2
 8009468:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	331c      	adds	r3, #28
 8009476:	b2d2      	uxtb	r2, r2
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	b29b      	uxth	r3, r3
 8009484:	0a1b      	lsrs	r3, r3, #8
 8009486:	b29a      	uxth	r2, r3
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	331d      	adds	r3, #29
 800948c:	b2d2      	uxtb	r2, r2
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	0c1a      	lsrs	r2, r3, #16
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	331e      	adds	r3, #30
 800949e:	b2d2      	uxtb	r2, r2
 80094a0:	701a      	strb	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	0e1a      	lsrs	r2, r3, #24
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	331f      	adds	r3, #31
 80094b0:	b2d2      	uxtb	r2, r2
 80094b2:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ba:	691b      	ldr	r3, [r3, #16]
 80094bc:	4619      	mov	r1, r3
 80094be:	6938      	ldr	r0, [r7, #16]
 80094c0:	f7fd ffe1 	bl	8007486 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 80094c4:	f7fc fd16 	bl	8005ef4 <get_fattime>
 80094c8:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	3316      	adds	r3, #22
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	b2d2      	uxtb	r2, r2
 80094d2:	701a      	strb	r2, [r3, #0]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	0a1b      	lsrs	r3, r3, #8
 80094da:	b29a      	uxth	r2, r3
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	3317      	adds	r3, #23
 80094e0:	b2d2      	uxtb	r2, r2
 80094e2:	701a      	strb	r2, [r3, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	0c1a      	lsrs	r2, r3, #16
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	3318      	adds	r3, #24
 80094ec:	b2d2      	uxtb	r2, r2
 80094ee:	701a      	strb	r2, [r3, #0]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	0e1a      	lsrs	r2, r3, #24
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	3319      	adds	r3, #25
 80094f8:	b2d2      	uxtb	r2, r2
 80094fa:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	3312      	adds	r3, #18
 8009500:	2200      	movs	r2, #0
 8009502:	701a      	strb	r2, [r3, #0]
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	3313      	adds	r3, #19
 8009508:	2200      	movs	r2, #0
 800950a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009512:	799b      	ldrb	r3, [r3, #6]
 8009514:	f023 0320 	bic.w	r3, r3, #32
 8009518:	b2da      	uxtb	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009520:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800952e:	2201      	movs	r2, #1
 8009530:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4618      	mov	r0, r3
 800953c:	f7fd f894 	bl	8006668 <sync_fs>
 8009540:	4603      	mov	r3, r0
 8009542:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8009544:	7dfb      	ldrb	r3, [r7, #23]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3718      	adds	r7, #24
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7ff ff2b 	bl	80093b2 <f_sync>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d119      	bne.n	800959a <f_close+0x4c>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f7ff f94c 	bl	8008804 <validate>
 800956c:	4603      	mov	r3, r0
 800956e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009570:	7bfb      	ldrb	r3, [r7, #15]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d111      	bne.n	800959a <f_close+0x4c>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800957c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800957e:	4618      	mov	r0, r3
 8009580:	f7fc ff80 	bl	8006484 <dec_lock>
 8009584:	4603      	mov	r3, r0
 8009586:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009588:	7bfb      	ldrb	r3, [r7, #15]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d105      	bne.n	800959a <f_close+0x4c>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009594:	461a      	mov	r2, r3
 8009596:	2300      	movs	r3, #0
 8009598:	6013      	str	r3, [r2, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800959a:	7bfb      	ldrb	r3, [r7, #15]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3710      	adds	r7, #16
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b090      	sub	sp, #64	; 0x40
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff f928 	bl	8008804 <validate>
 80095b4:	4603      	mov	r3, r0
 80095b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80095ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <f_lseek+0x24>
 80095c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80095c6:	e2da      	b.n	8009b7e <f_lseek+0x5da>
	if (fp->err)						/* Check error */
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095ce:	79db      	ldrb	r3, [r3, #7]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d004      	beq.n	80095de <f_lseek+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095da:	79db      	ldrb	r3, [r3, #7]
 80095dc:	e2cf      	b.n	8009b7e <f_lseek+0x5da>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 8124 	beq.w	8009834 <f_lseek+0x290>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f2:	d16c      	bne.n	80096ce <f_lseek+0x12a>
			tbl = fp->cltbl;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80095fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009600:	1d1a      	adds	r2, r3, #4
 8009602:	627a      	str	r2, [r7, #36]	; 0x24
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	617b      	str	r3, [r7, #20]
 8009608:	2302      	movs	r3, #2
 800960a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	2b00      	cmp	r3, #0
 800961a:	d046      	beq.n	80096aa <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800961c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961e:	613b      	str	r3, [r7, #16]
 8009620:	2300      	movs	r3, #0
 8009622:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009626:	3302      	adds	r3, #2
 8009628:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	3301      	adds	r3, #1
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800963e:	4618      	mov	r0, r3
 8009640:	f7fd f8f5 	bl	800682e <get_fat>
 8009644:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8009646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009648:	2b01      	cmp	r3, #1
 800964a:	d806      	bhi.n	800965a <f_lseek+0xb6>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009652:	2202      	movs	r2, #2
 8009654:	71da      	strb	r2, [r3, #7]
 8009656:	2302      	movs	r3, #2
 8009658:	e291      	b.n	8009b7e <f_lseek+0x5da>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800965a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800965c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009660:	d106      	bne.n	8009670 <f_lseek+0xcc>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009668:	2201      	movs	r2, #1
 800966a:	71da      	strb	r2, [r3, #7]
 800966c:	2301      	movs	r3, #1
 800966e:	e286      	b.n	8009b7e <f_lseek+0x5da>
					} while (cl == pcl + 1);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3301      	adds	r3, #1
 8009674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009676:	429a      	cmp	r2, r3
 8009678:	d0d7      	beq.n	800962a <f_lseek+0x86>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800967a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	429a      	cmp	r2, r3
 8009680:	d809      	bhi.n	8009696 <f_lseek+0xf2>
						*tbl++ = ncl; *tbl++ = tcl;
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	1d1a      	adds	r2, r3, #4
 8009686:	627a      	str	r2, [r7, #36]	; 0x24
 8009688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	1d1a      	adds	r2, r3, #4
 8009690:	627a      	str	r2, [r7, #36]	; 0x24
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d3b8      	bcc.n	800961c <f_lseek+0x78>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 80096b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d803      	bhi.n	80096c6 <f_lseek+0x122>
				*tbl = 0;		/* Terminate table */
 80096be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	e259      	b.n	8009b7a <f_lseek+0x5d6>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80096c6:	2311      	movs	r3, #17
 80096c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80096cc:	e255      	b.n	8009b7a <f_lseek+0x5d6>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	683a      	ldr	r2, [r7, #0]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d904      	bls.n	80096e6 <f_lseek+0x142>
				ofs = fp->fsize;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80096ec:	461a      	mov	r2, r3
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	6093      	str	r3, [r2, #8]
			if (ofs) {
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8240 	beq.w	8009b7a <f_lseek+0x5d6>
				fp->clust = clmt_clust(fp, ofs - 1);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	4619      	mov	r1, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7fd fbec 	bl	8006ede <clmt_clust>
 8009706:	4602      	mov	r2, r0
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800970e:	615a      	str	r2, [r3, #20]
				dsc = clust2sect(fp->fs, fp->clust);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fd f85f 	bl	80067e6 <clust2sect>
 8009728:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d106      	bne.n	800973e <f_lseek+0x19a>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009736:	2202      	movs	r2, #2
 8009738:	71da      	strb	r2, [r3, #7]
 800973a:	2302      	movs	r3, #2
 800973c:	e21f      	b.n	8009b7e <f_lseek+0x5da>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	3b01      	subs	r3, #1
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009748:	6812      	ldr	r2, [r2, #0]
 800974a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800974e:	8952      	ldrh	r2, [r2, #10]
 8009750:	fbb3 f3f2 	udiv	r3, r3, r2
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009760:	7892      	ldrb	r2, [r2, #2]
 8009762:	3a01      	subs	r2, #1
 8009764:	4013      	ands	r3, r2
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	4413      	add	r3, r2
 800976a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800977a:	6812      	ldr	r2, [r2, #0]
 800977c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009780:	8952      	ldrh	r2, [r2, #10]
 8009782:	fbb3 f1f2 	udiv	r1, r3, r2
 8009786:	fb01 f202 	mul.w	r2, r1, r2
 800978a:	1a9b      	subs	r3, r3, r2
 800978c:	2b00      	cmp	r3, #0
 800978e:	f000 81f4 	beq.w	8009b7a <f_lseek+0x5d6>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009798:	699b      	ldr	r3, [r3, #24]
 800979a:	69ba      	ldr	r2, [r7, #24]
 800979c:	429a      	cmp	r2, r3
 800979e:	f000 81ec 	beq.w	8009b7a <f_lseek+0x5d6>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097a8:	799b      	ldrb	r3, [r3, #6]
 80097aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d023      	beq.n	80097fa <f_lseek+0x256>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097be:	7858      	ldrb	r0, [r3, #1]
 80097c0:	6879      	ldr	r1, [r7, #4]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097c8:	699a      	ldr	r2, [r3, #24]
 80097ca:	2301      	movs	r3, #1
 80097cc:	f7fc fc54 	bl	8006078 <disk_write>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d006      	beq.n	80097e4 <f_lseek+0x240>
							ABORT(fp->fs, FR_DISK_ERR);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097dc:	2201      	movs	r2, #1
 80097de:	71da      	strb	r2, [r3, #7]
 80097e0:	2301      	movs	r3, #1
 80097e2:	e1cc      	b.n	8009b7e <f_lseek+0x5da>
						fp->flag &= ~FA__DIRTY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097ea:	799b      	ldrb	r3, [r3, #6]
 80097ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097f0:	b2da      	uxtb	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80097f8:	719a      	strb	r2, [r3, #6]
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009806:	7858      	ldrb	r0, [r3, #1]
 8009808:	6879      	ldr	r1, [r7, #4]
 800980a:	2301      	movs	r3, #1
 800980c:	69ba      	ldr	r2, [r7, #24]
 800980e:	f7fc fc13 	bl	8006038 <disk_read>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d006      	beq.n	8009826 <f_lseek+0x282>
						ABORT(fp->fs, FR_DISK_ERR);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800981e:	2201      	movs	r2, #1
 8009820:	71da      	strb	r2, [r3, #7]
 8009822:	2301      	movs	r3, #1
 8009824:	e1ab      	b.n	8009b7e <f_lseek+0x5da>
#endif
					fp->dsect = dsc;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800982c:	461a      	mov	r2, r3
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	6193      	str	r3, [r2, #24]
 8009832:	e1a2      	b.n	8009b7a <f_lseek+0x5d6>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800983a:	68db      	ldr	r3, [r3, #12]
 800983c:	683a      	ldr	r2, [r7, #0]
 800983e:	429a      	cmp	r2, r3
 8009840:	d90c      	bls.n	800985c <f_lseek+0x2b8>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009848:	799b      	ldrb	r3, [r3, #6]
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b00      	cmp	r3, #0
 8009850:	d104      	bne.n	800985c <f_lseek+0x2b8>
#endif
			) ofs = fp->fsize;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009866:	2300      	movs	r3, #0
 8009868:	637b      	str	r3, [r7, #52]	; 0x34
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009870:	461a      	mov	r2, r3
 8009872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009874:	6093      	str	r3, [r2, #8]
		if (ofs) {
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	f000 8100 	beq.w	8009a7e <f_lseek+0x4da>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800988a:	789b      	ldrb	r3, [r3, #2]
 800988c:	461a      	mov	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800989a:	895b      	ldrh	r3, [r3, #10]
 800989c:	fb02 f303 	mul.w	r3, r2, r3
 80098a0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80098a2:	6a3b      	ldr	r3, [r7, #32]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d021      	beq.n	80098ec <f_lseek+0x348>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	1e5a      	subs	r2, r3, #1
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80098b2:	6a3b      	ldr	r3, [r7, #32]
 80098b4:	1e59      	subs	r1, r3, #1
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80098bc:	429a      	cmp	r2, r3
 80098be:	d315      	bcc.n	80098ec <f_lseek+0x348>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80098c0:	6a3b      	ldr	r3, [r7, #32]
 80098c2:	1e5a      	subs	r2, r3, #1
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	425b      	negs	r3, r3
 80098c8:	4013      	ands	r3, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80098d0:	6093      	str	r3, [r2, #8]
				ofs -= fp->fptr;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	1ad3      	subs	r3, r2, r3
 80098de:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098e6:	695b      	ldr	r3, [r3, #20]
 80098e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80098ea:	e031      	b.n	8009950 <f_lseek+0x3ac>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80098f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d123      	bne.n	8009944 <f_lseek+0x3a0>
					clst = create_chain(fp->fs, 0);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f7fd fa41 	bl	8006d8e <create_chain>
 800990c:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800990e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009910:	2b01      	cmp	r3, #1
 8009912:	d106      	bne.n	8009922 <f_lseek+0x37e>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800991a:	2202      	movs	r2, #2
 800991c:	71da      	strb	r2, [r3, #7]
 800991e:	2302      	movs	r3, #2
 8009920:	e12d      	b.n	8009b7e <f_lseek+0x5da>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8009922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009928:	d106      	bne.n	8009938 <f_lseek+0x394>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009930:	2201      	movs	r2, #1
 8009932:	71da      	strb	r2, [r3, #7]
 8009934:	2301      	movs	r3, #1
 8009936:	e122      	b.n	8009b7e <f_lseek+0x5da>
					fp->sclust = clst;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800993e:	461a      	mov	r2, r3
 8009940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009942:	6113      	str	r3, [r2, #16]
				}
#endif
				fp->clust = clst;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800994a:	461a      	mov	r2, r3
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	6153      	str	r3, [r2, #20]
			}
			if (clst != 0) {
 8009950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 8093 	beq.w	8009a7e <f_lseek+0x4da>
				while (ofs > bcs) {						/* Cluster following loop */
 8009958:	e052      	b.n	8009a00 <f_lseek+0x45c>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009960:	799b      	ldrb	r3, [r3, #6]
 8009962:	f003 0302 	and.w	r3, r3, #2
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00e      	beq.n	8009988 <f_lseek+0x3e4>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009974:	4618      	mov	r0, r3
 8009976:	f7fd fa0a 	bl	8006d8e <create_chain>
 800997a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 800997c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10b      	bne.n	800999a <f_lseek+0x3f6>
							ofs = bcs; break;
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	603b      	str	r3, [r7, #0]
 8009986:	e03f      	b.n	8009a08 <f_lseek+0x464>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009992:	4618      	mov	r0, r3
 8009994:	f7fc ff4b 	bl	800682e <get_fat>
 8009998:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800999a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800999c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a0:	d106      	bne.n	80099b0 <f_lseek+0x40c>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099a8:	2201      	movs	r2, #1
 80099aa:	71da      	strb	r2, [r3, #7]
 80099ac:	2301      	movs	r3, #1
 80099ae:	e0e6      	b.n	8009b7e <f_lseek+0x5da>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 80099b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d909      	bls.n	80099ca <f_lseek+0x426>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099c2:	695b      	ldr	r3, [r3, #20]
 80099c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d306      	bcc.n	80099d8 <f_lseek+0x434>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099d0:	2202      	movs	r2, #2
 80099d2:	71da      	strb	r2, [r3, #7]
 80099d4:	2302      	movs	r3, #2
 80099d6:	e0d2      	b.n	8009b7e <f_lseek+0x5da>
					fp->clust = clst;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099de:	461a      	mov	r2, r3
 80099e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e2:	6153      	str	r3, [r2, #20]
					fp->fptr += bcs;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099ea:	689a      	ldr	r2, [r3, #8]
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	4413      	add	r3, r2
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80099f6:	6093      	str	r3, [r2, #8]
					ofs -= bcs;
 80099f8:	683a      	ldr	r2, [r7, #0]
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8009a00:	683a      	ldr	r2, [r7, #0]
 8009a02:	69fb      	ldr	r3, [r7, #28]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d8a8      	bhi.n	800995a <f_lseek+0x3b6>
				}
				fp->fptr += ofs;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a0e:	689a      	ldr	r2, [r3, #8]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	4413      	add	r3, r2
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a1a:	6093      	str	r3, [r2, #8]
				if (ofs % SS(fp->fs)) {
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a28:	895b      	ldrh	r3, [r3, #10]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a32:	fb01 f202 	mul.w	r2, r1, r2
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d020      	beq.n	8009a7e <f_lseek+0x4da>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fc fecd 	bl	80067e6 <clust2sect>
 8009a4c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 8009a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d106      	bne.n	8009a62 <f_lseek+0x4be>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a5a:	2202      	movs	r2, #2
 8009a5c:	71da      	strb	r2, [r3, #7]
 8009a5e:	2302      	movs	r3, #2
 8009a60:	e08d      	b.n	8009b7e <f_lseek+0x5da>
					nsect += ofs / SS(fp->fs);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a6e:	895b      	ldrh	r3, [r3, #10]
 8009a70:	461a      	mov	r2, r3
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a7a:	4413      	add	r3, r2
 8009a7c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a8c:	6812      	ldr	r2, [r2, #0]
 8009a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009a92:	8952      	ldrh	r2, [r2, #10]
 8009a94:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a98:	fb01 f202 	mul.w	r2, r1, r2
 8009a9c:	1a9b      	subs	r3, r3, r2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d04e      	beq.n	8009b40 <f_lseek+0x59c>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d047      	beq.n	8009b40 <f_lseek+0x59c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ab6:	799b      	ldrb	r3, [r3, #6]
 8009ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d023      	beq.n	8009b08 <f_lseek+0x564>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009acc:	7858      	ldrb	r0, [r3, #1]
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ad6:	699a      	ldr	r2, [r3, #24]
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f7fc facd 	bl	8006078 <disk_write>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d006      	beq.n	8009af2 <f_lseek+0x54e>
					ABORT(fp->fs, FR_DISK_ERR);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aea:	2201      	movs	r2, #1
 8009aec:	71da      	strb	r2, [r3, #7]
 8009aee:	2301      	movs	r3, #1
 8009af0:	e045      	b.n	8009b7e <f_lseek+0x5da>
				fp->flag &= ~FA__DIRTY;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009af8:	799b      	ldrb	r3, [r3, #6]
 8009afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b06:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b14:	7858      	ldrb	r0, [r3, #1]
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	2301      	movs	r3, #1
 8009b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b1c:	f7fc fa8c 	bl	8006038 <disk_read>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d006      	beq.n	8009b34 <f_lseek+0x590>
				ABORT(fp->fs, FR_DISK_ERR);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	71da      	strb	r2, [r3, #7]
 8009b30:	2301      	movs	r3, #1
 8009b32:	e024      	b.n	8009b7e <f_lseek+0x5da>
#endif
			fp->dsect = nsect;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3e:	6193      	str	r3, [r2, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b46:	689a      	ldr	r2, [r3, #8]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d912      	bls.n	8009b7a <f_lseek+0x5d6>
			fp->fsize = fp->fptr;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009b62:	60d3      	str	r3, [r2, #12]
			fp->flag |= FA__WRITTEN;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b6a:	799b      	ldrb	r3, [r3, #6]
 8009b6c:	f043 0320 	orr.w	r3, r3, #32
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b78:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8009b7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3740      	adds	r7, #64	; 0x40
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <putc_bfd>:
static
void putc_bfd (
	putbuff* pb,
	TCHAR c
)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b084      	sub	sp, #16
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	460b      	mov	r3, r1
 8009b90:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8009b92:	78fb      	ldrb	r3, [r7, #3]
 8009b94:	2b0a      	cmp	r3, #10
 8009b96:	d103      	bne.n	8009ba0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8009b98:	210d      	movs	r1, #13
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7ff fff3 	bl	8009b86 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	db25      	blt.n	8009bf8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	60fa      	str	r2, [r7, #12]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	78fa      	ldrb	r2, [r7, #3]
 8009bb8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b3c      	cmp	r3, #60	; 0x3c
 8009bbe:	dd12      	ble.n	8009be6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6818      	ldr	r0, [r3, #0]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f103 010c 	add.w	r1, r3, #12
 8009bca:	68fa      	ldr	r2, [r7, #12]
 8009bcc:	f107 0308 	add.w	r3, r7, #8
 8009bd0:	f7ff f9b6 	bl	8008f40 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d101      	bne.n	8009be0 <putc_bfd+0x5a>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e001      	b.n	8009be4 <putc_bfd+0x5e>
 8009be0:	f04f 33ff 	mov.w	r3, #4294967295
 8009be4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	1c5a      	adds	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	609a      	str	r2, [r3, #8]
 8009bf6:	e000      	b.n	8009bfa <putc_bfd+0x74>
	if (i < 0) return;
 8009bf8:	bf00      	nop
}
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8009c00:	b590      	push	{r4, r7, lr}
 8009c02:	b097      	sub	sp, #92	; 0x5c
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	60fb      	str	r3, [r7, #12]
	pb.nchr = pb.idx = 0;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	613b      	str	r3, [r7, #16]
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	617b      	str	r3, [r7, #20]

	while (*str)			/* Put the string */
 8009c16:	e009      	b.n	8009c2c <f_puts+0x2c>
		putc_bfd(&pb, *str++);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	1c5a      	adds	r2, r3, #1
 8009c1c:	607a      	str	r2, [r7, #4]
 8009c1e:	781a      	ldrb	r2, [r3, #0]
 8009c20:	f107 030c 	add.w	r3, r7, #12
 8009c24:	4611      	mov	r1, r2
 8009c26:	4618      	mov	r0, r3
 8009c28:	f7ff ffad 	bl	8009b86 <putc_bfd>
	while (*str)			/* Put the string */
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d1f1      	bne.n	8009c18 <f_puts+0x18>

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	db15      	blt.n	8009c66 <f_puts+0x66>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 8009c3a:	68f8      	ldr	r0, [r7, #12]
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	461c      	mov	r4, r3
 8009c40:	f107 0208 	add.w	r2, r7, #8
 8009c44:	f107 030c 	add.w	r3, r7, #12
 8009c48:	f103 010c 	add.w	r1, r3, #12
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	4622      	mov	r2, r4
 8009c50:	f7ff f976 	bl	8008f40 <f_write>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d105      	bne.n	8009c66 <f_puts+0x66>
		&& (UINT)pb.idx == nw) return pb.nchr;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d101      	bne.n	8009c66 <f_puts+0x66>
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	e001      	b.n	8009c6a <f_puts+0x6a>
	return EOF;
 8009c66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	375c      	adds	r7, #92	; 0x5c
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd90      	pop	{r4, r7, pc}
	...

08009c74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b087      	sub	sp, #28
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	4613      	mov	r3, r2
 8009c80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009c82:	2301      	movs	r3, #1
 8009c84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009c8a:	4b1e      	ldr	r3, [pc, #120]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009c8c:	7a5b      	ldrb	r3, [r3, #9]
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d831      	bhi.n	8009cf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009c94:	4b1b      	ldr	r3, [pc, #108]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009c96:	7a5b      	ldrb	r3, [r3, #9]
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	4b19      	ldr	r3, [pc, #100]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009ca2:	4b18      	ldr	r3, [pc, #96]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009ca4:	7a5b      	ldrb	r3, [r3, #9]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	4a16      	ldr	r2, [pc, #88]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009cb2:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009cb4:	7a5b      	ldrb	r3, [r3, #9]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4b12      	ldr	r3, [pc, #72]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009cbc:	4413      	add	r3, r2
 8009cbe:	79fa      	ldrb	r2, [r7, #7]
 8009cc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009cc2:	4b10      	ldr	r3, [pc, #64]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009cc4:	7a5b      	ldrb	r3, [r3, #9]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	b2d1      	uxtb	r1, r2
 8009ccc:	4a0d      	ldr	r2, [pc, #52]	; (8009d04 <FATFS_LinkDriverEx+0x90>)
 8009cce:	7251      	strb	r1, [r2, #9]
 8009cd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009cd2:	7dbb      	ldrb	r3, [r7, #22]
 8009cd4:	3330      	adds	r3, #48	; 0x30
 8009cd6:	b2da      	uxtb	r2, r3
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	3301      	adds	r3, #1
 8009ce0:	223a      	movs	r2, #58	; 0x3a
 8009ce2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3302      	adds	r3, #2
 8009ce8:	222f      	movs	r2, #47	; 0x2f
 8009cea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	3303      	adds	r3, #3
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	371c      	adds	r7, #28
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bc80      	pop	{r7}
 8009d02:	4770      	bx	lr
 8009d04:	200028a8 	.word	0x200028a8

08009d08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b082      	sub	sp, #8
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d12:	2200      	movs	r2, #0
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff ffac 	bl	8009c74 <FATFS_LinkDriverEx>
 8009d1c:	4603      	mov	r3, r0
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
	...

08009d28 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6039      	str	r1, [r7, #0]
 8009d32:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009d34:	88fb      	ldrh	r3, [r7, #6]
 8009d36:	2b7f      	cmp	r3, #127	; 0x7f
 8009d38:	d802      	bhi.n	8009d40 <ff_convert+0x18>
		c = chr;
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	81fb      	strh	r3, [r7, #14]
 8009d3e:	e025      	b.n	8009d8c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d00b      	beq.n	8009d5e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009d46:	88fb      	ldrh	r3, [r7, #6]
 8009d48:	2bff      	cmp	r3, #255	; 0xff
 8009d4a:	d805      	bhi.n	8009d58 <ff_convert+0x30>
 8009d4c:	88fb      	ldrh	r3, [r7, #6]
 8009d4e:	3b80      	subs	r3, #128	; 0x80
 8009d50:	4a11      	ldr	r2, [pc, #68]	; (8009d98 <ff_convert+0x70>)
 8009d52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d56:	e000      	b.n	8009d5a <ff_convert+0x32>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	81fb      	strh	r3, [r7, #14]
 8009d5c:	e016      	b.n	8009d8c <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 8009d5e:	2300      	movs	r3, #0
 8009d60:	81fb      	strh	r3, [r7, #14]
 8009d62:	e009      	b.n	8009d78 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009d64:	89fb      	ldrh	r3, [r7, #14]
 8009d66:	4a0c      	ldr	r2, [pc, #48]	; (8009d98 <ff_convert+0x70>)
 8009d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d6c:	88fa      	ldrh	r2, [r7, #6]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d006      	beq.n	8009d80 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009d72:	89fb      	ldrh	r3, [r7, #14]
 8009d74:	3301      	adds	r3, #1
 8009d76:	81fb      	strh	r3, [r7, #14]
 8009d78:	89fb      	ldrh	r3, [r7, #14]
 8009d7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009d7c:	d9f2      	bls.n	8009d64 <ff_convert+0x3c>
 8009d7e:	e000      	b.n	8009d82 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009d80:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009d82:	89fb      	ldrh	r3, [r7, #14]
 8009d84:	3380      	adds	r3, #128	; 0x80
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bc80      	pop	{r7}
 8009d96:	4770      	bx	lr
 8009d98:	0800aa84 	.word	0x0800aa84

08009d9c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	4603      	mov	r3, r0
 8009da4:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
 8009daa:	e002      	b.n	8009db2 <ff_wtoupper+0x16>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	4a0f      	ldr	r2, [pc, #60]	; (8009df0 <ff_wtoupper+0x54>)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d006      	beq.n	8009dcc <ff_wtoupper+0x30>
 8009dbe:	4a0c      	ldr	r2, [pc, #48]	; (8009df0 <ff_wtoupper+0x54>)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dc6:	88fa      	ldrh	r2, [r7, #6]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d1ef      	bne.n	8009dac <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8009dcc:	4a08      	ldr	r2, [pc, #32]	; (8009df0 <ff_wtoupper+0x54>)
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d004      	beq.n	8009de2 <ff_wtoupper+0x46>
 8009dd8:	4a06      	ldr	r2, [pc, #24]	; (8009df4 <ff_wtoupper+0x58>)
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009de0:	e000      	b.n	8009de4 <ff_wtoupper+0x48>
 8009de2:	88fb      	ldrh	r3, [r7, #6]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bc80      	pop	{r7}
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	0800ab84 	.word	0x0800ab84
 8009df4:	0800ad64 	.word	0x0800ad64

08009df8 <__errno>:
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <__errno+0x8>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20000098 	.word	0x20000098

08009e04 <__libc_init_array>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	2600      	movs	r6, #0
 8009e08:	4d0c      	ldr	r5, [pc, #48]	; (8009e3c <__libc_init_array+0x38>)
 8009e0a:	4c0d      	ldr	r4, [pc, #52]	; (8009e40 <__libc_init_array+0x3c>)
 8009e0c:	1b64      	subs	r4, r4, r5
 8009e0e:	10a4      	asrs	r4, r4, #2
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	d109      	bne.n	8009e28 <__libc_init_array+0x24>
 8009e14:	f000 fc9c 	bl	800a750 <_init>
 8009e18:	2600      	movs	r6, #0
 8009e1a:	4d0a      	ldr	r5, [pc, #40]	; (8009e44 <__libc_init_array+0x40>)
 8009e1c:	4c0a      	ldr	r4, [pc, #40]	; (8009e48 <__libc_init_array+0x44>)
 8009e1e:	1b64      	subs	r4, r4, r5
 8009e20:	10a4      	asrs	r4, r4, #2
 8009e22:	42a6      	cmp	r6, r4
 8009e24:	d105      	bne.n	8009e32 <__libc_init_array+0x2e>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e2c:	4798      	blx	r3
 8009e2e:	3601      	adds	r6, #1
 8009e30:	e7ee      	b.n	8009e10 <__libc_init_array+0xc>
 8009e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e36:	4798      	blx	r3
 8009e38:	3601      	adds	r6, #1
 8009e3a:	e7f2      	b.n	8009e22 <__libc_init_array+0x1e>
 8009e3c:	0800af78 	.word	0x0800af78
 8009e40:	0800af78 	.word	0x0800af78
 8009e44:	0800af78 	.word	0x0800af78
 8009e48:	0800af7c 	.word	0x0800af7c

08009e4c <memset>:
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	4402      	add	r2, r0
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d100      	bne.n	8009e56 <memset+0xa>
 8009e54:	4770      	bx	lr
 8009e56:	f803 1b01 	strb.w	r1, [r3], #1
 8009e5a:	e7f9      	b.n	8009e50 <memset+0x4>

08009e5c <siprintf>:
 8009e5c:	b40e      	push	{r1, r2, r3}
 8009e5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e62:	b500      	push	{lr}
 8009e64:	b09c      	sub	sp, #112	; 0x70
 8009e66:	ab1d      	add	r3, sp, #116	; 0x74
 8009e68:	9002      	str	r0, [sp, #8]
 8009e6a:	9006      	str	r0, [sp, #24]
 8009e6c:	9107      	str	r1, [sp, #28]
 8009e6e:	9104      	str	r1, [sp, #16]
 8009e70:	4808      	ldr	r0, [pc, #32]	; (8009e94 <siprintf+0x38>)
 8009e72:	4909      	ldr	r1, [pc, #36]	; (8009e98 <siprintf+0x3c>)
 8009e74:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e78:	9105      	str	r1, [sp, #20]
 8009e7a:	6800      	ldr	r0, [r0, #0]
 8009e7c:	a902      	add	r1, sp, #8
 8009e7e:	9301      	str	r3, [sp, #4]
 8009e80:	f000 f868 	bl	8009f54 <_svfiprintf_r>
 8009e84:	2200      	movs	r2, #0
 8009e86:	9b02      	ldr	r3, [sp, #8]
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	b01c      	add	sp, #112	; 0x70
 8009e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e90:	b003      	add	sp, #12
 8009e92:	4770      	bx	lr
 8009e94:	20000098 	.word	0x20000098
 8009e98:	ffff0208 	.word	0xffff0208

08009e9c <__ssputs_r>:
 8009e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea0:	688e      	ldr	r6, [r1, #8]
 8009ea2:	4682      	mov	sl, r0
 8009ea4:	429e      	cmp	r6, r3
 8009ea6:	460c      	mov	r4, r1
 8009ea8:	4690      	mov	r8, r2
 8009eaa:	461f      	mov	r7, r3
 8009eac:	d838      	bhi.n	8009f20 <__ssputs_r+0x84>
 8009eae:	898a      	ldrh	r2, [r1, #12]
 8009eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009eb4:	d032      	beq.n	8009f1c <__ssputs_r+0x80>
 8009eb6:	6825      	ldr	r5, [r4, #0]
 8009eb8:	6909      	ldr	r1, [r1, #16]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	eba5 0901 	sub.w	r9, r5, r1
 8009ec0:	6965      	ldr	r5, [r4, #20]
 8009ec2:	444b      	add	r3, r9
 8009ec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ec8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ecc:	106d      	asrs	r5, r5, #1
 8009ece:	429d      	cmp	r5, r3
 8009ed0:	bf38      	it	cc
 8009ed2:	461d      	movcc	r5, r3
 8009ed4:	0553      	lsls	r3, r2, #21
 8009ed6:	d531      	bpl.n	8009f3c <__ssputs_r+0xa0>
 8009ed8:	4629      	mov	r1, r5
 8009eda:	f000 fb6f 	bl	800a5bc <_malloc_r>
 8009ede:	4606      	mov	r6, r0
 8009ee0:	b950      	cbnz	r0, 8009ef8 <__ssputs_r+0x5c>
 8009ee2:	230c      	movs	r3, #12
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	f8ca 3000 	str.w	r3, [sl]
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ef2:	81a3      	strh	r3, [r4, #12]
 8009ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef8:	464a      	mov	r2, r9
 8009efa:	6921      	ldr	r1, [r4, #16]
 8009efc:	f000 face 	bl	800a49c <memcpy>
 8009f00:	89a3      	ldrh	r3, [r4, #12]
 8009f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f0a:	81a3      	strh	r3, [r4, #12]
 8009f0c:	6126      	str	r6, [r4, #16]
 8009f0e:	444e      	add	r6, r9
 8009f10:	6026      	str	r6, [r4, #0]
 8009f12:	463e      	mov	r6, r7
 8009f14:	6165      	str	r5, [r4, #20]
 8009f16:	eba5 0509 	sub.w	r5, r5, r9
 8009f1a:	60a5      	str	r5, [r4, #8]
 8009f1c:	42be      	cmp	r6, r7
 8009f1e:	d900      	bls.n	8009f22 <__ssputs_r+0x86>
 8009f20:	463e      	mov	r6, r7
 8009f22:	4632      	mov	r2, r6
 8009f24:	4641      	mov	r1, r8
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	f000 fac6 	bl	800a4b8 <memmove>
 8009f2c:	68a3      	ldr	r3, [r4, #8]
 8009f2e:	2000      	movs	r0, #0
 8009f30:	1b9b      	subs	r3, r3, r6
 8009f32:	60a3      	str	r3, [r4, #8]
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	4433      	add	r3, r6
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	e7db      	b.n	8009ef4 <__ssputs_r+0x58>
 8009f3c:	462a      	mov	r2, r5
 8009f3e:	f000 fbb1 	bl	800a6a4 <_realloc_r>
 8009f42:	4606      	mov	r6, r0
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d1e1      	bne.n	8009f0c <__ssputs_r+0x70>
 8009f48:	4650      	mov	r0, sl
 8009f4a:	6921      	ldr	r1, [r4, #16]
 8009f4c:	f000 face 	bl	800a4ec <_free_r>
 8009f50:	e7c7      	b.n	8009ee2 <__ssputs_r+0x46>
	...

08009f54 <_svfiprintf_r>:
 8009f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f58:	4698      	mov	r8, r3
 8009f5a:	898b      	ldrh	r3, [r1, #12]
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	061b      	lsls	r3, r3, #24
 8009f60:	460d      	mov	r5, r1
 8009f62:	4614      	mov	r4, r2
 8009f64:	b09d      	sub	sp, #116	; 0x74
 8009f66:	d50e      	bpl.n	8009f86 <_svfiprintf_r+0x32>
 8009f68:	690b      	ldr	r3, [r1, #16]
 8009f6a:	b963      	cbnz	r3, 8009f86 <_svfiprintf_r+0x32>
 8009f6c:	2140      	movs	r1, #64	; 0x40
 8009f6e:	f000 fb25 	bl	800a5bc <_malloc_r>
 8009f72:	6028      	str	r0, [r5, #0]
 8009f74:	6128      	str	r0, [r5, #16]
 8009f76:	b920      	cbnz	r0, 8009f82 <_svfiprintf_r+0x2e>
 8009f78:	230c      	movs	r3, #12
 8009f7a:	603b      	str	r3, [r7, #0]
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f80:	e0d1      	b.n	800a126 <_svfiprintf_r+0x1d2>
 8009f82:	2340      	movs	r3, #64	; 0x40
 8009f84:	616b      	str	r3, [r5, #20]
 8009f86:	2300      	movs	r3, #0
 8009f88:	9309      	str	r3, [sp, #36]	; 0x24
 8009f8a:	2320      	movs	r3, #32
 8009f8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f90:	2330      	movs	r3, #48	; 0x30
 8009f92:	f04f 0901 	mov.w	r9, #1
 8009f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a140 <_svfiprintf_r+0x1ec>
 8009f9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fa2:	4623      	mov	r3, r4
 8009fa4:	469a      	mov	sl, r3
 8009fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009faa:	b10a      	cbz	r2, 8009fb0 <_svfiprintf_r+0x5c>
 8009fac:	2a25      	cmp	r2, #37	; 0x25
 8009fae:	d1f9      	bne.n	8009fa4 <_svfiprintf_r+0x50>
 8009fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8009fb4:	d00b      	beq.n	8009fce <_svfiprintf_r+0x7a>
 8009fb6:	465b      	mov	r3, fp
 8009fb8:	4622      	mov	r2, r4
 8009fba:	4629      	mov	r1, r5
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	f7ff ff6d 	bl	8009e9c <__ssputs_r>
 8009fc2:	3001      	adds	r0, #1
 8009fc4:	f000 80aa 	beq.w	800a11c <_svfiprintf_r+0x1c8>
 8009fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fca:	445a      	add	r2, fp
 8009fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8009fce:	f89a 3000 	ldrb.w	r3, [sl]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	f000 80a2 	beq.w	800a11c <_svfiprintf_r+0x1c8>
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f04f 32ff 	mov.w	r2, #4294967295
 8009fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fe2:	f10a 0a01 	add.w	sl, sl, #1
 8009fe6:	9304      	str	r3, [sp, #16]
 8009fe8:	9307      	str	r3, [sp, #28]
 8009fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fee:	931a      	str	r3, [sp, #104]	; 0x68
 8009ff0:	4654      	mov	r4, sl
 8009ff2:	2205      	movs	r2, #5
 8009ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ff8:	4851      	ldr	r0, [pc, #324]	; (800a140 <_svfiprintf_r+0x1ec>)
 8009ffa:	f000 fa41 	bl	800a480 <memchr>
 8009ffe:	9a04      	ldr	r2, [sp, #16]
 800a000:	b9d8      	cbnz	r0, 800a03a <_svfiprintf_r+0xe6>
 800a002:	06d0      	lsls	r0, r2, #27
 800a004:	bf44      	itt	mi
 800a006:	2320      	movmi	r3, #32
 800a008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a00c:	0711      	lsls	r1, r2, #28
 800a00e:	bf44      	itt	mi
 800a010:	232b      	movmi	r3, #43	; 0x2b
 800a012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a016:	f89a 3000 	ldrb.w	r3, [sl]
 800a01a:	2b2a      	cmp	r3, #42	; 0x2a
 800a01c:	d015      	beq.n	800a04a <_svfiprintf_r+0xf6>
 800a01e:	4654      	mov	r4, sl
 800a020:	2000      	movs	r0, #0
 800a022:	f04f 0c0a 	mov.w	ip, #10
 800a026:	9a07      	ldr	r2, [sp, #28]
 800a028:	4621      	mov	r1, r4
 800a02a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a02e:	3b30      	subs	r3, #48	; 0x30
 800a030:	2b09      	cmp	r3, #9
 800a032:	d94e      	bls.n	800a0d2 <_svfiprintf_r+0x17e>
 800a034:	b1b0      	cbz	r0, 800a064 <_svfiprintf_r+0x110>
 800a036:	9207      	str	r2, [sp, #28]
 800a038:	e014      	b.n	800a064 <_svfiprintf_r+0x110>
 800a03a:	eba0 0308 	sub.w	r3, r0, r8
 800a03e:	fa09 f303 	lsl.w	r3, r9, r3
 800a042:	4313      	orrs	r3, r2
 800a044:	46a2      	mov	sl, r4
 800a046:	9304      	str	r3, [sp, #16]
 800a048:	e7d2      	b.n	8009ff0 <_svfiprintf_r+0x9c>
 800a04a:	9b03      	ldr	r3, [sp, #12]
 800a04c:	1d19      	adds	r1, r3, #4
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	9103      	str	r1, [sp, #12]
 800a052:	2b00      	cmp	r3, #0
 800a054:	bfbb      	ittet	lt
 800a056:	425b      	neglt	r3, r3
 800a058:	f042 0202 	orrlt.w	r2, r2, #2
 800a05c:	9307      	strge	r3, [sp, #28]
 800a05e:	9307      	strlt	r3, [sp, #28]
 800a060:	bfb8      	it	lt
 800a062:	9204      	strlt	r2, [sp, #16]
 800a064:	7823      	ldrb	r3, [r4, #0]
 800a066:	2b2e      	cmp	r3, #46	; 0x2e
 800a068:	d10c      	bne.n	800a084 <_svfiprintf_r+0x130>
 800a06a:	7863      	ldrb	r3, [r4, #1]
 800a06c:	2b2a      	cmp	r3, #42	; 0x2a
 800a06e:	d135      	bne.n	800a0dc <_svfiprintf_r+0x188>
 800a070:	9b03      	ldr	r3, [sp, #12]
 800a072:	3402      	adds	r4, #2
 800a074:	1d1a      	adds	r2, r3, #4
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	9203      	str	r2, [sp, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	bfb8      	it	lt
 800a07e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a144 <_svfiprintf_r+0x1f0>
 800a088:	2203      	movs	r2, #3
 800a08a:	4650      	mov	r0, sl
 800a08c:	7821      	ldrb	r1, [r4, #0]
 800a08e:	f000 f9f7 	bl	800a480 <memchr>
 800a092:	b140      	cbz	r0, 800a0a6 <_svfiprintf_r+0x152>
 800a094:	2340      	movs	r3, #64	; 0x40
 800a096:	eba0 000a 	sub.w	r0, r0, sl
 800a09a:	fa03 f000 	lsl.w	r0, r3, r0
 800a09e:	9b04      	ldr	r3, [sp, #16]
 800a0a0:	3401      	adds	r4, #1
 800a0a2:	4303      	orrs	r3, r0
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0aa:	2206      	movs	r2, #6
 800a0ac:	4826      	ldr	r0, [pc, #152]	; (800a148 <_svfiprintf_r+0x1f4>)
 800a0ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0b2:	f000 f9e5 	bl	800a480 <memchr>
 800a0b6:	2800      	cmp	r0, #0
 800a0b8:	d038      	beq.n	800a12c <_svfiprintf_r+0x1d8>
 800a0ba:	4b24      	ldr	r3, [pc, #144]	; (800a14c <_svfiprintf_r+0x1f8>)
 800a0bc:	bb1b      	cbnz	r3, 800a106 <_svfiprintf_r+0x1b2>
 800a0be:	9b03      	ldr	r3, [sp, #12]
 800a0c0:	3307      	adds	r3, #7
 800a0c2:	f023 0307 	bic.w	r3, r3, #7
 800a0c6:	3308      	adds	r3, #8
 800a0c8:	9303      	str	r3, [sp, #12]
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	4433      	add	r3, r6
 800a0ce:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d0:	e767      	b.n	8009fa2 <_svfiprintf_r+0x4e>
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0da:	e7a5      	b.n	800a028 <_svfiprintf_r+0xd4>
 800a0dc:	2300      	movs	r3, #0
 800a0de:	f04f 0c0a 	mov.w	ip, #10
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	3401      	adds	r4, #1
 800a0e6:	9305      	str	r3, [sp, #20]
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ee:	3a30      	subs	r2, #48	; 0x30
 800a0f0:	2a09      	cmp	r2, #9
 800a0f2:	d903      	bls.n	800a0fc <_svfiprintf_r+0x1a8>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0c5      	beq.n	800a084 <_svfiprintf_r+0x130>
 800a0f8:	9105      	str	r1, [sp, #20]
 800a0fa:	e7c3      	b.n	800a084 <_svfiprintf_r+0x130>
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	2301      	movs	r3, #1
 800a100:	fb0c 2101 	mla	r1, ip, r1, r2
 800a104:	e7f0      	b.n	800a0e8 <_svfiprintf_r+0x194>
 800a106:	ab03      	add	r3, sp, #12
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	462a      	mov	r2, r5
 800a10c:	4638      	mov	r0, r7
 800a10e:	4b10      	ldr	r3, [pc, #64]	; (800a150 <_svfiprintf_r+0x1fc>)
 800a110:	a904      	add	r1, sp, #16
 800a112:	f3af 8000 	nop.w
 800a116:	1c42      	adds	r2, r0, #1
 800a118:	4606      	mov	r6, r0
 800a11a:	d1d6      	bne.n	800a0ca <_svfiprintf_r+0x176>
 800a11c:	89ab      	ldrh	r3, [r5, #12]
 800a11e:	065b      	lsls	r3, r3, #25
 800a120:	f53f af2c 	bmi.w	8009f7c <_svfiprintf_r+0x28>
 800a124:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a126:	b01d      	add	sp, #116	; 0x74
 800a128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12c:	ab03      	add	r3, sp, #12
 800a12e:	9300      	str	r3, [sp, #0]
 800a130:	462a      	mov	r2, r5
 800a132:	4638      	mov	r0, r7
 800a134:	4b06      	ldr	r3, [pc, #24]	; (800a150 <_svfiprintf_r+0x1fc>)
 800a136:	a904      	add	r1, sp, #16
 800a138:	f000 f87c 	bl	800a234 <_printf_i>
 800a13c:	e7eb      	b.n	800a116 <_svfiprintf_r+0x1c2>
 800a13e:	bf00      	nop
 800a140:	0800af44 	.word	0x0800af44
 800a144:	0800af4a 	.word	0x0800af4a
 800a148:	0800af4e 	.word	0x0800af4e
 800a14c:	00000000 	.word	0x00000000
 800a150:	08009e9d 	.word	0x08009e9d

0800a154 <_printf_common>:
 800a154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a158:	4616      	mov	r6, r2
 800a15a:	4699      	mov	r9, r3
 800a15c:	688a      	ldr	r2, [r1, #8]
 800a15e:	690b      	ldr	r3, [r1, #16]
 800a160:	4607      	mov	r7, r0
 800a162:	4293      	cmp	r3, r2
 800a164:	bfb8      	it	lt
 800a166:	4613      	movlt	r3, r2
 800a168:	6033      	str	r3, [r6, #0]
 800a16a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a16e:	460c      	mov	r4, r1
 800a170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a174:	b10a      	cbz	r2, 800a17a <_printf_common+0x26>
 800a176:	3301      	adds	r3, #1
 800a178:	6033      	str	r3, [r6, #0]
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	0699      	lsls	r1, r3, #26
 800a17e:	bf42      	ittt	mi
 800a180:	6833      	ldrmi	r3, [r6, #0]
 800a182:	3302      	addmi	r3, #2
 800a184:	6033      	strmi	r3, [r6, #0]
 800a186:	6825      	ldr	r5, [r4, #0]
 800a188:	f015 0506 	ands.w	r5, r5, #6
 800a18c:	d106      	bne.n	800a19c <_printf_common+0x48>
 800a18e:	f104 0a19 	add.w	sl, r4, #25
 800a192:	68e3      	ldr	r3, [r4, #12]
 800a194:	6832      	ldr	r2, [r6, #0]
 800a196:	1a9b      	subs	r3, r3, r2
 800a198:	42ab      	cmp	r3, r5
 800a19a:	dc28      	bgt.n	800a1ee <_printf_common+0x9a>
 800a19c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1a0:	1e13      	subs	r3, r2, #0
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	bf18      	it	ne
 800a1a6:	2301      	movne	r3, #1
 800a1a8:	0692      	lsls	r2, r2, #26
 800a1aa:	d42d      	bmi.n	800a208 <_printf_common+0xb4>
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	4638      	mov	r0, r7
 800a1b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1b4:	47c0      	blx	r8
 800a1b6:	3001      	adds	r0, #1
 800a1b8:	d020      	beq.n	800a1fc <_printf_common+0xa8>
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	68e5      	ldr	r5, [r4, #12]
 800a1be:	f003 0306 	and.w	r3, r3, #6
 800a1c2:	2b04      	cmp	r3, #4
 800a1c4:	bf18      	it	ne
 800a1c6:	2500      	movne	r5, #0
 800a1c8:	6832      	ldr	r2, [r6, #0]
 800a1ca:	f04f 0600 	mov.w	r6, #0
 800a1ce:	68a3      	ldr	r3, [r4, #8]
 800a1d0:	bf08      	it	eq
 800a1d2:	1aad      	subeq	r5, r5, r2
 800a1d4:	6922      	ldr	r2, [r4, #16]
 800a1d6:	bf08      	it	eq
 800a1d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	bfc4      	itt	gt
 800a1e0:	1a9b      	subgt	r3, r3, r2
 800a1e2:	18ed      	addgt	r5, r5, r3
 800a1e4:	341a      	adds	r4, #26
 800a1e6:	42b5      	cmp	r5, r6
 800a1e8:	d11a      	bne.n	800a220 <_printf_common+0xcc>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	e008      	b.n	800a200 <_printf_common+0xac>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4652      	mov	r2, sl
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	4638      	mov	r0, r7
 800a1f6:	47c0      	blx	r8
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d103      	bne.n	800a204 <_printf_common+0xb0>
 800a1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a204:	3501      	adds	r5, #1
 800a206:	e7c4      	b.n	800a192 <_printf_common+0x3e>
 800a208:	2030      	movs	r0, #48	; 0x30
 800a20a:	18e1      	adds	r1, r4, r3
 800a20c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a216:	4422      	add	r2, r4
 800a218:	3302      	adds	r3, #2
 800a21a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a21e:	e7c5      	b.n	800a1ac <_printf_common+0x58>
 800a220:	2301      	movs	r3, #1
 800a222:	4622      	mov	r2, r4
 800a224:	4649      	mov	r1, r9
 800a226:	4638      	mov	r0, r7
 800a228:	47c0      	blx	r8
 800a22a:	3001      	adds	r0, #1
 800a22c:	d0e6      	beq.n	800a1fc <_printf_common+0xa8>
 800a22e:	3601      	adds	r6, #1
 800a230:	e7d9      	b.n	800a1e6 <_printf_common+0x92>
	...

0800a234 <_printf_i>:
 800a234:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a238:	7e0f      	ldrb	r7, [r1, #24]
 800a23a:	4691      	mov	r9, r2
 800a23c:	2f78      	cmp	r7, #120	; 0x78
 800a23e:	4680      	mov	r8, r0
 800a240:	460c      	mov	r4, r1
 800a242:	469a      	mov	sl, r3
 800a244:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a246:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a24a:	d807      	bhi.n	800a25c <_printf_i+0x28>
 800a24c:	2f62      	cmp	r7, #98	; 0x62
 800a24e:	d80a      	bhi.n	800a266 <_printf_i+0x32>
 800a250:	2f00      	cmp	r7, #0
 800a252:	f000 80d9 	beq.w	800a408 <_printf_i+0x1d4>
 800a256:	2f58      	cmp	r7, #88	; 0x58
 800a258:	f000 80a4 	beq.w	800a3a4 <_printf_i+0x170>
 800a25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a260:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a264:	e03a      	b.n	800a2dc <_printf_i+0xa8>
 800a266:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a26a:	2b15      	cmp	r3, #21
 800a26c:	d8f6      	bhi.n	800a25c <_printf_i+0x28>
 800a26e:	a101      	add	r1, pc, #4	; (adr r1, 800a274 <_printf_i+0x40>)
 800a270:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a274:	0800a2cd 	.word	0x0800a2cd
 800a278:	0800a2e1 	.word	0x0800a2e1
 800a27c:	0800a25d 	.word	0x0800a25d
 800a280:	0800a25d 	.word	0x0800a25d
 800a284:	0800a25d 	.word	0x0800a25d
 800a288:	0800a25d 	.word	0x0800a25d
 800a28c:	0800a2e1 	.word	0x0800a2e1
 800a290:	0800a25d 	.word	0x0800a25d
 800a294:	0800a25d 	.word	0x0800a25d
 800a298:	0800a25d 	.word	0x0800a25d
 800a29c:	0800a25d 	.word	0x0800a25d
 800a2a0:	0800a3ef 	.word	0x0800a3ef
 800a2a4:	0800a311 	.word	0x0800a311
 800a2a8:	0800a3d1 	.word	0x0800a3d1
 800a2ac:	0800a25d 	.word	0x0800a25d
 800a2b0:	0800a25d 	.word	0x0800a25d
 800a2b4:	0800a411 	.word	0x0800a411
 800a2b8:	0800a25d 	.word	0x0800a25d
 800a2bc:	0800a311 	.word	0x0800a311
 800a2c0:	0800a25d 	.word	0x0800a25d
 800a2c4:	0800a25d 	.word	0x0800a25d
 800a2c8:	0800a3d9 	.word	0x0800a3d9
 800a2cc:	682b      	ldr	r3, [r5, #0]
 800a2ce:	1d1a      	adds	r2, r3, #4
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	602a      	str	r2, [r5, #0]
 800a2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e0a4      	b.n	800a42a <_printf_i+0x1f6>
 800a2e0:	6820      	ldr	r0, [r4, #0]
 800a2e2:	6829      	ldr	r1, [r5, #0]
 800a2e4:	0606      	lsls	r6, r0, #24
 800a2e6:	f101 0304 	add.w	r3, r1, #4
 800a2ea:	d50a      	bpl.n	800a302 <_printf_i+0xce>
 800a2ec:	680e      	ldr	r6, [r1, #0]
 800a2ee:	602b      	str	r3, [r5, #0]
 800a2f0:	2e00      	cmp	r6, #0
 800a2f2:	da03      	bge.n	800a2fc <_printf_i+0xc8>
 800a2f4:	232d      	movs	r3, #45	; 0x2d
 800a2f6:	4276      	negs	r6, r6
 800a2f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2fc:	230a      	movs	r3, #10
 800a2fe:	485e      	ldr	r0, [pc, #376]	; (800a478 <_printf_i+0x244>)
 800a300:	e019      	b.n	800a336 <_printf_i+0x102>
 800a302:	680e      	ldr	r6, [r1, #0]
 800a304:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	bf18      	it	ne
 800a30c:	b236      	sxthne	r6, r6
 800a30e:	e7ef      	b.n	800a2f0 <_printf_i+0xbc>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	6820      	ldr	r0, [r4, #0]
 800a314:	1d19      	adds	r1, r3, #4
 800a316:	6029      	str	r1, [r5, #0]
 800a318:	0601      	lsls	r1, r0, #24
 800a31a:	d501      	bpl.n	800a320 <_printf_i+0xec>
 800a31c:	681e      	ldr	r6, [r3, #0]
 800a31e:	e002      	b.n	800a326 <_printf_i+0xf2>
 800a320:	0646      	lsls	r6, r0, #25
 800a322:	d5fb      	bpl.n	800a31c <_printf_i+0xe8>
 800a324:	881e      	ldrh	r6, [r3, #0]
 800a326:	2f6f      	cmp	r7, #111	; 0x6f
 800a328:	bf0c      	ite	eq
 800a32a:	2308      	moveq	r3, #8
 800a32c:	230a      	movne	r3, #10
 800a32e:	4852      	ldr	r0, [pc, #328]	; (800a478 <_printf_i+0x244>)
 800a330:	2100      	movs	r1, #0
 800a332:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a336:	6865      	ldr	r5, [r4, #4]
 800a338:	2d00      	cmp	r5, #0
 800a33a:	bfa8      	it	ge
 800a33c:	6821      	ldrge	r1, [r4, #0]
 800a33e:	60a5      	str	r5, [r4, #8]
 800a340:	bfa4      	itt	ge
 800a342:	f021 0104 	bicge.w	r1, r1, #4
 800a346:	6021      	strge	r1, [r4, #0]
 800a348:	b90e      	cbnz	r6, 800a34e <_printf_i+0x11a>
 800a34a:	2d00      	cmp	r5, #0
 800a34c:	d04d      	beq.n	800a3ea <_printf_i+0x1b6>
 800a34e:	4615      	mov	r5, r2
 800a350:	fbb6 f1f3 	udiv	r1, r6, r3
 800a354:	fb03 6711 	mls	r7, r3, r1, r6
 800a358:	5dc7      	ldrb	r7, [r0, r7]
 800a35a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a35e:	4637      	mov	r7, r6
 800a360:	42bb      	cmp	r3, r7
 800a362:	460e      	mov	r6, r1
 800a364:	d9f4      	bls.n	800a350 <_printf_i+0x11c>
 800a366:	2b08      	cmp	r3, #8
 800a368:	d10b      	bne.n	800a382 <_printf_i+0x14e>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	07de      	lsls	r6, r3, #31
 800a36e:	d508      	bpl.n	800a382 <_printf_i+0x14e>
 800a370:	6923      	ldr	r3, [r4, #16]
 800a372:	6861      	ldr	r1, [r4, #4]
 800a374:	4299      	cmp	r1, r3
 800a376:	bfde      	ittt	le
 800a378:	2330      	movle	r3, #48	; 0x30
 800a37a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a37e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a382:	1b52      	subs	r2, r2, r5
 800a384:	6122      	str	r2, [r4, #16]
 800a386:	464b      	mov	r3, r9
 800a388:	4621      	mov	r1, r4
 800a38a:	4640      	mov	r0, r8
 800a38c:	f8cd a000 	str.w	sl, [sp]
 800a390:	aa03      	add	r2, sp, #12
 800a392:	f7ff fedf 	bl	800a154 <_printf_common>
 800a396:	3001      	adds	r0, #1
 800a398:	d14c      	bne.n	800a434 <_printf_i+0x200>
 800a39a:	f04f 30ff 	mov.w	r0, #4294967295
 800a39e:	b004      	add	sp, #16
 800a3a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3a4:	4834      	ldr	r0, [pc, #208]	; (800a478 <_printf_i+0x244>)
 800a3a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3aa:	6829      	ldr	r1, [r5, #0]
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3b2:	6029      	str	r1, [r5, #0]
 800a3b4:	061d      	lsls	r5, r3, #24
 800a3b6:	d514      	bpl.n	800a3e2 <_printf_i+0x1ae>
 800a3b8:	07df      	lsls	r7, r3, #31
 800a3ba:	bf44      	itt	mi
 800a3bc:	f043 0320 	orrmi.w	r3, r3, #32
 800a3c0:	6023      	strmi	r3, [r4, #0]
 800a3c2:	b91e      	cbnz	r6, 800a3cc <_printf_i+0x198>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	f023 0320 	bic.w	r3, r3, #32
 800a3ca:	6023      	str	r3, [r4, #0]
 800a3cc:	2310      	movs	r3, #16
 800a3ce:	e7af      	b.n	800a330 <_printf_i+0xfc>
 800a3d0:	6823      	ldr	r3, [r4, #0]
 800a3d2:	f043 0320 	orr.w	r3, r3, #32
 800a3d6:	6023      	str	r3, [r4, #0]
 800a3d8:	2378      	movs	r3, #120	; 0x78
 800a3da:	4828      	ldr	r0, [pc, #160]	; (800a47c <_printf_i+0x248>)
 800a3dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3e0:	e7e3      	b.n	800a3aa <_printf_i+0x176>
 800a3e2:	0659      	lsls	r1, r3, #25
 800a3e4:	bf48      	it	mi
 800a3e6:	b2b6      	uxthmi	r6, r6
 800a3e8:	e7e6      	b.n	800a3b8 <_printf_i+0x184>
 800a3ea:	4615      	mov	r5, r2
 800a3ec:	e7bb      	b.n	800a366 <_printf_i+0x132>
 800a3ee:	682b      	ldr	r3, [r5, #0]
 800a3f0:	6826      	ldr	r6, [r4, #0]
 800a3f2:	1d18      	adds	r0, r3, #4
 800a3f4:	6961      	ldr	r1, [r4, #20]
 800a3f6:	6028      	str	r0, [r5, #0]
 800a3f8:	0635      	lsls	r5, r6, #24
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	d501      	bpl.n	800a402 <_printf_i+0x1ce>
 800a3fe:	6019      	str	r1, [r3, #0]
 800a400:	e002      	b.n	800a408 <_printf_i+0x1d4>
 800a402:	0670      	lsls	r0, r6, #25
 800a404:	d5fb      	bpl.n	800a3fe <_printf_i+0x1ca>
 800a406:	8019      	strh	r1, [r3, #0]
 800a408:	2300      	movs	r3, #0
 800a40a:	4615      	mov	r5, r2
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	e7ba      	b.n	800a386 <_printf_i+0x152>
 800a410:	682b      	ldr	r3, [r5, #0]
 800a412:	2100      	movs	r1, #0
 800a414:	1d1a      	adds	r2, r3, #4
 800a416:	602a      	str	r2, [r5, #0]
 800a418:	681d      	ldr	r5, [r3, #0]
 800a41a:	6862      	ldr	r2, [r4, #4]
 800a41c:	4628      	mov	r0, r5
 800a41e:	f000 f82f 	bl	800a480 <memchr>
 800a422:	b108      	cbz	r0, 800a428 <_printf_i+0x1f4>
 800a424:	1b40      	subs	r0, r0, r5
 800a426:	6060      	str	r0, [r4, #4]
 800a428:	6863      	ldr	r3, [r4, #4]
 800a42a:	6123      	str	r3, [r4, #16]
 800a42c:	2300      	movs	r3, #0
 800a42e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a432:	e7a8      	b.n	800a386 <_printf_i+0x152>
 800a434:	462a      	mov	r2, r5
 800a436:	4649      	mov	r1, r9
 800a438:	4640      	mov	r0, r8
 800a43a:	6923      	ldr	r3, [r4, #16]
 800a43c:	47d0      	blx	sl
 800a43e:	3001      	adds	r0, #1
 800a440:	d0ab      	beq.n	800a39a <_printf_i+0x166>
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	079b      	lsls	r3, r3, #30
 800a446:	d413      	bmi.n	800a470 <_printf_i+0x23c>
 800a448:	68e0      	ldr	r0, [r4, #12]
 800a44a:	9b03      	ldr	r3, [sp, #12]
 800a44c:	4298      	cmp	r0, r3
 800a44e:	bfb8      	it	lt
 800a450:	4618      	movlt	r0, r3
 800a452:	e7a4      	b.n	800a39e <_printf_i+0x16a>
 800a454:	2301      	movs	r3, #1
 800a456:	4632      	mov	r2, r6
 800a458:	4649      	mov	r1, r9
 800a45a:	4640      	mov	r0, r8
 800a45c:	47d0      	blx	sl
 800a45e:	3001      	adds	r0, #1
 800a460:	d09b      	beq.n	800a39a <_printf_i+0x166>
 800a462:	3501      	adds	r5, #1
 800a464:	68e3      	ldr	r3, [r4, #12]
 800a466:	9903      	ldr	r1, [sp, #12]
 800a468:	1a5b      	subs	r3, r3, r1
 800a46a:	42ab      	cmp	r3, r5
 800a46c:	dcf2      	bgt.n	800a454 <_printf_i+0x220>
 800a46e:	e7eb      	b.n	800a448 <_printf_i+0x214>
 800a470:	2500      	movs	r5, #0
 800a472:	f104 0619 	add.w	r6, r4, #25
 800a476:	e7f5      	b.n	800a464 <_printf_i+0x230>
 800a478:	0800af55 	.word	0x0800af55
 800a47c:	0800af66 	.word	0x0800af66

0800a480 <memchr>:
 800a480:	4603      	mov	r3, r0
 800a482:	b510      	push	{r4, lr}
 800a484:	b2c9      	uxtb	r1, r1
 800a486:	4402      	add	r2, r0
 800a488:	4293      	cmp	r3, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	d101      	bne.n	800a492 <memchr+0x12>
 800a48e:	2000      	movs	r0, #0
 800a490:	e003      	b.n	800a49a <memchr+0x1a>
 800a492:	7804      	ldrb	r4, [r0, #0]
 800a494:	3301      	adds	r3, #1
 800a496:	428c      	cmp	r4, r1
 800a498:	d1f6      	bne.n	800a488 <memchr+0x8>
 800a49a:	bd10      	pop	{r4, pc}

0800a49c <memcpy>:
 800a49c:	440a      	add	r2, r1
 800a49e:	4291      	cmp	r1, r2
 800a4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4a4:	d100      	bne.n	800a4a8 <memcpy+0xc>
 800a4a6:	4770      	bx	lr
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ae:	4291      	cmp	r1, r2
 800a4b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4b4:	d1f9      	bne.n	800a4aa <memcpy+0xe>
 800a4b6:	bd10      	pop	{r4, pc}

0800a4b8 <memmove>:
 800a4b8:	4288      	cmp	r0, r1
 800a4ba:	b510      	push	{r4, lr}
 800a4bc:	eb01 0402 	add.w	r4, r1, r2
 800a4c0:	d902      	bls.n	800a4c8 <memmove+0x10>
 800a4c2:	4284      	cmp	r4, r0
 800a4c4:	4623      	mov	r3, r4
 800a4c6:	d807      	bhi.n	800a4d8 <memmove+0x20>
 800a4c8:	1e43      	subs	r3, r0, #1
 800a4ca:	42a1      	cmp	r1, r4
 800a4cc:	d008      	beq.n	800a4e0 <memmove+0x28>
 800a4ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4d6:	e7f8      	b.n	800a4ca <memmove+0x12>
 800a4d8:	4601      	mov	r1, r0
 800a4da:	4402      	add	r2, r0
 800a4dc:	428a      	cmp	r2, r1
 800a4de:	d100      	bne.n	800a4e2 <memmove+0x2a>
 800a4e0:	bd10      	pop	{r4, pc}
 800a4e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a4ea:	e7f7      	b.n	800a4dc <memmove+0x24>

0800a4ec <_free_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4605      	mov	r5, r0
 800a4f0:	2900      	cmp	r1, #0
 800a4f2:	d040      	beq.n	800a576 <_free_r+0x8a>
 800a4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4f8:	1f0c      	subs	r4, r1, #4
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	bfb8      	it	lt
 800a4fe:	18e4      	addlt	r4, r4, r3
 800a500:	f000 f910 	bl	800a724 <__malloc_lock>
 800a504:	4a1c      	ldr	r2, [pc, #112]	; (800a578 <_free_r+0x8c>)
 800a506:	6813      	ldr	r3, [r2, #0]
 800a508:	b933      	cbnz	r3, 800a518 <_free_r+0x2c>
 800a50a:	6063      	str	r3, [r4, #4]
 800a50c:	6014      	str	r4, [r2, #0]
 800a50e:	4628      	mov	r0, r5
 800a510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a514:	f000 b90c 	b.w	800a730 <__malloc_unlock>
 800a518:	42a3      	cmp	r3, r4
 800a51a:	d908      	bls.n	800a52e <_free_r+0x42>
 800a51c:	6820      	ldr	r0, [r4, #0]
 800a51e:	1821      	adds	r1, r4, r0
 800a520:	428b      	cmp	r3, r1
 800a522:	bf01      	itttt	eq
 800a524:	6819      	ldreq	r1, [r3, #0]
 800a526:	685b      	ldreq	r3, [r3, #4]
 800a528:	1809      	addeq	r1, r1, r0
 800a52a:	6021      	streq	r1, [r4, #0]
 800a52c:	e7ed      	b.n	800a50a <_free_r+0x1e>
 800a52e:	461a      	mov	r2, r3
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	b10b      	cbz	r3, 800a538 <_free_r+0x4c>
 800a534:	42a3      	cmp	r3, r4
 800a536:	d9fa      	bls.n	800a52e <_free_r+0x42>
 800a538:	6811      	ldr	r1, [r2, #0]
 800a53a:	1850      	adds	r0, r2, r1
 800a53c:	42a0      	cmp	r0, r4
 800a53e:	d10b      	bne.n	800a558 <_free_r+0x6c>
 800a540:	6820      	ldr	r0, [r4, #0]
 800a542:	4401      	add	r1, r0
 800a544:	1850      	adds	r0, r2, r1
 800a546:	4283      	cmp	r3, r0
 800a548:	6011      	str	r1, [r2, #0]
 800a54a:	d1e0      	bne.n	800a50e <_free_r+0x22>
 800a54c:	6818      	ldr	r0, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	4401      	add	r1, r0
 800a552:	6011      	str	r1, [r2, #0]
 800a554:	6053      	str	r3, [r2, #4]
 800a556:	e7da      	b.n	800a50e <_free_r+0x22>
 800a558:	d902      	bls.n	800a560 <_free_r+0x74>
 800a55a:	230c      	movs	r3, #12
 800a55c:	602b      	str	r3, [r5, #0]
 800a55e:	e7d6      	b.n	800a50e <_free_r+0x22>
 800a560:	6820      	ldr	r0, [r4, #0]
 800a562:	1821      	adds	r1, r4, r0
 800a564:	428b      	cmp	r3, r1
 800a566:	bf01      	itttt	eq
 800a568:	6819      	ldreq	r1, [r3, #0]
 800a56a:	685b      	ldreq	r3, [r3, #4]
 800a56c:	1809      	addeq	r1, r1, r0
 800a56e:	6021      	streq	r1, [r4, #0]
 800a570:	6063      	str	r3, [r4, #4]
 800a572:	6054      	str	r4, [r2, #4]
 800a574:	e7cb      	b.n	800a50e <_free_r+0x22>
 800a576:	bd38      	pop	{r3, r4, r5, pc}
 800a578:	200028b4 	.word	0x200028b4

0800a57c <sbrk_aligned>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	4e0e      	ldr	r6, [pc, #56]	; (800a5b8 <sbrk_aligned+0x3c>)
 800a580:	460c      	mov	r4, r1
 800a582:	6831      	ldr	r1, [r6, #0]
 800a584:	4605      	mov	r5, r0
 800a586:	b911      	cbnz	r1, 800a58e <sbrk_aligned+0x12>
 800a588:	f000 f8bc 	bl	800a704 <_sbrk_r>
 800a58c:	6030      	str	r0, [r6, #0]
 800a58e:	4621      	mov	r1, r4
 800a590:	4628      	mov	r0, r5
 800a592:	f000 f8b7 	bl	800a704 <_sbrk_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d00a      	beq.n	800a5b0 <sbrk_aligned+0x34>
 800a59a:	1cc4      	adds	r4, r0, #3
 800a59c:	f024 0403 	bic.w	r4, r4, #3
 800a5a0:	42a0      	cmp	r0, r4
 800a5a2:	d007      	beq.n	800a5b4 <sbrk_aligned+0x38>
 800a5a4:	1a21      	subs	r1, r4, r0
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f000 f8ac 	bl	800a704 <_sbrk_r>
 800a5ac:	3001      	adds	r0, #1
 800a5ae:	d101      	bne.n	800a5b4 <sbrk_aligned+0x38>
 800a5b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a5b4:	4620      	mov	r0, r4
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	200028b8 	.word	0x200028b8

0800a5bc <_malloc_r>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	1ccd      	adds	r5, r1, #3
 800a5c2:	f025 0503 	bic.w	r5, r5, #3
 800a5c6:	3508      	adds	r5, #8
 800a5c8:	2d0c      	cmp	r5, #12
 800a5ca:	bf38      	it	cc
 800a5cc:	250c      	movcc	r5, #12
 800a5ce:	2d00      	cmp	r5, #0
 800a5d0:	4607      	mov	r7, r0
 800a5d2:	db01      	blt.n	800a5d8 <_malloc_r+0x1c>
 800a5d4:	42a9      	cmp	r1, r5
 800a5d6:	d905      	bls.n	800a5e4 <_malloc_r+0x28>
 800a5d8:	230c      	movs	r3, #12
 800a5da:	2600      	movs	r6, #0
 800a5dc:	603b      	str	r3, [r7, #0]
 800a5de:	4630      	mov	r0, r6
 800a5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e4:	4e2e      	ldr	r6, [pc, #184]	; (800a6a0 <_malloc_r+0xe4>)
 800a5e6:	f000 f89d 	bl	800a724 <__malloc_lock>
 800a5ea:	6833      	ldr	r3, [r6, #0]
 800a5ec:	461c      	mov	r4, r3
 800a5ee:	bb34      	cbnz	r4, 800a63e <_malloc_r+0x82>
 800a5f0:	4629      	mov	r1, r5
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	f7ff ffc2 	bl	800a57c <sbrk_aligned>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	4604      	mov	r4, r0
 800a5fc:	d14d      	bne.n	800a69a <_malloc_r+0xde>
 800a5fe:	6834      	ldr	r4, [r6, #0]
 800a600:	4626      	mov	r6, r4
 800a602:	2e00      	cmp	r6, #0
 800a604:	d140      	bne.n	800a688 <_malloc_r+0xcc>
 800a606:	6823      	ldr	r3, [r4, #0]
 800a608:	4631      	mov	r1, r6
 800a60a:	4638      	mov	r0, r7
 800a60c:	eb04 0803 	add.w	r8, r4, r3
 800a610:	f000 f878 	bl	800a704 <_sbrk_r>
 800a614:	4580      	cmp	r8, r0
 800a616:	d13a      	bne.n	800a68e <_malloc_r+0xd2>
 800a618:	6821      	ldr	r1, [r4, #0]
 800a61a:	3503      	adds	r5, #3
 800a61c:	1a6d      	subs	r5, r5, r1
 800a61e:	f025 0503 	bic.w	r5, r5, #3
 800a622:	3508      	adds	r5, #8
 800a624:	2d0c      	cmp	r5, #12
 800a626:	bf38      	it	cc
 800a628:	250c      	movcc	r5, #12
 800a62a:	4638      	mov	r0, r7
 800a62c:	4629      	mov	r1, r5
 800a62e:	f7ff ffa5 	bl	800a57c <sbrk_aligned>
 800a632:	3001      	adds	r0, #1
 800a634:	d02b      	beq.n	800a68e <_malloc_r+0xd2>
 800a636:	6823      	ldr	r3, [r4, #0]
 800a638:	442b      	add	r3, r5
 800a63a:	6023      	str	r3, [r4, #0]
 800a63c:	e00e      	b.n	800a65c <_malloc_r+0xa0>
 800a63e:	6822      	ldr	r2, [r4, #0]
 800a640:	1b52      	subs	r2, r2, r5
 800a642:	d41e      	bmi.n	800a682 <_malloc_r+0xc6>
 800a644:	2a0b      	cmp	r2, #11
 800a646:	d916      	bls.n	800a676 <_malloc_r+0xba>
 800a648:	1961      	adds	r1, r4, r5
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	6025      	str	r5, [r4, #0]
 800a64e:	bf18      	it	ne
 800a650:	6059      	strne	r1, [r3, #4]
 800a652:	6863      	ldr	r3, [r4, #4]
 800a654:	bf08      	it	eq
 800a656:	6031      	streq	r1, [r6, #0]
 800a658:	5162      	str	r2, [r4, r5]
 800a65a:	604b      	str	r3, [r1, #4]
 800a65c:	4638      	mov	r0, r7
 800a65e:	f104 060b 	add.w	r6, r4, #11
 800a662:	f000 f865 	bl	800a730 <__malloc_unlock>
 800a666:	f026 0607 	bic.w	r6, r6, #7
 800a66a:	1d23      	adds	r3, r4, #4
 800a66c:	1af2      	subs	r2, r6, r3
 800a66e:	d0b6      	beq.n	800a5de <_malloc_r+0x22>
 800a670:	1b9b      	subs	r3, r3, r6
 800a672:	50a3      	str	r3, [r4, r2]
 800a674:	e7b3      	b.n	800a5de <_malloc_r+0x22>
 800a676:	6862      	ldr	r2, [r4, #4]
 800a678:	42a3      	cmp	r3, r4
 800a67a:	bf0c      	ite	eq
 800a67c:	6032      	streq	r2, [r6, #0]
 800a67e:	605a      	strne	r2, [r3, #4]
 800a680:	e7ec      	b.n	800a65c <_malloc_r+0xa0>
 800a682:	4623      	mov	r3, r4
 800a684:	6864      	ldr	r4, [r4, #4]
 800a686:	e7b2      	b.n	800a5ee <_malloc_r+0x32>
 800a688:	4634      	mov	r4, r6
 800a68a:	6876      	ldr	r6, [r6, #4]
 800a68c:	e7b9      	b.n	800a602 <_malloc_r+0x46>
 800a68e:	230c      	movs	r3, #12
 800a690:	4638      	mov	r0, r7
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	f000 f84c 	bl	800a730 <__malloc_unlock>
 800a698:	e7a1      	b.n	800a5de <_malloc_r+0x22>
 800a69a:	6025      	str	r5, [r4, #0]
 800a69c:	e7de      	b.n	800a65c <_malloc_r+0xa0>
 800a69e:	bf00      	nop
 800a6a0:	200028b4 	.word	0x200028b4

0800a6a4 <_realloc_r>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	4614      	mov	r4, r2
 800a6ac:	460e      	mov	r6, r1
 800a6ae:	b921      	cbnz	r1, 800a6ba <_realloc_r+0x16>
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b6:	f7ff bf81 	b.w	800a5bc <_malloc_r>
 800a6ba:	b92a      	cbnz	r2, 800a6c8 <_realloc_r+0x24>
 800a6bc:	f7ff ff16 	bl	800a4ec <_free_r>
 800a6c0:	4625      	mov	r5, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c8:	f000 f838 	bl	800a73c <_malloc_usable_size_r>
 800a6cc:	4284      	cmp	r4, r0
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	d802      	bhi.n	800a6d8 <_realloc_r+0x34>
 800a6d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6d6:	d812      	bhi.n	800a6fe <_realloc_r+0x5a>
 800a6d8:	4621      	mov	r1, r4
 800a6da:	4640      	mov	r0, r8
 800a6dc:	f7ff ff6e 	bl	800a5bc <_malloc_r>
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d0ed      	beq.n	800a6c2 <_realloc_r+0x1e>
 800a6e6:	42bc      	cmp	r4, r7
 800a6e8:	4622      	mov	r2, r4
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	bf28      	it	cs
 800a6ee:	463a      	movcs	r2, r7
 800a6f0:	f7ff fed4 	bl	800a49c <memcpy>
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	f7ff fef8 	bl	800a4ec <_free_r>
 800a6fc:	e7e1      	b.n	800a6c2 <_realloc_r+0x1e>
 800a6fe:	4635      	mov	r5, r6
 800a700:	e7df      	b.n	800a6c2 <_realloc_r+0x1e>
	...

0800a704 <_sbrk_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	2300      	movs	r3, #0
 800a708:	4d05      	ldr	r5, [pc, #20]	; (800a720 <_sbrk_r+0x1c>)
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	602b      	str	r3, [r5, #0]
 800a710:	f7f7 f81c 	bl	800174c <_sbrk>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_sbrk_r+0x1a>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_sbrk_r+0x1a>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	200028bc 	.word	0x200028bc

0800a724 <__malloc_lock>:
 800a724:	4801      	ldr	r0, [pc, #4]	; (800a72c <__malloc_lock+0x8>)
 800a726:	f000 b811 	b.w	800a74c <__retarget_lock_acquire_recursive>
 800a72a:	bf00      	nop
 800a72c:	200028c0 	.word	0x200028c0

0800a730 <__malloc_unlock>:
 800a730:	4801      	ldr	r0, [pc, #4]	; (800a738 <__malloc_unlock+0x8>)
 800a732:	f000 b80c 	b.w	800a74e <__retarget_lock_release_recursive>
 800a736:	bf00      	nop
 800a738:	200028c0 	.word	0x200028c0

0800a73c <_malloc_usable_size_r>:
 800a73c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a740:	1f18      	subs	r0, r3, #4
 800a742:	2b00      	cmp	r3, #0
 800a744:	bfbc      	itt	lt
 800a746:	580b      	ldrlt	r3, [r1, r0]
 800a748:	18c0      	addlt	r0, r0, r3
 800a74a:	4770      	bx	lr

0800a74c <__retarget_lock_acquire_recursive>:
 800a74c:	4770      	bx	lr

0800a74e <__retarget_lock_release_recursive>:
 800a74e:	4770      	bx	lr

0800a750 <_init>:
 800a750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a752:	bf00      	nop
 800a754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a756:	bc08      	pop	{r3}
 800a758:	469e      	mov	lr, r3
 800a75a:	4770      	bx	lr

0800a75c <_fini>:
 800a75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a75e:	bf00      	nop
 800a760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a762:	bc08      	pop	{r3}
 800a764:	469e      	mov	lr, r3
 800a766:	4770      	bx	lr
